(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{15:function(t,e,n){"use strict";n.r(e);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},i=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)<0?r=a+1:i=a}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var a=r+i>>>1;t(e[a],n)>0?i=a:r=a+1}return r}}};var a=i(r),o=a.right,s=a.left,u=o,c=function(t,e){null==e&&(e=l);for(var n=0,r=t.length-1,i=t[0],a=new Array(r<0?0:r);n<r;)a[n]=e(i,i=t[++n]);return a};function l(t,e){return[t,e]}var f=function(t,e,n){var r,i,a,o,s=t.length,u=e.length,c=new Array(s*u);for(null==n&&(n=l),r=a=0;r<s;++r)for(o=t[r],i=0;i<u;++i,++a)c[a]=n(o,e[i]);return c},h=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},d=function(t){return null===t?NaN:+t},p=function(t,e){var n,r,i=t.length,a=0,o=-1,s=0,u=0;if(null==e)for(;++o<i;)isNaN(n=d(t[o]))||(u+=(r=n-s)*(n-(s+=r/++a)));else for(;++o<i;)isNaN(n=d(e(t[o],o,t)))||(u+=(r=n-s)*(n-(s+=r/++a)));if(a>1)return u/(a-1)},g=function(t,e){var n=p(t,e);return n?Math.sqrt(n):n},_=function(t,e){var n,r,i,a=t.length,o=-1;if(null==e){for(;++o<a;)if(null!=(n=t[o])&&n>=n)for(r=i=n;++o<a;)null!=(n=t[o])&&(r>n&&(r=n),i<n&&(i=n))}else for(;++o<a;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=i=n;++o<a;)null!=(n=e(t[o],o,t))&&(r>n&&(r=n),i<n&&(i=n));return[r,i]},y=Array.prototype,x=y.slice,v=y.map,m=function(t){return function(){return t}},b=function(t){return t},w=function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a},S=Math.sqrt(50),A=Math.sqrt(10),T=Math.sqrt(2),P=function(t,e,n){var r,i,a,o,s=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(o=C(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),a=new Array(i=Math.ceil(e-t+1));++s<i;)a[s]=(t+s)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),a=new Array(i=Math.ceil(t-e+1));++s<i;)a[s]=(t-s)/o;return r&&a.reverse(),a};function C(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=S?10:a>=A?5:a>=T?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=S?10:a>=A?5:a>=T?2:1)}function M(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=S?i*=10:a>=A?i*=5:a>=T&&(i*=2),e<t?-i:i}var L=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},E=function(){var t=b,e=_,n=L;function r(r){var i,a,o=r.length,s=new Array(o);for(i=0;i<o;++i)s[i]=t(r[i],i,r);var c=e(s),l=c[0],f=c[1],h=n(s,l,f);Array.isArray(h)||(h=M(l,f,h),h=w(Math.ceil(l/h)*h,f,h));for(var d=h.length;h[0]<=l;)h.shift(),--d;for(;h[d-1]>f;)h.pop(),--d;var p,g=new Array(d+1);for(i=0;i<=d;++i)(p=g[i]=[]).x0=i>0?h[i-1]:l,p.x1=i<d?h[i]:f;for(i=0;i<o;++i)l<=(a=s[i])&&a<=f&&g[u(h,a,0,d)].push(r[i]);return g}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:m(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:m([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?m(x.call(t)):m(t),r):n},r},V=function(t,e,n){if(null==n&&(n=d),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,a=Math.floor(i),o=+n(t[a],a,t);return o+(+n(t[a+1],a+1,t)-o)*(i-a)}},G=function(t,e,n){return t=v.call(t,d).sort(r),Math.ceil((n-e)/(2*(V(t,.75)-V(t,.25))*Math.pow(t.length,-1/3)))},k=function(t,e,n){return Math.ceil((n-e)/(3.5*g(t)*Math.pow(t.length,-1/3)))},R=function(t,e){var n,r,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=n;++a<i;)null!=(n=t[a])&&n>r&&(r=n)}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=n;++a<i;)null!=(n=e(t[a],a,t))&&n>r&&(r=n);return r},O=function(t,e){var n,r=t.length,i=r,a=-1,o=0;if(null==e)for(;++a<r;)isNaN(n=d(t[a]))?--i:o+=n;else for(;++a<r;)isNaN(n=d(e(t[a],a,t)))?--i:o+=n;if(i)return o/i},I=function(t,e){var n,i=t.length,a=-1,o=[];if(null==e)for(;++a<i;)isNaN(n=d(t[a]))||o.push(n);else for(;++a<i;)isNaN(n=d(e(t[a],a,t)))||o.push(n);return V(o.sort(r),.5)},N=function(t){for(var e,n,r,i=t.length,a=-1,o=0;++a<i;)o+=t[a].length;for(n=new Array(o);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--o]=r[e];return n},D=function(t,e){var n,r,i=t.length,a=-1;if(null==e){for(;++a<i;)if(null!=(n=t[a])&&n>=n)for(r=n;++a<i;)null!=(n=t[a])&&r>n&&(r=n)}else for(;++a<i;)if(null!=(n=e(t[a],a,t))&&n>=n)for(r=n;++a<i;)null!=(n=e(t[a],a,t))&&r>n&&(r=n);return r},F=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},z=function(t,e){if(n=t.length){var n,i,a=0,o=0,s=t[o];for(null==e&&(e=r);++a<n;)(e(i=t[a],s)<0||0!==e(s,s))&&(s=i,o=a);return 0===e(s,s)?o:void 0}},X=function(t,e,n){for(var r,i,a=(null==n?t.length:n)-(e=null==e?0:+e);a;)i=Math.random()*a--|0,r=t[a+e],t[a+e]=t[i+e],t[i+e]=r;return t},B=function(t,e){var n,r=t.length,i=-1,a=0;if(null==e)for(;++i<r;)(n=+t[i])&&(a+=n);else for(;++i<r;)(n=+e(t[i],i,t))&&(a+=n);return a},Y=function(t){if(!(i=t.length))return[];for(var e=-1,n=D(t,H),r=new Array(n);++e<n;)for(var i,a=-1,o=r[e]=new Array(i);++a<i;)o[a]=t[a][e];return r};function H(t){return t.length}var U=function(){return Y(arguments)},j=Array.prototype.slice,W=function(t){return t},q=1,Q=2,Z=3,$=4,K=1e-6;function J(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function et(){return!this.__axis}function nt(t,e){var n=[],r=null,i=null,a=6,o=6,s=3,u=t===q||t===$?-1:1,c=t===$||t===Q?"x":"y",l=t===q||t===Z?J:tt;function f(f){var h=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,d=null==i?e.tickFormat?e.tickFormat.apply(e,n):W:i,p=Math.max(a,0)+s,g=e.range(),_=+g[0]+.5,y=+g[g.length-1]+.5,x=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),v=f.selection?f.selection():f,m=v.selectAll(".domain").data([null]),b=v.selectAll(".tick").data(h,e).order(),w=b.exit(),S=b.enter().append("g").attr("class","tick"),A=b.select("line"),T=b.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(S),A=A.merge(S.append("line").attr("stroke","currentColor").attr(c+"2",u*a)),T=T.merge(S.append("text").attr("fill","currentColor").attr(c,u*p).attr("dy",t===q?"0em":t===Z?"0.71em":"0.32em")),f!==v&&(m=m.transition(f),b=b.transition(f),A=A.transition(f),T=T.transition(f),w=w.transition(f).attr("opacity",K).attr("transform",function(t){return isFinite(t=x(t))?l(t):this.getAttribute("transform")}),S.attr("opacity",K).attr("transform",function(t){var e=this.parentNode.__axis;return l(e&&isFinite(e=e(t))?e:x(t))})),w.remove(),m.attr("d",t===$||t==Q?o?"M"+u*o+","+_+"H0.5V"+y+"H"+u*o:"M0.5,"+_+"V"+y:o?"M"+_+","+u*o+"V0.5H"+y+"V"+u*o:"M"+_+",0.5H"+y),b.attr("opacity",1).attr("transform",function(t){return l(x(t))}),A.attr(c+"2",u*a),T.attr(c,u*p).text(d),v.filter(et).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Q?"start":t===$?"end":"middle"),v.each(function(){this.__axis=x})}return f.scale=function(t){return arguments.length?(e=t,f):e},f.ticks=function(){return n=j.call(arguments),f},f.tickArguments=function(t){return arguments.length?(n=null==t?[]:j.call(t),f):n.slice()},f.tickValues=function(t){return arguments.length?(r=null==t?null:j.call(t),f):r&&r.slice()},f.tickFormat=function(t){return arguments.length?(i=t,f):i},f.tickSize=function(t){return arguments.length?(a=o=+t,f):a},f.tickSizeInner=function(t){return arguments.length?(a=+t,f):a},f.tickSizeOuter=function(t){return arguments.length?(o=+t,f):o},f.tickPadding=function(t){return arguments.length?(s=+t,f):s},f}function rt(t){return nt(q,t)}function it(t){return nt(Q,t)}function at(t){return nt(Z,t)}function ot(t){return nt($,t)}var st={value:function(){}};function ut(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new ct(r)}function ct(t){this._=t}function lt(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function ft(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=st,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}ct.prototype=ut.prototype={constructor:ct,on:function(t,e){var n,r,i=this._,a=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})),o=-1,s=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<s;)if(n=(t=a[o]).type)i[n]=ft(i[n],t.name,e);else if(null==e)for(n in i)i[n]=ft(i[n],t.name,null);return this}for(;++o<s;)if((n=(t=a[o]).type)&&(n=lt(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new ct(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var ht=ut,dt="http://www.w3.org/1999/xhtml",pt={svg:"http://www.w3.org/2000/svg",xhtml:dt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},gt=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),pt.hasOwnProperty(e)?{space:pt[e],local:t}:t};var _t=function(t){var e=gt(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===dt&&e.documentElement.namespaceURI===dt?e.createElement(t):e.createElementNS(n,t)}})(e)};function yt(){}var xt=function(t){return null==t?yt:function(){return this.querySelector(t)}};function vt(){return[]}var mt=function(t){return null==t?vt:function(){return this.querySelectorAll(t)}},bt=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var wt=document.documentElement;if(!wt.matches){var St=wt.webkitMatchesSelector||wt.msMatchesSelector||wt.mozMatchesSelector||wt.oMatchesSelector;bt=function(t){return function(){return St.call(this,t)}}}}var At=bt,Tt=function(t){return new Array(t.length)};function Pt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}Pt.prototype={constructor:Pt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Ct="$";function Mt(t,e,n,r,i,a){for(var o,s=0,u=e.length,c=a.length;s<c;++s)(o=e[s])?(o.__data__=a[s],r[s]=o):n[s]=new Pt(t,a[s]);for(;s<u;++s)(o=e[s])&&(i[s]=o)}function Lt(t,e,n,r,i,a,o){var s,u,c,l={},f=e.length,h=a.length,d=new Array(f);for(s=0;s<f;++s)(u=e[s])&&(d[s]=c=Ct+o.call(u,u.__data__,s,e),c in l?i[s]=u:l[c]=u);for(s=0;s<h;++s)(u=l[c=Ct+o.call(t,a[s],s,a)])?(r[s]=u,u.__data__=a[s],l[c]=null):n[s]=new Pt(t,a[s]);for(s=0;s<f;++s)(u=e[s])&&l[d[s]]===u&&(i[s]=u)}function Et(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var Vt=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Gt(t,e){return t.style.getPropertyValue(e)||Vt(t).getComputedStyle(t,null).getPropertyValue(e)}function kt(t){return t.trim().split(/^|\s+/)}function Rt(t){return t.classList||new Ot(t)}function Ot(t){this._node=t,this._names=kt(t.getAttribute("class")||"")}function It(t,e){for(var n=Rt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function Nt(t,e){for(var n=Rt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}Ot.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Dt(){this.textContent=""}function Ft(){this.innerHTML=""}function zt(){this.nextSibling&&this.parentNode.appendChild(this)}function Xt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Bt(){return null}function Yt(){var t=this.parentNode;t&&t.removeChild(this)}function Ht(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ut(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var jt={},Wt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(jt={mouseenter:"mouseover",mouseleave:"mouseout"}));function qt(t,e,n){return t=Qt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Qt(t,e,n){return function(r){var i=Wt;Wt=r;try{t.call(this,this.__data__,e,n)}finally{Wt=i}}}function Zt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function $t(t,e,n){var r=jt.hasOwnProperty(t.type)?qt:Qt;return function(i,a,o){var s,u=this.__on,c=r(e,a,o);if(u)for(var l=0,f=u.length;l<f;++l)if((s=u[l]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=c,s.capture=n),void(s.value=e);this.addEventListener(t.type,c,n),s={type:t.type,name:t.name,value:e,listener:c,capture:n},u?u.push(s):this.__on=[s]}}function Kt(t,e,n,r){var i=Wt;t.sourceEvent=Wt,Wt=t;try{return e.apply(n,r)}finally{Wt=i}}function Jt(t,e,n){var r=Vt(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}var te=[null];function ee(t,e){this._groups=t,this._parents=e}function ne(){return new ee([[document.documentElement]],te)}ee.prototype=ne.prototype={constructor:ee,select:function(t){"function"!=typeof t&&(t=xt(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o,s=e[i],u=s.length,c=r[i]=new Array(u),l=0;l<u;++l)(a=s[l])&&(o=t.call(a,a.__data__,l,s))&&("__data__"in a&&(o.__data__=a.__data__),c[l]=o);return new ee(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=mt(t));for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var o,s=e[a],u=s.length,c=0;c<u;++c)(o=s[c])&&(r.push(t.call(o,o.__data__,c,s)),i.push(o));return new ee(r,i)},filter:function(t){"function"!=typeof t&&(t=At(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],s=o.length,u=r[i]=[],c=0;c<s;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&u.push(a);return new ee(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),l=-1,this.each(function(t){p[++l]=t}),p;var n,r=e?Lt:Mt,i=this._parents,a=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=a.length,s=new Array(o),u=new Array(o),c=new Array(o),l=0;l<o;++l){var f=i[l],h=a[l],d=h.length,p=t.call(f,f&&f.__data__,l,i),g=p.length,_=u[l]=new Array(g),y=s[l]=new Array(g);r(f,h,_,y,c[l]=new Array(d),p,e);for(var x,v,m=0,b=0;m<g;++m)if(x=_[m]){for(m>=b&&(b=m+1);!(v=y[b])&&++b<g;);x._next=v||null}}return(s=new ee(s,i))._enter=u,s._exit=c,s},enter:function(){return new ee(this._enter||this._groups.map(Tt),this._parents)},exit:function(){return new ee(this._exit||this._groups.map(Tt),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var u,c=e[s],l=n[s],f=c.length,h=o[s]=new Array(f),d=0;d<f;++d)(u=c[d]||l[d])&&(h[d]=u);for(;s<r;++s)o[s]=e[s];return new ee(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=Et);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var o,s=n[a],u=s.length,c=i[a]=new Array(u),l=0;l<u;++l)(o=s[l])&&(c[l]=o);c.sort(e)}return new ee(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],o=0,s=a.length;o<s;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,e){var n=gt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):Gt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=kt(t+"");if(arguments.length<2){for(var r=Rt(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?It:Nt)(this,t)}}:e?function(t){return function(){It(this,t)}}:function(t){return function(){Nt(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?Dt:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ft:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(zt)},lower:function(){return this.each(Xt)},append:function(t){var e="function"==typeof t?t:_t(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:_t(t),r=null==e?Bt:"function"==typeof e?e:xt(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Yt)},clone:function(t){return this.select(t?Ut:Ht)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=function(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}(t+""),o=a.length;if(!(arguments.length<2)){for(s=e?$t:Zt,null==n&&(n=!1),r=0;r<o;++r)this.each(s(a[r],e,n));return this}var s=this.node().__on;if(s)for(var u,c=0,l=s.length;c<l;++c)for(r=0,u=s[c];r<o;++r)if((i=a[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return Jt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return Jt(this,t,e)}})(t,e))}};var re=ne,ie=function(t){return"string"==typeof t?new ee([[document.querySelector(t)]],[document.documentElement]):new ee([[t]],te)},ae=function(t){return ie(_t(t).call(document.documentElement))},oe=0;function se(){return new ue}function ue(){this._="@"+(++oe).toString(36)}ue.prototype=se.prototype={constructor:ue,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var ce=function(){for(var t,e=Wt;t=e.sourceEvent;)e=t;return e},le=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]},fe=function(t){var e=ce();return e.changedTouches&&(e=e.changedTouches[0]),le(t,e)},he=function(t){return"string"==typeof t?new ee([document.querySelectorAll(t)],[document.documentElement]):new ee([null==t?[]:t],te)},de=function(t,e,n){arguments.length<3&&(n=e,e=ce().changedTouches);for(var r,i=0,a=e?e.length:0;i<a;++i)if((r=e[i]).identifier===n)return le(t,r);return null},pe=function(t,e){null==e&&(e=ce().touches);for(var n=0,r=e?e.length:0,i=new Array(r);n<r;++n)i[n]=le(t,e[n]);return i};function ge(){Wt.stopImmediatePropagation()}var _e=function(){Wt.preventDefault(),Wt.stopImmediatePropagation()},ye=function(t){var e=t.document.documentElement,n=ie(t).on("dragstart.drag",_e,!0);"onselectstart"in e?n.on("selectstart.drag",_e,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function xe(t,e){var n=t.document.documentElement,r=ie(t).on("dragstart.drag",null);e&&(r.on("click.drag",_e,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var ve=function(t){return function(){return t}};function me(t,e,n,r,i,a,o,s,u,c){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=i,this.x=a,this.y=o,this.dx=s,this.dy=u,this._=c}function be(){return!Wt.button}function we(){return this.parentNode}function Se(t){return null==t?{x:Wt.x,y:Wt.y}:t}function Ae(){return"ontouchstart"in this}me.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Te=function(){var t,e,n,r,i=be,a=we,o=Se,s=Ae,u={},c=ht("start","drag","end"),l=0,f=0;function h(t){t.on("mousedown.drag",d).filter(s).on("touchstart.drag",_).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",x).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!r&&i.apply(this,arguments)){var o=v("mouse",a.apply(this,arguments),fe,this,arguments);o&&(ie(Wt.view).on("mousemove.drag",p,!0).on("mouseup.drag",g,!0),ye(Wt.view),ge(),n=!1,t=Wt.clientX,e=Wt.clientY,o("start"))}}function p(){if(_e(),!n){var r=Wt.clientX-t,i=Wt.clientY-e;n=r*r+i*i>f}u.mouse("drag")}function g(){ie(Wt.view).on("mousemove.drag mouseup.drag",null),xe(Wt.view,n),_e(),u.mouse("end")}function _(){if(i.apply(this,arguments)){var t,e,n=Wt.changedTouches,r=a.apply(this,arguments),o=n.length;for(t=0;t<o;++t)(e=v(n[t].identifier,r,de,this,arguments))&&(ge(),e("start"))}}function y(){var t,e,n=Wt.changedTouches,r=n.length;for(t=0;t<r;++t)(e=u[n[t].identifier])&&(_e(),e("drag"))}function x(){var t,e,n=Wt.changedTouches,i=n.length;for(r&&clearTimeout(r),r=setTimeout(function(){r=null},500),t=0;t<i;++t)(e=u[n[t].identifier])&&(ge(),e("end"))}function v(t,e,n,r,i){var a,s,f,d=n(e,t),p=c.copy();if(Kt(new me(h,"beforestart",a,t,l,d[0],d[1],0,0,p),function(){return null!=(Wt.subject=a=o.apply(r,i))&&(s=a.x-d[0]||0,f=a.y-d[1]||0,!0)}))return function o(c){var g,_=d;switch(c){case"start":u[t]=o,g=l++;break;case"end":delete u[t],--l;case"drag":d=n(e,t),g=l}Kt(new me(h,c,a,t,g,d[0]+s,d[1]+f,d[0]-_[0],d[1]-_[1],p),p.apply,p,[c,r,i])}}return h.filter=function(t){return arguments.length?(i="function"==typeof t?t:ve(!!t),h):i},h.container=function(t){return arguments.length?(a="function"==typeof t?t:ve(t),h):a},h.subject=function(t){return arguments.length?(o="function"==typeof t?t:ve(t),h):o},h.touchable=function(t){return arguments.length?(s="function"==typeof t?t:ve(!!t),h):s},h.on=function(){var t=c.on.apply(c,arguments);return t===c?h:t},h.clickDistance=function(t){return arguments.length?(f=(t=+t)*t,h):Math.sqrt(f)},h},Pe=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Ce(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Me(){}var Le="\\s*([+-]?\\d+)\\s*",Ee="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ve="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Ge=/^#([0-9a-f]{3})$/,ke=/^#([0-9a-f]{6})$/,Re=new RegExp("^rgb\\("+[Le,Le,Le]+"\\)$"),Oe=new RegExp("^rgb\\("+[Ve,Ve,Ve]+"\\)$"),Ie=new RegExp("^rgba\\("+[Le,Le,Le,Ee]+"\\)$"),Ne=new RegExp("^rgba\\("+[Ve,Ve,Ve,Ee]+"\\)$"),De=new RegExp("^hsl\\("+[Ee,Ve,Ve]+"\\)$"),Fe=new RegExp("^hsla\\("+[Ee,Ve,Ve,Ee]+"\\)$"),ze={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Xe(t){var e;return t=(t+"").trim().toLowerCase(),(e=Ge.exec(t))?new je((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=ke.exec(t))?Be(parseInt(e[1],16)):(e=Re.exec(t))?new je(e[1],e[2],e[3],1):(e=Oe.exec(t))?new je(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ie.exec(t))?Ye(e[1],e[2],e[3],e[4]):(e=Ne.exec(t))?Ye(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=De.exec(t))?qe(e[1],e[2]/100,e[3]/100,1):(e=Fe.exec(t))?qe(e[1],e[2]/100,e[3]/100,e[4]):ze.hasOwnProperty(t)?Be(ze[t]):"transparent"===t?new je(NaN,NaN,NaN,0):null}function Be(t){return new je(t>>16&255,t>>8&255,255&t,1)}function Ye(t,e,n,r){return r<=0&&(t=e=n=NaN),new je(t,e,n,r)}function He(t){return t instanceof Me||(t=Xe(t)),t?new je((t=t.rgb()).r,t.g,t.b,t.opacity):new je}function Ue(t,e,n,r){return 1===arguments.length?He(t):new je(t,e,n,null==r?1:r)}function je(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function We(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function qe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ze(t,e,n,r)}function Qe(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Ze)return new Ze(t.h,t.s,t.l,t.opacity);if(t instanceof Me||(t=Xe(t)),!t)return new Ze;if(t instanceof Ze)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),o=NaN,s=a-i,u=(a+i)/2;return s?(o=e===a?(n-r)/s+6*(n<r):n===a?(r-e)/s+2:(e-n)/s+4,s/=u<.5?a+i:2-a-i,o*=60):s=u>0&&u<1?0:o,new Ze(o,s,u,t.opacity)}(t):new Ze(t,e,n,null==r?1:r)}function Ze(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function $e(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Pe(Me,Xe,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),Pe(je,Ue,Ce(Me,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new je(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new je(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+We(this.r)+We(this.g)+We(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),Pe(Ze,Qe,Ce(Me,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ze(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ze(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new je($e(t>=240?t-240:t+120,i,r),$e(t,i,r),$e(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Ke=Math.PI/180,Je=180/Math.PI,tn=.96422,en=1,nn=.82521,rn=4/29,an=6/29,on=3*an*an,sn=an*an*an;function un(t){if(t instanceof fn)return new fn(t.l,t.a,t.b,t.opacity);if(t instanceof vn){if(isNaN(t.h))return new fn(t.l,0,0,t.opacity);var e=t.h*Ke;return new fn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof je||(t=He(t));var n,r,i=gn(t.r),a=gn(t.g),o=gn(t.b),s=hn((.2225045*i+.7168786*a+.0606169*o)/en);return i===a&&a===o?n=r=s:(n=hn((.4360747*i+.3850649*a+.1430804*o)/tn),r=hn((.0139322*i+.0971045*a+.7141733*o)/nn)),new fn(116*s-16,500*(n-s),200*(s-r),t.opacity)}function cn(t,e){return new fn(t,0,0,null==e?1:e)}function ln(t,e,n,r){return 1===arguments.length?un(t):new fn(t,e,n,null==r?1:r)}function fn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function hn(t){return t>sn?Math.pow(t,1/3):t/on+rn}function dn(t){return t>an?t*t*t:on*(t-rn)}function pn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function gn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function _n(t){if(t instanceof vn)return new vn(t.h,t.c,t.l,t.opacity);if(t instanceof fn||(t=un(t)),0===t.a&&0===t.b)return new vn(NaN,0,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Je;return new vn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function yn(t,e,n,r){return 1===arguments.length?_n(t):new vn(n,e,t,null==r?1:r)}function xn(t,e,n,r){return 1===arguments.length?_n(t):new vn(t,e,n,null==r?1:r)}function vn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}Pe(fn,ln,Ce(Me,{brighter:function(t){return new fn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new fn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new je(pn(3.1338561*(e=tn*dn(e))-1.6168667*(t=en*dn(t))-.4906146*(n=nn*dn(n))),pn(-.9787684*e+1.9161415*t+.033454*n),pn(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Pe(vn,xn,Ce(Me,{brighter:function(t){return new vn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new vn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return un(this).rgb()}}));var mn=-.29227,bn=-.90649,wn=1.97294,Sn=wn*bn,An=1.78277*wn,Tn=1.78277*mn- -.14861*bn;function Pn(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Cn)return new Cn(t.h,t.s,t.l,t.opacity);t instanceof je||(t=He(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Tn*r+Sn*e-An*n)/(Tn+Sn-An),a=r-i,o=(wn*(n-i)-mn*a)/bn,s=Math.sqrt(o*o+a*a)/(wn*i*(1-i)),u=s?Math.atan2(o,a)*Je-120:NaN;return new Cn(u<0?u+360:u,s,i,t.opacity)}(t):new Cn(t,e,n,null==r?1:r)}function Cn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Mn(t,e,n,r,i){var a=t*t,o=a*t;return((1-3*t+3*a-o)*e+(4-6*a+3*o)*n+(1+3*t+3*a-3*o)*r+o*i)/6}Pe(Cn,Pn,Ce(Me,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Cn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Cn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Ke,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new je(255*(e+n*(-.14861*r+1.78277*i)),255*(e+n*(mn*r+bn*i)),255*(e+n*(wn*r)),this.opacity)}}));var Ln=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],o=r>0?t[r-1]:2*i-a,s=r<e-1?t[r+2]:2*a-i;return Mn((n-r/e)*e,o,i,a,s)}},En=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],a=t[r%e],o=t[(r+1)%e],s=t[(r+2)%e];return Mn((n-r/e)*e,i,a,o,s)}},Vn=function(t){return function(){return t}};function Gn(t,e){return function(n){return t+n*e}}function kn(t,e){var n=e-t;return n?Gn(t,n>180||n<-180?n-360*Math.round(n/360):n):Vn(isNaN(t)?e:t)}function Rn(t){return 1==(t=+t)?On:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Vn(isNaN(e)?n:e)}}function On(t,e){var n=e-t;return n?Gn(t,n):Vn(isNaN(t)?e:t)}var In=function t(e){var n=Rn(e);function r(t,e){var r=n((t=Ue(t)).r,(e=Ue(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),o=On(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Nn(t){return function(e){var n,r,i=e.length,a=new Array(i),o=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Ue(e[n]),a[n]=r.r||0,o[n]=r.g||0,s[n]=r.b||0;return a=t(a),o=t(o),s=t(s),r.opacity=1,function(t){return r.r=a(t),r.g=o(t),r.b=s(t),r+""}}}var Dn=Nn(Ln),Fn=Nn(En),zn=function(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(n=0;n<i;++n)a[n]=$n(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<i;++n)o[n]=a[n](t);return o}},Xn=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Bn=function(t,e){return e-=t=+t,function(n){return t+e*n}},Yn=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=$n(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},Hn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Un=new RegExp(Hn.source,"g");var jn,Wn,qn,Qn,Zn=function(t,e){var n,r,i,a=Hn.lastIndex=Un.lastIndex=0,o=-1,s=[],u=[];for(t+="",e+="";(n=Hn.exec(t))&&(r=Un.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),s[o]?s[o]+=i:s[++o]=i),(n=n[0])===(r=r[0])?s[o]?s[o]+=r:s[++o]=r:(s[++o]=null,u.push({i:o,x:Bn(n,r)})),a=Un.lastIndex;return a<e.length&&(i=e.slice(a),s[o]?s[o]+=i:s[++o]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})},$n=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Vn(e):("number"===r?Bn:"string"===r?(n=Xe(e))?(e=n,In):Zn:e instanceof Xe?In:e instanceof Date?Xn:Array.isArray(e)?zn:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Yn:Bn)(t,e)},Kn=function(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}},Jn=function(t,e){var n=kn(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}},tr=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},er=180/Math.PI,nr={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},rr=function(t,e,n,r,i,a){var o,s,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*er,skewX:Math.atan(u)*er,scaleX:o,scaleY:s}};function ir(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var s=[],u=[];return a=t(a),o=t(o),function(t,r,i,a,o,s){if(t!==i||r!==a){var u=o.push("translate(",null,e,null,n);s.push({i:u-4,x:Bn(t,i)},{i:u-2,x:Bn(r,a)})}else(i||a)&&o.push("translate("+i+e+a+n)}(a.translateX,a.translateY,o.translateX,o.translateY,s,u),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Bn(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,o.rotate,s,u),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Bn(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,o.skewX,s,u),function(t,e,n,r,a,o){if(t!==n||e!==r){var s=a.push(i(a)+"scale(",null,",",null,")");o.push({i:s-4,x:Bn(t,n)},{i:s-2,x:Bn(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,s,u),a=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var ar=ir(function(t){return"none"===t?nr:(jn||(jn=document.createElement("DIV"),Wn=document.documentElement,qn=document.defaultView),jn.style.transform=t,t=qn.getComputedStyle(Wn.appendChild(jn),null).getPropertyValue("transform"),Wn.removeChild(jn),t=t.slice(7,-1).split(","),rr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),or=ir(function(t){return null==t?nr:(Qn||(Qn=document.createElementNS("http://www.w3.org/2000/svg","g")),Qn.setAttribute("transform",t),(t=Qn.transform.baseVal.consolidate())?(t=t.matrix,rr(t.a,t.b,t.c,t.d,t.e,t.f)):nr)},", ",")",")"),sr=Math.SQRT2;function ur(t){return((t=Math.exp(t))+1/t)/2}var cr=function(t,e){var n,r,i=t[0],a=t[1],o=t[2],s=e[0],u=e[1],c=e[2],l=s-i,f=u-a,h=l*l+f*f;if(h<1e-12)r=Math.log(c/o)/sr,n=function(t){return[i+t*l,a+t*f,o*Math.exp(sr*t*r)]};else{var d=Math.sqrt(h),p=(c*c-o*o+4*h)/(2*o*2*d),g=(c*c-o*o-4*h)/(2*c*2*d),_=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(g*g+1)-g);r=(y-_)/sr,n=function(t){var e,n=t*r,s=ur(_),u=o/(2*d)*(s*(e=sr*n+_,((e=Math.exp(2*e))-1)/(e+1))-function(t){return((t=Math.exp(t))-1/t)/2}(_));return[i+u*l,a+u*f,o*s/ur(sr*n+_)]}}return n.duration=1e3*r,n};function lr(t){return function(e,n){var r=t((e=Qe(e)).h,(n=Qe(n)).h),i=On(e.s,n.s),a=On(e.l,n.l),o=On(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=i(t),e.l=a(t),e.opacity=o(t),e+""}}}var fr=lr(kn),hr=lr(On);function dr(t,e){var n=On((t=ln(t)).l,(e=ln(e)).l),r=On(t.a,e.a),i=On(t.b,e.b),a=On(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=a(e),t+""}}function pr(t){return function(e,n){var r=t((e=xn(e)).h,(n=xn(n)).h),i=On(e.c,n.c),a=On(e.l,n.l),o=On(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=i(t),e.l=a(t),e.opacity=o(t),e+""}}}var gr=pr(kn),_r=pr(On);function yr(t){return function e(n){function r(e,r){var i=t((e=Pn(e)).h,(r=Pn(r)).h),a=On(e.s,r.s),o=On(e.l,r.l),s=On(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=a(t),e.l=o(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,r.gamma=e,r}(1)}var xr=yr(kn),vr=yr(On);function mr(t,e){for(var n=0,r=e.length-1,i=e[0],a=new Array(r<0?0:r);n<r;)a[n]=t(i,i=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return a[e](t-e)}}var br,wr,Sr=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n},Ar=0,Tr=0,Pr=0,Cr=1e3,Mr=0,Lr=0,Er=0,Vr="object"==typeof performance&&performance.now?performance:Date,Gr="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function kr(){return Lr||(Gr(Rr),Lr=Vr.now()+Er)}function Rr(){Lr=0}function Or(){this._call=this._time=this._next=null}function Ir(t,e,n){var r=new Or;return r.restart(t,e,n),r}function Nr(){kr(),++Ar;for(var t,e=br;e;)(t=Lr-e._time)>=0&&e._call.call(null,t),e=e._next;--Ar}function Dr(){Lr=(Mr=Vr.now())+Er,Ar=Tr=0;try{Nr()}finally{Ar=0,function(){var t,e,n=br,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:br=e);wr=t,zr(r)}(),Lr=0}}function Fr(){var t=Vr.now(),e=t-Mr;e>Cr&&(Er-=e,Mr=t)}function zr(t){Ar||(Tr&&(Tr=clearTimeout(Tr)),t-Lr>24?(t<1/0&&(Tr=setTimeout(Dr,t-Vr.now()-Er)),Pr&&(Pr=clearInterval(Pr))):(Pr||(Mr=Vr.now(),Pr=setInterval(Fr,Cr)),Ar=1,Gr(Dr)))}Or.prototype=Ir.prototype={constructor:Or,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?kr():+n)+(null==e?0:+e),this._next||wr===this||(wr?wr._next=this:br=this,wr=this),this._call=t,this._time=n,zr()},stop:function(){this._call&&(this._call=null,this._time=1/0,zr())}};var Xr=function(t,e,n){var r=new Or;return e=null==e?0:+e,r.restart(function(n){r.stop(),t(n+e)},e,n),r},Br=function(t,e,n){var r=new Or,i=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?kr():+n,r.restart(function a(o){o+=i,r.restart(a,i+=e,n),t(o)},e,n),r)},Yr=ht("start","end","interrupt"),Hr=[],Ur=0,jr=1,Wr=2,qr=3,Qr=4,Zr=5,$r=6,Kr=function(t,e,n,r,i,a){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function a(u){var c,l,f,h;if(n.state!==jr)return s();for(c in i)if((h=i[c]).name===n.name){if(h.state===qr)return Xr(a);h.state===Qr?(h.state=$r,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<e&&(h.state=$r,h.timer.stop(),delete i[c])}if(Xr(function(){n.state===qr&&(n.state=Qr,n.timer.restart(o,n.delay,n.time),o(u))}),n.state=Wr,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Wr){for(n.state=qr,r=new Array(f=n.tween.length),c=0,l=-1;c<f;++c)(h=n.tween[c].value.call(t,t.__data__,n.index,n.group))&&(r[++l]=h);r.length=l+1}}function o(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=Zr,1),a=-1,o=r.length;++a<o;)r[a].call(null,i);n.state===Zr&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=$r,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Ir(function(t){n.state=jr,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:r,group:i,on:Yr,tween:Hr,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Ur})};function Jr(t,e){var n=ei(t,e);if(n.state>Ur)throw new Error("too late; already scheduled");return n}function ti(t,e){var n=ei(t,e);if(n.state>Wr)throw new Error("too late; already started");return n}function ei(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var ni=function(t,e){var n,r,i,a=t.__transition,o=!0;if(a){for(i in e=null==e?null:e+"",a)(n=a[i]).name===e?(r=n.state>Wr&&n.state<Zr,n.state=$r,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete a[i]):o=!1;o&&delete t.__transition}};function ri(t,e,n){var r=t._id;return t.each(function(){var t=ti(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return ei(t,r).value[e]}}var ii=function(t,e){var n;return("number"==typeof e?Bn:e instanceof Xe?In:(n=Xe(e))?(e=n,In):Zn)(t,e)};var ai=re.prototype.constructor;var oi=0;function si(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function ui(t){return re().transition(t)}function ci(){return++oi}var li=re.prototype;function fi(t){return+t}function hi(t){return t*t}function di(t){return t*(2-t)}function pi(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function gi(t){return t*t*t}function _i(t){return--t*t*t+1}function yi(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}si.prototype=ui.prototype={constructor:si,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=xt(t));for(var r=this._groups,i=r.length,a=new Array(i),o=0;o<i;++o)for(var s,u,c=r[o],l=c.length,f=a[o]=new Array(l),h=0;h<l;++h)(s=c[h])&&(u=t.call(s,s.__data__,h,c))&&("__data__"in s&&(u.__data__=s.__data__),f[h]=u,Kr(f[h],e,n,h,f,ei(s,n)));return new si(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=mt(t));for(var r=this._groups,i=r.length,a=[],o=[],s=0;s<i;++s)for(var u,c=r[s],l=c.length,f=0;f<l;++f)if(u=c[f]){for(var h,d=t.call(u,u.__data__,f,c),p=ei(u,n),g=0,_=d.length;g<_;++g)(h=d[g])&&Kr(h,e,n,g,d,p);a.push(d),o.push(u)}return new si(a,o,e,n)},filter:function(t){"function"!=typeof t&&(t=At(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],s=o.length,u=r[i]=[],c=0;c<s;++c)(a=o[c])&&t.call(a,a.__data__,c,o)&&u.push(a);return new si(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),s=0;s<a;++s)for(var u,c=e[s],l=n[s],f=c.length,h=o[s]=new Array(f),d=0;d<f;++d)(u=c[d]||l[d])&&(h[d]=u);for(;s<r;++s)o[s]=e[s];return new si(o,this._parents,this._name,this._id)},selection:function(){return new ai(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=ci(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],u=s.length,c=0;c<u;++c)if(o=s[c]){var l=ei(o,e);Kr(o,t,n,c,s,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new si(r,this._parents,t,n)},call:li.call,nodes:li.nodes,node:li.node,size:li.size,empty:li.empty,each:li.each,on:function(t,e){var n=this._id;return arguments.length<2?ei(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Jr:ti;return function(){var o=a(this,t),s=o.on;s!==r&&(i=(r=s).copy()).on(e,n),o.on=i}}(n,t,e))},attr:function(t,e){var n=gt(t),r="transform"===n?or:ii;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,i,a;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===s?null:o===r&&s===i?a:a=e(r=o,i=s);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,i,a;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttribute(t))===s?null:o===r&&s===i?a:a=e(r=o,i=s);this.removeAttribute(t)}})(n,r,ri(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,i;return function(){var a=this.getAttributeNS(t.space,t.local);return a===n?null:a===r?i:i=e(r=a,n)}}:function(t,e,n){var r,i;return function(){var a=this.getAttribute(t);return a===n?null:a===r?i:i=e(r=a,n)}})(n,r,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=gt(t);return this.tween(n,(r.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?ar:ii;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var a=Gt(this,t),o=(this.style.removeProperty(t),Gt(this,t));return a===o?null:a===n&&o===r?i:i=e(n=a,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,i,a;return function(){var o=Gt(this,t),s=n(this);return null==s&&(this.style.removeProperty(t),s=Gt(this,t)),o===s?null:o===r&&s===i?a:a=e(r=o,i=s)}}(t,r,ri(this,"style."+t,e)):function(t,e,n){var r,i;return function(){var a=Gt(this,t);return a===n?null:a===r?i:i=e(r=a,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,i=e.apply(r,arguments);return i&&function(e){r.style.setProperty(t,i(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(ri(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=ei(this.node(),n).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var i=ti(this,t),a=i.tween;if(a!==n)for(var o=0,s=(r=n=a).length;o<s;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}i.tween=r}}:function(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=ti(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var s={name:e,value:n},u=0,c=i.length;u<c;++u)if(i[u].name===e){i[u]=s;break}u===c&&i.push(s)}a.tween=i}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Jr(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Jr(this,t).delay=e}})(e,t)):ei(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){ti(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){ti(this,t).duration=e}})(e,t)):ei(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){ti(this,t).ease=e}}(e,t)):ei(this.node(),e).ease}};var xi=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),vi=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),mi=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),bi=Math.PI,wi=bi/2;function Si(t){return 1-Math.cos(t*wi)}function Ai(t){return Math.sin(t*wi)}function Ti(t){return(1-Math.cos(bi*t))/2}function Pi(t){return Math.pow(2,10*t-10)}function Ci(t){return 1-Math.pow(2,-10*t)}function Mi(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function Li(t){return 1-Math.sqrt(1-t*t)}function Ei(t){return Math.sqrt(1- --t*t)}function Vi(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Gi=4/11,ki=6/11,Ri=8/11,Oi=.75,Ii=9/11,Ni=10/11,Di=.9375,Fi=21/22,zi=63/64,Xi=1/Gi/Gi;function Bi(t){return 1-Yi(1-t)}function Yi(t){return(t=+t)<Gi?Xi*t*t:t<Ri?Xi*(t-=ki)*t+Oi:t<Ni?Xi*(t-=Ii)*t+Di:Xi*(t-=Fi)*t+zi}function Hi(t){return((t*=2)<=1?1-Yi(1-t):Yi(t-1)+1)/2}var Ui=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),ji=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),Wi=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),qi=2*Math.PI,Qi=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=qi);function i(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return i.amplitude=function(e){return t(e,n*qi)},i.period=function(n){return t(e,n)},i}(1,.3),Zi=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=qi);function i(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return i.amplitude=function(e){return t(e,n*qi)},i.period=function(n){return t(e,n)},i}(1,.3),$i=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=qi);function i(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return i.amplitude=function(e){return t(e,n*qi)},i.period=function(n){return t(e,n)},i}(1,.3),Ki={time:null,delay:0,duration:250,ease:yi};function Ji(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Ki.time=kr(),Ki;return n}re.prototype.interrupt=function(t){return this.each(function(){ni(this,t)})},re.prototype.transition=function(t){var e,n;t instanceof si?(e=t._id,t=t._name):(e=ci(),(n=Ki).time=kr(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,s=r[a],u=s.length,c=0;c<u;++c)(o=s[c])&&Kr(o,t,e,c,s,n||Ji(o,e));return new si(r,this._parents,t,e)};var ta=[null],ea=function(t,e){var n,r,i=t.__transition;if(i)for(r in e=null==e?null:e+"",i)if((n=i[r]).state>jr&&n.name===e)return new si([[t]],ta,e,+r);return null},na=function(t){return function(){return t}},ra=function(t,e,n){this.target=t,this.type=e,this.selection=n};function ia(){Wt.stopImmediatePropagation()}var aa=function(){Wt.preventDefault(),Wt.stopImmediatePropagation()},oa={name:"drag"},sa={name:"space"},ua={name:"handle"},ca={name:"center"},la={name:"x",handles:["e","w"].map(xa),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},fa={name:"y",handles:["n","s"].map(xa),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},ha={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(xa),input:function(t){return t},output:function(t){return t}},da={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},pa={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},ga={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},_a={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},ya={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function xa(t){return{type:t}}function va(){return!Wt.button}function ma(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ba(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function wa(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Sa(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function Aa(){return Ca(la)}function Ta(){return Ca(fa)}var Pa=function(){return Ca(ha)};function Ca(t){var e,n=ma,r=va,i=ht(o,"start","brush","end"),a=6;function o(e){var n=e.property("__brush",f).selectAll(".overlay").data([xa("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",da.overlay).merge(n).each(function(){var t=ba(this).extent;ie(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),e.selectAll(".selection").data([xa("selection")]).enter().append("rect").attr("class","selection").attr("cursor",da.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return da[t.type]}),e.each(s).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",l)}function s(){var t=ie(this),e=ba(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?e[1][0]-a/2:e[0][0]-a/2}).attr("y",function(t){return"s"===t.type[0]?e[1][1]-a/2:e[0][1]-a/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+a:a}).attr("height",function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+a:a})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function u(t,e){return t.__brush.emitter||new c(t,e)}function c(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function l(){if(Wt.touches){if(Wt.changedTouches.length<Wt.touches.length)return aa()}else if(e)return;if(r.apply(this,arguments)){var n,i,a,o,c,l,f,h,d,p,g,_,y,x=this,v=Wt.target.__data__.type,m="selection"===(Wt.metaKey?v="overlay":v)?oa:Wt.altKey?ca:ua,b=t===fa?null:_a[v],w=t===la?null:ya[v],S=ba(x),A=S.extent,T=S.selection,P=A[0][0],C=A[0][1],M=A[1][0],L=A[1][1],E=b&&w&&Wt.shiftKey,V=fe(x),G=V,k=u(x,arguments).beforestart();"overlay"===v?S.selection=T=[[n=t===fa?P:V[0],a=t===la?C:V[1]],[c=t===fa?M:n,f=t===la?L:a]]:(n=T[0][0],a=T[0][1],c=T[1][0],f=T[1][1]),i=n,o=a,l=c,h=f;var R=ie(x).attr("pointer-events","none"),O=R.selectAll(".overlay").attr("cursor",da[v]);if(Wt.touches)R.on("touchmove.brush",N,!0).on("touchend.brush touchcancel.brush",F,!0);else{var I=ie(Wt.view).on("keydown.brush",function(){switch(Wt.keyCode){case 16:E=b&&w;break;case 18:m===ua&&(b&&(c=l-d*b,n=i+d*b),w&&(f=h-p*w,a=o+p*w),m=ca,D());break;case 32:m!==ua&&m!==ca||(b<0?c=l-d:b>0&&(n=i-d),w<0?f=h-p:w>0&&(a=o-p),m=sa,O.attr("cursor",da.selection),D());break;default:return}aa()},!0).on("keyup.brush",function(){switch(Wt.keyCode){case 16:E&&(_=y=E=!1,D());break;case 18:m===ca&&(b<0?c=l:b>0&&(n=i),w<0?f=h:w>0&&(a=o),m=ua,D());break;case 32:m===sa&&(Wt.altKey?(b&&(c=l-d*b,n=i+d*b),w&&(f=h-p*w,a=o+p*w),m=ca):(b<0?c=l:b>0&&(n=i),w<0?f=h:w>0&&(a=o),m=ua),O.attr("cursor",da[v]),D());break;default:return}aa()},!0).on("mousemove.brush",N,!0).on("mouseup.brush",F,!0);ye(Wt.view)}ia(),ni(x),s.call(x),k.start()}function N(){var t=fe(x);!E||_||y||(Math.abs(t[0]-G[0])>Math.abs(t[1]-G[1])?y=!0:_=!0),G=t,g=!0,aa(),D()}function D(){var t;switch(d=G[0]-V[0],p=G[1]-V[1],m){case sa:case oa:b&&(d=Math.max(P-n,Math.min(M-c,d)),i=n+d,l=c+d),w&&(p=Math.max(C-a,Math.min(L-f,p)),o=a+p,h=f+p);break;case ua:b<0?(d=Math.max(P-n,Math.min(M-n,d)),i=n+d,l=c):b>0&&(d=Math.max(P-c,Math.min(M-c,d)),i=n,l=c+d),w<0?(p=Math.max(C-a,Math.min(L-a,p)),o=a+p,h=f):w>0&&(p=Math.max(C-f,Math.min(L-f,p)),o=a,h=f+p);break;case ca:b&&(i=Math.max(P,Math.min(M,n-d*b)),l=Math.max(P,Math.min(M,c+d*b))),w&&(o=Math.max(C,Math.min(L,a-p*w)),h=Math.max(C,Math.min(L,f+p*w)))}l<i&&(b*=-1,t=n,n=c,c=t,t=i,i=l,l=t,v in pa&&O.attr("cursor",da[v=pa[v]])),h<o&&(w*=-1,t=a,a=f,f=t,t=o,o=h,h=t,v in ga&&O.attr("cursor",da[v=ga[v]])),S.selection&&(T=S.selection),_&&(i=T[0][0],l=T[1][0]),y&&(o=T[0][1],h=T[1][1]),T[0][0]===i&&T[0][1]===o&&T[1][0]===l&&T[1][1]===h||(S.selection=[[i,o],[l,h]],s.call(x),k.brush())}function F(){if(ia(),Wt.touches){if(Wt.touches.length)return;e&&clearTimeout(e),e=setTimeout(function(){e=null},500),R.on("touchmove.brush touchend.brush touchcancel.brush",null)}else xe(Wt.view,g),I.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);R.attr("pointer-events","all"),O.attr("cursor",da.overlay),S.selection&&(T=S.selection),wa(T)&&(S.selection=null,s.call(x)),k.end()}}function f(){var e=this.__brush||{selection:null};return e.extent=n.apply(this,arguments),e.dim=t,e}return o.move=function(e,n){e.selection?e.on("start.brush",function(){u(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){u(this,arguments).end()}).tween("brush",function(){var e=this,r=e.__brush,i=u(e,arguments),a=r.selection,o=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),c=$n(a,o);function l(t){r.selection=1===t&&wa(o)?null:c(t),s.call(e),i.brush()}return a&&o?l:l(1)}):e.each(function(){var e=arguments,r=this.__brush,i=t.input("function"==typeof n?n.apply(this,e):n,r.extent),a=u(this,e).beforestart();ni(this),r.selection=null==i||wa(i)?null:i,s.call(this),a.start().brush().end()})},c.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){Kt(new ra(o,e,t.output(this.state.selection)),i.apply,i,[e,this.that,this.args])}},o.extent=function(t){return arguments.length?(n="function"==typeof t?t:na([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),o):n},o.filter=function(t){return arguments.length?(r="function"==typeof t?t:na(!!t),o):r},o.handleSize=function(t){return arguments.length?(a=+t,o):a},o.on=function(){var t=i.on.apply(i,arguments);return t===i?o:t},o}var Ma=Math.cos,La=Math.sin,Ea=Math.PI,Va=Ea/2,Ga=2*Ea,ka=Math.max;var Ra=function(){var t=0,e=null,n=null,r=null;function i(i){var a,o,s,u,c,l,f=i.length,h=[],d=w(f),p=[],g=[],_=g.groups=new Array(f),y=new Array(f*f);for(a=0,c=-1;++c<f;){for(o=0,l=-1;++l<f;)o+=i[c][l];h.push(o),p.push(w(f)),a+=o}for(e&&d.sort(function(t,n){return e(h[t],h[n])}),n&&p.forEach(function(t,e){t.sort(function(t,r){return n(i[e][t],i[e][r])})}),u=(a=ka(0,Ga-t*f)/a)?t:Ga/f,o=0,c=-1;++c<f;){for(s=o,l=-1;++l<f;){var x=d[c],v=p[x][l],m=i[x][v],b=o,S=o+=m*a;y[v*f+x]={index:x,subindex:v,startAngle:b,endAngle:S,value:m}}_[x]={index:x,startAngle:s,endAngle:o,value:h[x]},o+=u}for(c=-1;++c<f;)for(l=c-1;++l<f;){var A=y[l*f+c],T=y[c*f+l];(A.value||T.value)&&g.push(A.value<T.value?{source:T,target:A}:{source:A,target:T})}return r?g.sort(r):g}return i.padAngle=function(e){return arguments.length?(t=ka(0,e),i):t},i.sortGroups=function(t){return arguments.length?(e=t,i):e},i.sortSubgroups=function(t){return arguments.length?(n=t,i):n},i.sortChords=function(t){return arguments.length?(null==t?r=null:(e=t,r=function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)})._=t,i):r&&r._;var e},i},Oa=Array.prototype.slice,Ia=function(t){return function(){return t}},Na=Math.PI,Da=2*Na,Fa=Da-1e-6;function za(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Xa(){return new za}za.prototype=Xa.prototype={constructor:za,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,o=this._y1,s=n-t,u=r-e,c=a-t,l=o-e,f=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(f>1e-6)if(Math.abs(l*s-u*c)>1e-6&&i){var h=n-a,d=r-o,p=s*s+u*u,g=h*h+d*d,_=Math.sqrt(p),y=Math.sqrt(f),x=i*Math.tan((Na-Math.acos((p+f-g)/(2*_*y)))/2),v=x/y,m=x/_;Math.abs(v-1)>1e-6&&(this._+="L"+(t+v*c)+","+(e+v*l)),this._+="A"+i+","+i+",0,0,"+ +(l*h>c*d)+","+(this._x1=t+m*s)+","+(this._y1=e+m*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e;var o=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=t+o,c=e+s,l=1^a,f=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+c:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+u+","+c),n&&(f<0&&(f=f%Da+Da),f>Fa?this._+="A"+n+","+n+",0,1,"+l+","+(t-o)+","+(e-s)+"A"+n+","+n+",0,1,"+l+","+(this._x1=u)+","+(this._y1=c):f>1e-6&&(this._+="A"+n+","+n+",0,"+ +(f>=Na)+","+l+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Ba=Xa;function Ya(t){return t.source}function Ha(t){return t.target}function Ua(t){return t.radius}function ja(t){return t.startAngle}function Wa(t){return t.endAngle}var qa=function(){var t=Ya,e=Ha,n=Ua,r=ja,i=Wa,a=null;function o(){var o,s=Oa.call(arguments),u=t.apply(this,s),c=e.apply(this,s),l=+n.apply(this,(s[0]=u,s)),f=r.apply(this,s)-Va,h=i.apply(this,s)-Va,d=l*Ma(f),p=l*La(f),g=+n.apply(this,(s[0]=c,s)),_=r.apply(this,s)-Va,y=i.apply(this,s)-Va;if(a||(a=o=Ba()),a.moveTo(d,p),a.arc(0,0,l,f,h),f===_&&h===y||(a.quadraticCurveTo(0,0,g*Ma(_),g*La(_)),a.arc(0,0,g,_,y)),a.quadraticCurveTo(0,0,d,p),a.closePath(),o)return a=null,o+""||null}return o.radius=function(t){return arguments.length?(n="function"==typeof t?t:Ia(+t),o):n},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Ia(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Ia(+t),o):i},o.source=function(e){return arguments.length?(t=e,o):t},o.target=function(t){return arguments.length?(e=t,o):e},o.context=function(t){return arguments.length?(a=null==t?null:t,o):a},o};function Qa(){}function Za(t,e){var n=new Qa;if(t instanceof Qa)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==e)for(;++i<a;)n.set(i,t[i]);else for(;++i<a;)n.set(e(r=t[i],i,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}Qa.prototype=Za.prototype={constructor:Qa,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var $a=Za,Ka=function(){var t,e,n,r=[],i=[];function a(n,i,o,s){if(i>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var u,c,l,f=-1,h=n.length,d=r[i++],p=$a(),g=o();++f<h;)(l=p.get(u=d(c=n[f])+""))?l.push(c):p.set(u,[c]);return p.each(function(t,e){s(g,e,a(t,i,o,s))}),g}return n={object:function(t){return a(t,0,Ja,to)},map:function(t){return a(t,0,eo,no)},entries:function(t){return function t(n,a){if(++a>r.length)return n;var o,s=i[a-1];return null!=e&&a>=r.length?o=n.entries():(o=[],n.each(function(e,n){o.push({key:n,values:t(e,a)})})),null!=s?o.sort(function(t,e){return s(t.key,e.key)}):o}(a(t,0,eo,no),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return i[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function Ja(){return{}}function to(t,e,n){t[e]=n}function eo(){return $a()}function no(t,e,n){t.set(e,n)}function ro(){}var io=$a.prototype;function ao(t,e){var n=new ro;if(t instanceof ro)t.each(function(t){n.add(t)});else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}ro.prototype=ao.prototype={constructor:ro,has:io.has,add:function(t){return this["$"+(t+="")]=t,this},remove:io.remove,clear:io.clear,values:io.keys,size:io.size,empty:io.empty,each:io.each};var oo=ao,so=function(t){var e=[];for(var n in t)e.push(n);return e},uo=function(t){var e=[];for(var n in t)e.push(t[n]);return e},co=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},lo=Array.prototype.slice,fo=function(t,e){return t-e},ho=function(t){for(var e=0,n=t.length,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r},po=function(t){return function(){return t}},go=function(t,e){for(var n,r=-1,i=e.length;++r<i;)if(n=_o(t,e[r]))return n;return 0};function _o(t,e){for(var n=e[0],r=e[1],i=-1,a=0,o=t.length,s=o-1;a<o;s=a++){var u=t[a],c=u[0],l=u[1],f=t[s],h=f[0],d=f[1];if(yo(u,f,e))return 0;l>r!=d>r&&n<(h-c)*(r-l)/(d-l)+c&&(i=-i)}return i}function yo(t,e,n){var r,i,a,o;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&(i=t[r=+(t[0]===e[0])],a=n[r],o=e[r],i<=a&&a<=o||o<=a&&a<=i)}var xo=function(){},vo=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],mo=function(){var t=1,e=1,n=L,r=s;function i(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(fo);else{var r=_(t),i=r[0],o=r[1];e=M(i,o,e),e=w(Math.floor(i/e)*e,Math.floor(o/e)*e,e)}return e.map(function(e){return a(t,e)})}function a(n,i){var a=[],s=[];return function(n,r,i){var a,s,u,c,l,f,h=new Array,d=new Array;a=s=-1,c=n[0]>=r,vo[c<<1].forEach(p);for(;++a<t-1;)u=c,c=n[a+1]>=r,vo[u|c<<1].forEach(p);vo[c<<0].forEach(p);for(;++s<e-1;){for(a=-1,c=n[s*t+t]>=r,l=n[s*t]>=r,vo[c<<1|l<<2].forEach(p);++a<t-1;)u=c,c=n[s*t+t+a+1]>=r,f=l,l=n[s*t+a+1]>=r,vo[u|c<<1|l<<2|f<<3].forEach(p);vo[c|l<<3].forEach(p)}a=-1,l=n[s*t]>=r,vo[l<<2].forEach(p);for(;++a<t-1;)f=l,l=n[s*t+a+1]>=r,vo[l<<2|f<<3].forEach(p);function p(t){var e,n,r=[t[0][0]+a,t[0][1]+s],u=[t[1][0]+a,t[1][1]+s],c=o(r),l=o(u);(e=d[c])?(n=h[l])?(delete d[e.end],delete h[n.start],e===n?(e.ring.push(u),i(e.ring)):h[e.start]=d[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete d[e.end],e.ring.push(u),d[e.end=l]=e):(e=h[l])?(n=d[c])?(delete h[e.start],delete d[n.end],e===n?(e.ring.push(u),i(e.ring)):h[n.start]=d[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete h[e.start],e.ring.unshift(r),h[e.start=c]=e):h[c]=d[l]={start:c,end:l,ring:[r,u]}}vo[l<<3].forEach(p)}(n,i,function(t){r(t,n,i),ho(t)>0?a.push([t]):s.push(t)}),s.forEach(function(t){for(var e,n=0,r=a.length;n<r;++n)if(-1!==go((e=a[n])[0],t))return void e.push(t)}),{type:"MultiPolygon",value:i,coordinates:a}}function o(e){return 2*e[0]+e[1]*(t+1)*4}function s(n,r,i){n.forEach(function(n){var a,o=n[0],s=n[1],u=0|o,c=0|s,l=r[c*t+u];o>0&&o<t&&u===o&&(a=r[c*t+u-1],n[0]=o+(i-a)/(l-a)-.5),s>0&&s<e&&c===s&&(a=r[(c-1)*t+u],n[1]=s+(i-a)/(l-a)-.5)})}return i.contour=a,i.size=function(n){if(!arguments.length)return[t,e];var r=Math.ceil(n[0]),a=Math.ceil(n[1]);if(!(r>0&&a>0))throw new Error("invalid size");return t=r,e=a,i},i.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?po(lo.call(t)):po(t),i):n},i.smooth=function(t){return arguments.length?(r=t?s:xo,i):r===s},i};function bo(t,e,n){for(var r=t.width,i=t.height,a=1+(n<<1),o=0;o<i;++o)for(var s=0,u=0;s<r+n;++s)s<r&&(u+=t.data[s+o*r]),s>=n&&(s>=a&&(u-=t.data[s-a+o*r]),e.data[s-n+o*r]=u/Math.min(s+1,r-1+a-s,a))}function wo(t,e,n){for(var r=t.width,i=t.height,a=1+(n<<1),o=0;o<r;++o)for(var s=0,u=0;s<i+n;++s)s<i&&(u+=t.data[o+s*r]),s>=n&&(s>=a&&(u-=t.data[o+(s-a)*r]),e.data[o+(s-n)*r]=u/Math.min(s+1,i-1+a-s,a))}function So(t){return t[0]}function Ao(t){return t[1]}function To(){return 1}var Po=function(){var t=So,e=Ao,n=To,r=960,i=500,a=20,o=2,s=3*a,u=r+2*s>>o,c=i+2*s>>o,l=po(20);function f(r){var i=new Float32Array(u*c),f=new Float32Array(u*c);r.forEach(function(r,a,l){var f=+t(r,a,l)+s>>o,h=+e(r,a,l)+s>>o,d=+n(r,a,l);f>=0&&f<u&&h>=0&&h<c&&(i[f+h*u]+=d)}),bo({width:u,height:c,data:i},{width:u,height:c,data:f},a>>o),wo({width:u,height:c,data:f},{width:u,height:c,data:i},a>>o),bo({width:u,height:c,data:i},{width:u,height:c,data:f},a>>o),wo({width:u,height:c,data:f},{width:u,height:c,data:i},a>>o),bo({width:u,height:c,data:i},{width:u,height:c,data:f},a>>o),wo({width:u,height:c,data:f},{width:u,height:c,data:i},a>>o);var d=l(i);if(!Array.isArray(d)){var p=R(i);d=M(0,p,d),(d=w(0,Math.floor(p/d)*d,d)).shift()}return mo().thresholds(d).size([u,c])(i).map(h)}function h(t){return t.value*=Math.pow(2,-2*o),t.coordinates.forEach(d),t}function d(t){t.forEach(p)}function p(t){t.forEach(g)}function g(t){t[0]=t[0]*Math.pow(2,o)-s,t[1]=t[1]*Math.pow(2,o)-s}function _(){return u=r+2*(s=3*a)>>o,c=i+2*s>>o,f}return f.x=function(e){return arguments.length?(t="function"==typeof e?e:po(+e),f):t},f.y=function(t){return arguments.length?(e="function"==typeof t?t:po(+t),f):e},f.weight=function(t){return arguments.length?(n="function"==typeof t?t:po(+t),f):n},f.size=function(t){if(!arguments.length)return[r,i];var e=Math.ceil(t[0]),n=Math.ceil(t[1]);if(!(e>=0||e>=0))throw new Error("invalid size");return r=e,i=n,_()},f.cellSize=function(t){if(!arguments.length)return 1<<o;if(!((t=+t)>=1))throw new Error("invalid cell size");return o=Math.floor(Math.log(t)/Math.LN2),_()},f.thresholds=function(t){return arguments.length?(l="function"==typeof t?t:Array.isArray(t)?po(lo.call(t)):po(t),f):l},f.bandwidth=function(t){if(!arguments.length)return Math.sqrt(a*(a+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return a=Math.round((Math.sqrt(4*t*t+1)-1)/2),_()},f},Co={},Mo={},Lo=34,Eo=10,Vo=13;function Go(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}var ko=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],a=t.length,o=0,s=0,u=a<=0,c=!1;function l(){if(u)return Mo;if(c)return c=!1,Co;var e,r,i=o;if(t.charCodeAt(i)===Lo){for(;o++<a&&t.charCodeAt(o)!==Lo||t.charCodeAt(++o)===Lo;);return(e=o)>=a?u=!0:(r=t.charCodeAt(o++))===Eo?c=!0:r===Vo&&(c=!0,t.charCodeAt(o)===Eo&&++o),t.slice(i+1,e-1).replace(/""/g,'"')}for(;o<a;){if((r=t.charCodeAt(e=o++))===Eo)c=!0;else if(r===Vo)c=!0,t.charCodeAt(o)===Eo&&++o;else if(r!==n)continue;return t.slice(i,e)}return u=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===Eo&&--a,t.charCodeAt(a-1)===Vo&&--a;(r=l())!==Mo;){for(var f=[];r!==Co&&r!==Mo;)f.push(r),r=l();e&&null==(f=e(f,s++))||i.push(f)}return i}function i(e){return e.map(a).join(t)}function a(t){return null==t?"":e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,a=r(t,function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=Go(t);return function(r,i){return e(n(r),i,t)}}(t,e):Go(t)});return a.columns=i||[],a},parseRows:r,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var r in t)r in e||n.push(e[r]=r)}),n}(e)),[n.map(a).join(t)].concat(e.map(function(e){return n.map(function(t){return a(e[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},Ro=ko(","),Oo=Ro.parse,Io=Ro.parseRows,No=Ro.format,Do=Ro.formatRows,Fo=ko("\t"),zo=Fo.parse,Xo=Fo.parseRows,Bo=Fo.format,Yo=Fo.formatRows;function Ho(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var Uo=function(t,e){return fetch(t,e).then(Ho)};function jo(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var Wo=function(t,e){return fetch(t,e).then(jo)};function qo(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Qo=function(t,e){return fetch(t,e).then(qo)};function Zo(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Qo(e,n).then(function(e){return t(e,r)})}}function $o(t,e,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var i=ko(t);return Qo(e,n).then(function(t){return i.parse(t,r)})}var Ko=Zo(Oo),Jo=Zo(zo),ts=function(t,e){return new Promise(function(n,r){var i=new Image;for(var a in e)i[a]=e[a];i.onerror=r,i.onload=function(){n(i)},i.src=t})};function es(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var ns=function(t,e){return fetch(t,e).then(es)};function rs(t){return function(e,n){return Qo(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}var is=rs("application/xml"),as=rs("text/html"),os=rs("image/svg+xml"),ss=function(t,e){var n;function r(){var r,i,a=n.length,o=0,s=0;for(r=0;r<a;++r)o+=(i=n[r]).x,s+=i.y;for(o=o/a-t,s=s/a-e,r=0;r<a;++r)(i=n[r]).x-=o,i.y-=s}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},us=function(t){return function(){return t}},cs=function(){return 1e-6*(Math.random()-.5)};function ls(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var i,a,o,s,u,c,l,f,h,d=t._root,p={data:r},g=t._x0,_=t._y0,y=t._x1,x=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((c=e>=(a=(g+y)/2))?g=a:y=a,(l=n>=(o=(_+x)/2))?_=o:x=o,i=d,!(d=d[f=l<<1|c]))return i[f]=p,t;if(s=+t._x.call(null,d.data),u=+t._y.call(null,d.data),e===s&&n===u)return p.next=d,i?i[f]=p:t._root=p,t;do{i=i?i[f]=new Array(4):t._root=new Array(4),(c=e>=(a=(g+y)/2))?g=a:y=a,(l=n>=(o=(_+x)/2))?_=o:x=o}while((f=l<<1|c)==(h=(u>=o)<<1|s>=a));return i[h]=d,i[f]=p,t}var fs=function(t,e,n,r,i){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=i};function hs(t){return t[0]}function ds(t){return t[1]}function ps(t,e,n){var r=new gs(null==e?hs:e,null==n?ds:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function gs(t,e,n,r,i,a){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function _s(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var ys=ps.prototype=gs.prototype;function xs(t){return t.x+t.vx}function vs(t){return t.y+t.vy}ys.copy=function(){var t,e,n=new gs(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=_s(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(e=r.source[i])&&(e.length?t.push({source:e,target:r.target[i]=new Array(4)}):r.target[i]=_s(e));return n},ys.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return ls(this.cover(e,n),e,n,t)},ys.addAll=function(t){var e,n,r,i,a=t.length,o=new Array(a),s=new Array(a),u=1/0,c=1/0,l=-1/0,f=-1/0;for(n=0;n<a;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(i=+this._y.call(null,e))||(o[n]=r,s[n]=i,r<u&&(u=r),r>l&&(l=r),i<c&&(c=i),i>f&&(f=i));for(l<u&&(u=this._x0,l=this._x1),f<c&&(c=this._y0,f=this._y1),this.cover(u,c).cover(l,f),n=0;n<a;++n)ls(this,o[n],s[n],t[n]);return this},ys.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(n))i=(n=Math.floor(t))+1,a=(r=Math.floor(e))+1;else{if(!(n>t||t>i||r>e||e>a))return this;var o,s,u=i-n,c=this._root;switch(s=(e<(r+a)/2)<<1|t<(n+i)/2){case 0:do{(o=new Array(4))[s]=c,c=o}while(a=r+(u*=2),t>(i=n+u)||e>a);break;case 1:do{(o=new Array(4))[s]=c,c=o}while(a=r+(u*=2),(n=i-u)>t||e>a);break;case 2:do{(o=new Array(4))[s]=c,c=o}while(r=a-(u*=2),t>(i=n+u)||r>e);break;case 3:do{(o=new Array(4))[s]=c,c=o}while(r=a-(u*=2),(n=i-u)>t||r>e)}this._root&&this._root.length&&(this._root=c)}return this._x0=n,this._y0=r,this._x1=i,this._y1=a,this},ys.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},ys.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},ys.find=function(t,e,n){var r,i,a,o,s,u,c,l=this._x0,f=this._y0,h=this._x1,d=this._y1,p=[],g=this._root;for(g&&p.push(new fs(g,l,f,h,d)),null==n?n=1/0:(l=t-n,f=e-n,h=t+n,d=e+n,n*=n);u=p.pop();)if(!(!(g=u.node)||(i=u.x0)>h||(a=u.y0)>d||(o=u.x1)<l||(s=u.y1)<f))if(g.length){var _=(i+o)/2,y=(a+s)/2;p.push(new fs(g[3],_,y,o,s),new fs(g[2],i,y,_,s),new fs(g[1],_,a,o,y),new fs(g[0],i,a,_,y)),(c=(e>=y)<<1|t>=_)&&(u=p[p.length-1],p[p.length-1]=p[p.length-1-c],p[p.length-1-c]=u)}else{var x=t-+this._x.call(null,g.data),v=e-+this._y.call(null,g.data),m=x*x+v*v;if(m<n){var b=Math.sqrt(n=m);l=t-b,f=e-b,h=t+b,d=e+b,r=g.data}}return r},ys.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var e,n,r,i,a,o,s,u,c,l,f,h,d=this._root,p=this._x0,g=this._y0,_=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((c=a>=(s=(p+_)/2))?p=s:_=s,(l=o>=(u=(g+y)/2))?g=u:y=u,e=d,!(d=d[f=l<<1|c]))return this;if(!d.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(n=e,h=f)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):e?(i?e[f]=i:delete e[f],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[h]=d:this._root=d),this):(this._root=i,this)},ys.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},ys.root=function(){return this._root},ys.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},ys.visit=function(t){var e,n,r,i,a,o,s=[],u=this._root;for(u&&s.push(new fs(u,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(u=e.node,r=e.x0,i=e.y0,a=e.x1,o=e.y1)&&u.length){var c=(r+a)/2,l=(i+o)/2;(n=u[3])&&s.push(new fs(n,c,l,a,o)),(n=u[2])&&s.push(new fs(n,r,l,c,o)),(n=u[1])&&s.push(new fs(n,c,i,a,l)),(n=u[0])&&s.push(new fs(n,r,i,c,l))}return this},ys.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new fs(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var i=e.node;if(i.length){var a,o=e.x0,s=e.y0,u=e.x1,c=e.y1,l=(o+u)/2,f=(s+c)/2;(a=i[0])&&n.push(new fs(a,o,s,l,f)),(a=i[1])&&n.push(new fs(a,l,s,u,f)),(a=i[2])&&n.push(new fs(a,o,f,l,c)),(a=i[3])&&n.push(new fs(a,l,f,u,c))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},ys.x=function(t){return arguments.length?(this._x=t,this):this._x},ys.y=function(t){return arguments.length?(this._y=t,this):this._y};var ms=function(t){var e,n,r=1,i=1;function a(){for(var t,a,s,u,c,l,f,h=e.length,d=0;d<i;++d)for(a=ps(e,xs,vs).visitAfter(o),t=0;t<h;++t)s=e[t],l=n[s.index],f=l*l,u=s.x+s.vx,c=s.y+s.vy,a.visit(p);function p(t,e,n,i,a){var o=t.data,h=t.r,d=l+h;if(!o)return e>u+d||i<u-d||n>c+d||a<c-d;if(o.index>s.index){var p=u-o.x-o.vx,g=c-o.y-o.vy,_=p*p+g*g;_<d*d&&(0===p&&(_+=(p=cs())*p),0===g&&(_+=(g=cs())*g),_=(d-(_=Math.sqrt(_)))/_*r,s.vx+=(p*=_)*(d=(h*=h)/(f+h)),s.vy+=(g*=_)*d,o.vx-=p*(d=1-d),o.vy-=g*d)}}}function o(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function s(){if(e){var r,i,a=e.length;for(n=new Array(a),r=0;r<a;++r)i=e[r],n[i.index]=+t(i,r,e)}}return"function"!=typeof t&&(t=us(null==t?1:+t)),a.initialize=function(t){e=t,s()},a.iterations=function(t){return arguments.length?(i=+t,a):i},a.strength=function(t){return arguments.length?(r=+t,a):r},a.radius=function(e){return arguments.length?(t="function"==typeof e?e:us(+e),s(),a):t},a};function bs(t){return t.index}function ws(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var Ss=function(t){var e,n,r,i,a,o=bs,s=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},u=us(30),c=1;function l(r){for(var i=0,o=t.length;i<c;++i)for(var s,u,l,f,h,d,p,g=0;g<o;++g)u=(s=t[g]).source,f=(l=s.target).x+l.vx-u.x-u.vx||cs(),h=l.y+l.vy-u.y-u.vy||cs(),f*=d=((d=Math.sqrt(f*f+h*h))-n[g])/d*r*e[g],h*=d,l.vx-=f*(p=a[g]),l.vy-=h*p,u.vx+=f*(p=1-p),u.vy+=h*p}function f(){if(r){var s,u,c=r.length,l=t.length,f=$a(r,o);for(s=0,i=new Array(c);s<l;++s)(u=t[s]).index=s,"object"!=typeof u.source&&(u.source=ws(f,u.source)),"object"!=typeof u.target&&(u.target=ws(f,u.target)),i[u.source.index]=(i[u.source.index]||0)+1,i[u.target.index]=(i[u.target.index]||0)+1;for(s=0,a=new Array(l);s<l;++s)u=t[s],a[s]=i[u.source.index]/(i[u.source.index]+i[u.target.index]);e=new Array(l),h(),n=new Array(l),d()}}function h(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+s(t[n],n,t)}function d(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+u(t[e],e,t)}return null==t&&(t=[]),l.initialize=function(t){r=t,f()},l.links=function(e){return arguments.length?(t=e,f(),l):t},l.id=function(t){return arguments.length?(o=t,l):o},l.iterations=function(t){return arguments.length?(c=+t,l):c},l.strength=function(t){return arguments.length?(s="function"==typeof t?t:us(+t),h(),l):s},l.distance=function(t){return arguments.length?(u="function"==typeof t?t:us(+t),d(),l):u},l};function As(t){return t.x}function Ts(t){return t.y}var Ps=10,Cs=Math.PI*(3-Math.sqrt(5)),Ms=function(t){var e,n=1,r=.001,i=1-Math.pow(r,1/300),a=0,o=.6,s=$a(),u=Ir(l),c=ht("tick","end");function l(){f(),c.call("tick",e),n<r&&(u.stop(),c.call("end",e))}function f(){var e,r,u=t.length;for(n+=(a-n)*i,s.each(function(t){t(n)}),e=0;e<u;++e)null==(r=t[e]).fx?r.x+=r.vx*=o:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=o:(r.y=r.fy,r.vy=0)}function h(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,isNaN(e.x)||isNaN(e.y)){var i=Ps*Math.sqrt(n),a=n*Cs;e.x=i*Math.cos(a),e.y=i*Math.sin(a)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function d(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),h(),e={tick:f,restart:function(){return u.restart(l),e},stop:function(){return u.stop(),e},nodes:function(n){return arguments.length?(t=n,h(),s.each(d),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(i=+t,e):+i},alphaTarget:function(t){return arguments.length?(a=+t,e):a},velocityDecay:function(t){return arguments.length?(o=1-t,e):1-o},force:function(t,n){return arguments.length>1?(null==n?s.remove(t):s.set(t,d(n)),e):s.get(t)},find:function(e,n,r){var i,a,o,s,u,c=0,l=t.length;for(null==r?r=1/0:r*=r,c=0;c<l;++c)(o=(i=e-(s=t[c]).x)*i+(a=n-s.y)*a)<r&&(u=s,r=o);return u},on:function(t,n){return arguments.length>1?(c.on(t,n),e):c.on(t)}}},Ls=function(){var t,e,n,r,i=us(-30),a=1,o=1/0,s=.81;function u(r){var i,a=t.length,o=ps(t,As,Ts).visitAfter(l);for(n=r,i=0;i<a;++i)e=t[i],o.visit(f)}function c(){if(t){var e,n,a=t.length;for(r=new Array(a),e=0;e<a;++e)n=t[e],r[n.index]=+i(n,e,t)}}function l(t){var e,n,i,a,o,s=0,u=0;if(t.length){for(i=a=o=0;o<4;++o)(e=t[o])&&(n=Math.abs(e.value))&&(s+=e.value,u+=n,i+=n*e.x,a+=n*e.y);t.x=i/u,t.y=a/u}else{(e=t).x=e.data.x,e.y=e.data.y;do{s+=r[e.data.index]}while(e=e.next)}t.value=s}function f(t,i,u,c){if(!t.value)return!0;var l=t.x-e.x,f=t.y-e.y,h=c-i,d=l*l+f*f;if(h*h/s<d)return d<o&&(0===l&&(d+=(l=cs())*l),0===f&&(d+=(f=cs())*f),d<a&&(d=Math.sqrt(a*d)),e.vx+=l*t.value*n/d,e.vy+=f*t.value*n/d),!0;if(!(t.length||d>=o)){(t.data!==e||t.next)&&(0===l&&(d+=(l=cs())*l),0===f&&(d+=(f=cs())*f),d<a&&(d=Math.sqrt(a*d)));do{t.data!==e&&(h=r[t.data.index]*n/d,e.vx+=l*h,e.vy+=f*h)}while(t=t.next)}}return u.initialize=function(e){t=e,c()},u.strength=function(t){return arguments.length?(i="function"==typeof t?t:us(+t),c(),u):i},u.distanceMin=function(t){return arguments.length?(a=t*t,u):Math.sqrt(a)},u.distanceMax=function(t){return arguments.length?(o=t*t,u):Math.sqrt(o)},u.theta=function(t){return arguments.length?(s=t*t,u):Math.sqrt(s)},u},Es=function(t,e,n){var r,i,a,o=us(.1);function s(t){for(var o=0,s=r.length;o<s;++o){var u=r[o],c=u.x-e||1e-6,l=u.y-n||1e-6,f=Math.sqrt(c*c+l*l),h=(a[o]-f)*i[o]*t/f;u.vx+=c*h,u.vy+=l*h}}function u(){if(r){var e,n=r.length;for(i=new Array(n),a=new Array(n),e=0;e<n;++e)a[e]=+t(r[e],e,r),i[e]=isNaN(a[e])?0:+o(r[e],e,r)}}return"function"!=typeof t&&(t=us(+t)),null==e&&(e=0),null==n&&(n=0),s.initialize=function(t){r=t,u()},s.strength=function(t){return arguments.length?(o="function"==typeof t?t:us(+t),u(),s):o},s.radius=function(e){return arguments.length?(t="function"==typeof e?e:us(+e),u(),s):t},s.x=function(t){return arguments.length?(e=+t,s):e},s.y=function(t){return arguments.length?(n=+t,s):n},s},Vs=function(t){var e,n,r,i=us(.1);function a(t){for(var i,a=0,o=e.length;a<o;++a)(i=e[a]).vx+=(r[a]-i.x)*n[a]*t}function o(){if(e){var a,o=e.length;for(n=new Array(o),r=new Array(o),a=0;a<o;++a)n[a]=isNaN(r[a]=+t(e[a],a,e))?0:+i(e[a],a,e)}}return"function"!=typeof t&&(t=us(null==t?0:+t)),a.initialize=function(t){e=t,o()},a.strength=function(t){return arguments.length?(i="function"==typeof t?t:us(+t),o(),a):i},a.x=function(e){return arguments.length?(t="function"==typeof e?e:us(+e),o(),a):t},a},Gs=function(t){var e,n,r,i=us(.1);function a(t){for(var i,a=0,o=e.length;a<o;++a)(i=e[a]).vy+=(r[a]-i.y)*n[a]*t}function o(){if(e){var a,o=e.length;for(n=new Array(o),r=new Array(o),a=0;a<o;++a)n[a]=isNaN(r[a]=+t(e[a],a,e))?0:+i(e[a],a,e)}}return"function"!=typeof t&&(t=us(null==t?0:+t)),a.initialize=function(t){e=t,o()},a.strength=function(t){return arguments.length?(i="function"==typeof t?t:us(+t),o(),a):i},a.y=function(e){return arguments.length?(t="function"==typeof e?e:us(+e),o(),a):t},a},ks=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Rs=function(t){return(t=ks(Math.abs(t)))?t[1]:NaN},Os=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Is(t){return new Ns(t)}function Ns(t){if(!(e=Os.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Is.prototype=Ns.prototype,Ns.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ds,Fs,zs,Xs,Bs=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(e+1):t},Ys=function(t,e){var n=ks(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Hs={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Ys(100*t,e)},r:Ys,s:function(t,e){var n=ks(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(Ds=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+ks(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Us=function(t){return t},js=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Ws=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var i=t.length,a=[],o=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),a.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[o=(o+1)%e.length];return a.reverse().join(n)}):Us,i=t.currency,a=t.decimal,o=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):Us,s=t.percent||"%";function u(t){var e=(t=Is(t)).fill,n=t.align,u=t.sign,c=t.symbol,l=t.zero,f=t.width,h=t.comma,d=t.precision,p=t.trim,g=t.type;"n"===g?(h=!0,g="g"):Hs[g]||(null==d&&(d=12),p=!0,g="g"),(l||"0"===e&&"="===n)&&(l=!0,e="0",n="=");var _="$"===c?i[0]:"#"===c&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",y="$"===c?i[1]:/[%p]/.test(g)?s:"",x=Hs[g],v=/[defgprs%]/.test(g);function m(t){var i,s,c,m=_,b=y;if("c"===g)b=x(t)+b,t="";else{var w=(t=+t)<0;if(t=x(Math.abs(t),d),p&&(t=Bs(t)),w&&0==+t&&(w=!1),m=(w?"("===u?u:"-":"-"===u||"("===u?"":u)+m,b=("s"===g?js[8+Ds/3]:"")+b+(w&&"("===u?")":""),v)for(i=-1,s=t.length;++i<s;)if(48>(c=t.charCodeAt(i))||c>57){b=(46===c?a+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var S=m.length+t.length+b.length,A=S<f?new Array(f-S+1).join(e):"";switch(h&&l&&(t=r(A+t,A.length?f-b.length:1/0),A=""),n){case"<":t=m+t+b+A;break;case"=":t=m+A+t+b;break;case"^":t=A.slice(0,S=A.length>>1)+m+t+b+A.slice(S);break;default:t=A+m+t+b}return o(t)}return d=null==d?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),m.toString=function(){return t+""},m}return{format:u,formatPrefix:function(t,e){var n=u(((t=Is(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Rs(e)/3))),i=Math.pow(10,-r),a=js[8+r/3];return function(t){return n(i*t)+a}}}};function qs(t){return Fs=Ws(t),zs=Fs.format,Xs=Fs.formatPrefix,Fs}qs({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Qs=function(t){return Math.max(0,-Rs(Math.abs(t)))},Zs=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Rs(e)/3)))-Rs(Math.abs(t)))},$s=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Rs(e)-Rs(t))+1},Ks=function(){return new Js};function Js(){this.reset()}Js.prototype={constructor:Js,reset:function(){this.s=this.t=0},add:function(t){eu(tu,t,this.t),eu(this,tu.s,this.s),this.s?this.t+=tu.t:this.s=tu.t},valueOf:function(){return this.s}};var tu=new Js;function eu(t,e,n){var r=t.s=e+n,i=r-e,a=r-i;t.t=e-a+(n-i)}var nu=1e-6,ru=Math.PI,iu=ru/2,au=ru/4,ou=2*ru,su=180/ru,uu=ru/180,cu=Math.abs,lu=Math.atan,fu=Math.atan2,hu=Math.cos,du=Math.ceil,pu=Math.exp,gu=(Math.floor,Math.log),_u=Math.pow,yu=Math.sin,xu=Math.sign||function(t){return t>0?1:t<0?-1:0},vu=Math.sqrt,mu=Math.tan;function bu(t){return t>1?0:t<-1?ru:Math.acos(t)}function wu(t){return t>1?iu:t<-1?-iu:Math.asin(t)}function Su(t){return(t=yu(t/2))*t}function Au(){}function Tu(t,e){t&&Cu.hasOwnProperty(t.type)&&Cu[t.type](t,e)}var Pu={Feature:function(t,e){Tu(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)Tu(n[r].geometry,e)}},Cu={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){Mu(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Mu(n[r],e,0)},Polygon:function(t,e){Lu(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)Lu(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)Tu(n[r],e)}};function Mu(t,e,n){var r,i=-1,a=t.length-n;for(e.lineStart();++i<a;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function Lu(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)Mu(t[n],e,1);e.polygonEnd()}var Eu,Vu,Gu,ku,Ru,Ou=function(t,e){t&&Pu.hasOwnProperty(t.type)?Pu[t.type](t,e):Tu(t,e)},Iu=Ks(),Nu=Ks(),Du={point:Au,lineStart:Au,lineEnd:Au,polygonStart:function(){Iu.reset(),Du.lineStart=Fu,Du.lineEnd=zu},polygonEnd:function(){var t=+Iu;Nu.add(t<0?ou+t:t),this.lineStart=this.lineEnd=this.point=Au},sphere:function(){Nu.add(ou)}};function Fu(){Du.point=Xu}function zu(){Bu(Eu,Vu)}function Xu(t,e){Du.point=Bu,Eu=t,Vu=e,Gu=t*=uu,ku=hu(e=(e*=uu)/2+au),Ru=yu(e)}function Bu(t,e){var n=(t*=uu)-Gu,r=n>=0?1:-1,i=r*n,a=hu(e=(e*=uu)/2+au),o=yu(e),s=Ru*o,u=ku*a+s*hu(i),c=s*r*yu(i);Iu.add(fu(c,u)),Gu=t,ku=a,Ru=o}var Yu=function(t){return Nu.reset(),Ou(t,Du),2*Nu};function Hu(t){return[fu(t[1],t[0]),wu(t[2])]}function Uu(t){var e=t[0],n=t[1],r=hu(n);return[r*hu(e),r*yu(e),yu(n)]}function ju(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Wu(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function qu(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Qu(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function Zu(t){var e=vu(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var $u,Ku,Ju,tc,ec,nc,rc,ic,ac,oc,sc=Ks(),uc={point:cc,lineStart:fc,lineEnd:hc,polygonStart:function(){uc.point=dc,uc.lineStart=pc,uc.lineEnd=gc,sc.reset(),Du.polygonStart()},polygonEnd:function(){Du.polygonEnd(),uc.point=cc,uc.lineStart=fc,uc.lineEnd=hc,Iu<0?($u=-(Ju=180),Ku=-(tc=90)):sc>nu?tc=90:sc<-nu&&(Ku=-90),oc[0]=$u,oc[1]=Ju}};function cc(t,e){ac.push(oc=[$u=t,Ju=t]),e<Ku&&(Ku=e),e>tc&&(tc=e)}function lc(t,e){var n=Uu([t*uu,e*uu]);if(ic){var r=Wu(ic,n),i=Wu([r[1],-r[0],0],r);Zu(i),i=Hu(i);var a,o=t-ec,s=o>0?1:-1,u=i[0]*su*s,c=cu(o)>180;c^(s*ec<u&&u<s*t)?(a=i[1]*su)>tc&&(tc=a):c^(s*ec<(u=(u+360)%360-180)&&u<s*t)?(a=-i[1]*su)<Ku&&(Ku=a):(e<Ku&&(Ku=e),e>tc&&(tc=e)),c?t<ec?_c($u,t)>_c($u,Ju)&&(Ju=t):_c(t,Ju)>_c($u,Ju)&&($u=t):Ju>=$u?(t<$u&&($u=t),t>Ju&&(Ju=t)):t>ec?_c($u,t)>_c($u,Ju)&&(Ju=t):_c(t,Ju)>_c($u,Ju)&&($u=t)}else ac.push(oc=[$u=t,Ju=t]);e<Ku&&(Ku=e),e>tc&&(tc=e),ic=n,ec=t}function fc(){uc.point=lc}function hc(){oc[0]=$u,oc[1]=Ju,uc.point=cc,ic=null}function dc(t,e){if(ic){var n=t-ec;sc.add(cu(n)>180?n+(n>0?360:-360):n)}else nc=t,rc=e;Du.point(t,e),lc(t,e)}function pc(){Du.lineStart()}function gc(){dc(nc,rc),Du.lineEnd(),cu(sc)>nu&&($u=-(Ju=180)),oc[0]=$u,oc[1]=Ju,ic=null}function _c(t,e){return(e-=t)<0?e+360:e}function yc(t,e){return t[0]-e[0]}function xc(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}var vc,mc,bc,wc,Sc,Ac,Tc,Pc,Cc,Mc,Lc,Ec,Vc,Gc,kc,Rc,Oc=function(t){var e,n,r,i,a,o,s;if(tc=Ju=-($u=Ku=1/0),ac=[],Ou(t,uc),n=ac.length){for(ac.sort(yc),e=1,a=[r=ac[0]];e<n;++e)xc(r,(i=ac[e])[0])||xc(r,i[1])?(_c(r[0],i[1])>_c(r[0],r[1])&&(r[1]=i[1]),_c(i[0],r[1])>_c(r[0],r[1])&&(r[0]=i[0])):a.push(r=i);for(o=-1/0,e=0,r=a[n=a.length-1];e<=n;r=i,++e)i=a[e],(s=_c(r[1],i[0]))>o&&(o=s,$u=i[0],Ju=r[1])}return ac=oc=null,$u===1/0||Ku===1/0?[[NaN,NaN],[NaN,NaN]]:[[$u,Ku],[Ju,tc]]},Ic={sphere:Au,point:Nc,lineStart:Fc,lineEnd:Bc,polygonStart:function(){Ic.lineStart=Yc,Ic.lineEnd=Hc},polygonEnd:function(){Ic.lineStart=Fc,Ic.lineEnd=Bc}};function Nc(t,e){t*=uu;var n=hu(e*=uu);Dc(n*hu(t),n*yu(t),yu(e))}function Dc(t,e,n){bc+=(t-bc)/++vc,wc+=(e-wc)/vc,Sc+=(n-Sc)/vc}function Fc(){Ic.point=zc}function zc(t,e){t*=uu;var n=hu(e*=uu);Gc=n*hu(t),kc=n*yu(t),Rc=yu(e),Ic.point=Xc,Dc(Gc,kc,Rc)}function Xc(t,e){t*=uu;var n=hu(e*=uu),r=n*hu(t),i=n*yu(t),a=yu(e),o=fu(vu((o=kc*a-Rc*i)*o+(o=Rc*r-Gc*a)*o+(o=Gc*i-kc*r)*o),Gc*r+kc*i+Rc*a);mc+=o,Ac+=o*(Gc+(Gc=r)),Tc+=o*(kc+(kc=i)),Pc+=o*(Rc+(Rc=a)),Dc(Gc,kc,Rc)}function Bc(){Ic.point=Nc}function Yc(){Ic.point=Uc}function Hc(){jc(Ec,Vc),Ic.point=Nc}function Uc(t,e){Ec=t,Vc=e,t*=uu,e*=uu,Ic.point=jc;var n=hu(e);Gc=n*hu(t),kc=n*yu(t),Rc=yu(e),Dc(Gc,kc,Rc)}function jc(t,e){t*=uu;var n=hu(e*=uu),r=n*hu(t),i=n*yu(t),a=yu(e),o=kc*a-Rc*i,s=Rc*r-Gc*a,u=Gc*i-kc*r,c=vu(o*o+s*s+u*u),l=wu(c),f=c&&-l/c;Cc+=f*o,Mc+=f*s,Lc+=f*u,mc+=l,Ac+=l*(Gc+(Gc=r)),Tc+=l*(kc+(kc=i)),Pc+=l*(Rc+(Rc=a)),Dc(Gc,kc,Rc)}var Wc=function(t){vc=mc=bc=wc=Sc=Ac=Tc=Pc=Cc=Mc=Lc=0,Ou(t,Ic);var e=Cc,n=Mc,r=Lc,i=e*e+n*n+r*r;return i<1e-12&&(e=Ac,n=Tc,r=Pc,mc<nu&&(e=bc,n=wc,r=Sc),(i=e*e+n*n+r*r)<1e-12)?[NaN,NaN]:[fu(n,e)*su,wu(r/vu(i))*su]},qc=function(t){return function(){return t}},Qc=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};function Zc(t,e){return[cu(t)>ru?t+Math.round(-t/ou)*ou:t,e]}function $c(t,e,n){return(t%=ou)?e||n?Qc(Jc(t),tl(e,n)):Jc(t):e||n?tl(e,n):Zc}function Kc(t){return function(e,n){return[(e+=t)>ru?e-ou:e<-ru?e+ou:e,n]}}function Jc(t){var e=Kc(t);return e.invert=Kc(-t),e}function tl(t,e){var n=hu(t),r=yu(t),i=hu(e),a=yu(e);function o(t,e){var o=hu(e),s=hu(t)*o,u=yu(t)*o,c=yu(e),l=c*n+s*r;return[fu(u*i-l*a,s*n-c*r),wu(l*i+u*a)]}return o.invert=function(t,e){var o=hu(e),s=hu(t)*o,u=yu(t)*o,c=yu(e),l=c*i-u*a;return[fu(u*i+c*a,s*n+l*r),wu(l*n-s*r)]},o}Zc.invert=Zc;var el=function(t){function e(e){return(e=t(e[0]*uu,e[1]*uu))[0]*=su,e[1]*=su,e}return t=$c(t[0]*uu,t[1]*uu,t.length>2?t[2]*uu:0),e.invert=function(e){return(e=t.invert(e[0]*uu,e[1]*uu))[0]*=su,e[1]*=su,e},e};function nl(t,e,n,r,i,a){if(n){var o=hu(e),s=yu(e),u=r*n;null==i?(i=e+r*ou,a=e-u/2):(i=rl(o,i),a=rl(o,a),(r>0?i<a:i>a)&&(i+=r*ou));for(var c,l=i;r>0?l>a:l<a;l-=u)c=Hu([o,-s*hu(l),-s*yu(l)]),t.point(c[0],c[1])}}function rl(t,e){(e=Uu(e))[0]-=t,Zu(e);var n=bu(-e[1]);return((-e[2]<0?-n:n)+ou-nu)%ou}var il=function(){var t,e,n=qc([0,0]),r=qc(90),i=qc(6),a={point:function(n,r){t.push(n=e(n,r)),n[0]*=su,n[1]*=su}};function o(){var o=n.apply(this,arguments),s=r.apply(this,arguments)*uu,u=i.apply(this,arguments)*uu;return t=[],e=$c(-o[0]*uu,-o[1]*uu,0).invert,nl(a,s,u,1),o={type:"Polygon",coordinates:[t]},t=e=null,o}return o.center=function(t){return arguments.length?(n="function"==typeof t?t:qc([+t[0],+t[1]]),o):n},o.radius=function(t){return arguments.length?(r="function"==typeof t?t:qc(+t),o):r},o.precision=function(t){return arguments.length?(i="function"==typeof t?t:qc(+t),o):i},o},al=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Au,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},ol=function(t,e){return cu(t[0]-e[0])<nu&&cu(t[1]-e[1])<nu};function sl(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var ul=function(t,e,n,r,i){var a,o,s=[],u=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],o=t[e];if(ol(r,o)){for(i.lineStart(),a=0;a<e;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else s.push(n=new sl(r,t,null,!0)),u.push(n.o=new sl(r,null,n,!1)),s.push(n=new sl(o,t,null,!1)),u.push(n.o=new sl(o,null,n,!0))}}),s.length){for(u.sort(e),cl(s),cl(u),a=0,o=u.length;a<o;++a)u[a].e=n=!n;for(var c,l,f=s[0];;){for(var h=f,d=!0;h.v;)if((h=h.n)===f)return;c=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(a=0,o=c.length;a<o;++a)i.point((l=c[a])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(c=h.p.z,a=c.length-1;a>=0;--a)i.point((l=c[a])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}c=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function cl(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}var ll=Ks(),fl=function(t,e){var n=e[0],r=e[1],i=yu(r),a=[yu(n),-hu(n),0],o=0,s=0;ll.reset(),1===i?r=iu+nu:-1===i&&(r=-iu-nu);for(var u=0,c=t.length;u<c;++u)if(f=(l=t[u]).length)for(var l,f,h=l[f-1],d=h[0],p=h[1]/2+au,g=yu(p),_=hu(p),y=0;y<f;++y,d=v,g=b,_=w,h=x){var x=l[y],v=x[0],m=x[1]/2+au,b=yu(m),w=hu(m),S=v-d,A=S>=0?1:-1,T=A*S,P=T>ru,C=g*b;if(ll.add(fu(C*A*yu(T),_*w+C*hu(T))),o+=P?S+A*ou:S,P^d>=n^v>=n){var M=Wu(Uu(h),Uu(x));Zu(M);var L=Wu(a,M);Zu(L);var E=(P^S>=0?-1:1)*wu(L[2]);(r>E||r===E&&(M[0]||M[1]))&&(s+=P^S>=0?1:-1)}}return(o<-nu||o<nu&&ll<-nu)^1&s},hl=function(t,e,n,r){return function(i){var a,o,s,u=e(i),c=al(),l=e(c),f=!1,h={point:d,lineStart:g,lineEnd:_,polygonStart:function(){h.point=y,h.lineStart=x,h.lineEnd=v,o=[],a=[]},polygonEnd:function(){h.point=d,h.lineStart=g,h.lineEnd=_,o=N(o);var t=fl(a,r);o.length?(f||(i.polygonStart(),f=!0),ul(o,pl,t,n,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),n(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),o=a=null},sphere:function(){i.polygonStart(),i.lineStart(),n(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(e,n){t(e,n)&&i.point(e,n)}function p(t,e){u.point(t,e)}function g(){h.point=p,u.lineStart()}function _(){h.point=d,u.lineEnd()}function y(t,e){s.push([t,e]),l.point(t,e)}function x(){l.lineStart(),s=[]}function v(){y(s[0][0],s[0][1]),l.lineEnd();var t,e,n,r,u=l.clean(),h=c.result(),d=h.length;if(s.pop(),a.push(s),s=null,d)if(1&u){if((e=(n=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<e;++t)i.point((r=n[t])[0],r[1]);i.lineEnd()}}else d>1&&2&u&&h.push(h.pop().concat(h.shift())),o.push(h.filter(dl))}return h}};function dl(t){return t.length>1}function pl(t,e){return((t=t.x)[0]<0?t[1]-iu-nu:iu-t[1])-((e=e.x)[0]<0?e[1]-iu-nu:iu-e[1])}var gl=hl(function(){return!0},function(t){var e,n=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,o){var s=a>0?ru:-ru,u=cu(a-n);cu(u-ru)<nu?(t.point(n,r=(r+o)/2>0?iu:-iu),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(s,r),t.point(a,r),e=0):i!==s&&u>=ru&&(cu(n-i)<nu&&(n-=i*nu),cu(a-s)<nu&&(a-=s*nu),r=function(t,e,n,r){var i,a,o=yu(t-n);return cu(o)>nu?lu((yu(e)*(a=hu(r))*yu(n)-yu(r)*(i=hu(e))*yu(t))/(i*a*o)):(e+r)/2}(n,r,a,o),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(s,r),e=0),t.point(n=a,r=o),i=s},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}},function(t,e,n,r){var i;if(null==t)i=n*iu,r.point(-ru,i),r.point(0,i),r.point(ru,i),r.point(ru,0),r.point(ru,-i),r.point(0,-i),r.point(-ru,-i),r.point(-ru,0),r.point(-ru,i);else if(cu(t[0]-e[0])>nu){var a=t[0]<e[0]?ru:-ru;i=n*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(e[0],e[1])},[-ru,-iu]);var _l=function(t){var e=hu(t),n=6*uu,r=e>0,i=cu(e)>nu;function a(t,n){return hu(t)*hu(n)>e}function o(t,n,r){var i=[1,0,0],a=Wu(Uu(t),Uu(n)),o=ju(a,a),s=a[0],u=o-s*s;if(!u)return!r&&t;var c=e*o/u,l=-e*s/u,f=Wu(i,a),h=Qu(i,c);qu(h,Qu(a,l));var d=f,p=ju(h,d),g=ju(d,d),_=p*p-g*(ju(h,h)-1);if(!(_<0)){var y=vu(_),x=Qu(d,(-p-y)/g);if(qu(x,h),x=Hu(x),!r)return x;var v,m=t[0],b=n[0],w=t[1],S=n[1];b<m&&(v=m,m=b,b=v);var A=b-m,T=cu(A-ru)<nu;if(!T&&S<w&&(v=w,w=S,S=v),T||A<nu?T?w+S>0^x[1]<(cu(x[0]-m)<nu?w:S):w<=x[1]&&x[1]<=S:A>ru^(m<=x[0]&&x[0]<=b)){var P=Qu(d,(-p+y)/g);return qu(P,h),[x,Hu(P)]}}}function s(e,n){var i=r?t:ru-t,a=0;return e<-i?a|=1:e>i&&(a|=2),n<-i?a|=4:n>i&&(a|=8),a}return hl(a,function(t){var e,n,u,c,l;return{lineStart:function(){c=u=!1,l=1},point:function(f,h){var d,p=[f,h],g=a(f,h),_=r?g?0:s(f,h):g?s(f+(f<0?ru:-ru),h):0;if(!e&&(c=u=g)&&t.lineStart(),g!==u&&(!(d=o(e,p))||ol(e,d)||ol(p,d))&&(p[0]+=nu,p[1]+=nu,g=a(p[0],p[1])),g!==u)l=0,g?(t.lineStart(),d=o(p,e),t.point(d[0],d[1])):(d=o(e,p),t.point(d[0],d[1]),t.lineEnd()),e=d;else if(i&&e&&r^g){var y;_&n||!(y=o(p,e,!0))||(l=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!g||e&&ol(e,p)||t.point(p[0],p[1]),e=p,u=g,n=_},lineEnd:function(){u&&t.lineEnd(),e=null},clean:function(){return l|(c&&u)<<1}}},function(e,r,i,a){nl(a,t,n,i,e,r)},r?[0,-t]:[-ru,t-ru])},yl=function(t,e,n,r,i,a){var o,s=t[0],u=t[1],c=0,l=1,f=e[0]-s,h=e[1]-u;if(o=n-s,f||!(o>0)){if(o/=f,f<0){if(o<c)return;o<l&&(l=o)}else if(f>0){if(o>l)return;o>c&&(c=o)}if(o=i-s,f||!(o<0)){if(o/=f,f<0){if(o>l)return;o>c&&(c=o)}else if(f>0){if(o<c)return;o<l&&(l=o)}if(o=r-u,h||!(o>0)){if(o/=h,h<0){if(o<c)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>c&&(c=o)}if(o=a-u,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>c&&(c=o)}else if(h>0){if(o<c)return;o<l&&(l=o)}return c>0&&(t[0]=s+c*f,t[1]=u+c*h),l<1&&(e[0]=s+l*f,e[1]=u+l*h),!0}}}}},xl=1e9,vl=-xl;function ml(t,e,n,r){function i(i,a){return t<=i&&i<=n&&e<=a&&a<=r}function a(i,a,s,c){var l=0,f=0;if(null==i||(l=o(i,s))!==(f=o(a,s))||u(i,a)<0^s>0)do{c.point(0===l||3===l?t:n,l>1?r:e)}while((l=(l+s+4)%4)!==f);else c.point(a[0],a[1])}function o(r,i){return cu(r[0]-t)<nu?i>0?0:3:cu(r[0]-n)<nu?i>0?2:1:cu(r[1]-e)<nu?i>0?1:0:i>0?3:2}function s(t,e){return u(t.x,e.x)}function u(t,e){var n=o(t,1),r=o(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(o){var u,c,l,f,h,d,p,g,_,y,x,v=o,m=al(),b={point:w,lineStart:function(){b.point=S,c&&c.push(l=[]);y=!0,_=!1,p=g=NaN},lineEnd:function(){u&&(S(f,h),d&&_&&m.rejoin(),u.push(m.result()));b.point=w,_&&v.lineEnd()},polygonStart:function(){v=m,u=[],c=[],x=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,i=c.length;n<i;++n)for(var a,o,s=c[n],u=1,l=s.length,f=s[0],h=f[0],d=f[1];u<l;++u)a=h,o=d,f=s[u],h=f[0],d=f[1],o<=r?d>r&&(h-a)*(r-o)>(d-o)*(t-a)&&++e:d<=r&&(h-a)*(r-o)<(d-o)*(t-a)&&--e;return e}(),n=x&&e,i=(u=N(u)).length;(n||i)&&(o.polygonStart(),n&&(o.lineStart(),a(null,null,1,o),o.lineEnd()),i&&ul(u,s,e,a,o),o.polygonEnd());v=o,u=c=l=null}};function w(t,e){i(t,e)&&v.point(t,e)}function S(a,o){var s=i(a,o);if(c&&l.push([a,o]),y)f=a,h=o,d=s,y=!1,s&&(v.lineStart(),v.point(a,o));else if(s&&_)v.point(a,o);else{var u=[p=Math.max(vl,Math.min(xl,p)),g=Math.max(vl,Math.min(xl,g))],m=[a=Math.max(vl,Math.min(xl,a)),o=Math.max(vl,Math.min(xl,o))];yl(u,m,t,e,n,r)?(_||(v.lineStart(),v.point(u[0],u[1])),v.point(m[0],m[1]),s||v.lineEnd(),x=!1):s&&(v.lineStart(),v.point(a,o),x=!1)}p=a,g=o,_=s}return b}}var bl,wl,Sl,Al=function(){var t,e,n,r=0,i=0,a=960,o=500;return n={stream:function(n){return t&&e===n?t:t=ml(r,i,a,o)(e=n)},extent:function(s){return arguments.length?(r=+s[0][0],i=+s[0][1],a=+s[1][0],o=+s[1][1],t=e=null,n):[[r,i],[a,o]]}}},Tl=Ks(),Pl={sphere:Au,point:Au,lineStart:function(){Pl.point=Ml,Pl.lineEnd=Cl},lineEnd:Au,polygonStart:Au,polygonEnd:Au};function Cl(){Pl.point=Pl.lineEnd=Au}function Ml(t,e){bl=t*=uu,wl=yu(e*=uu),Sl=hu(e),Pl.point=Ll}function Ll(t,e){t*=uu;var n=yu(e*=uu),r=hu(e),i=cu(t-bl),a=hu(i),o=r*yu(i),s=Sl*n-wl*r*a,u=wl*n+Sl*r*a;Tl.add(fu(vu(o*o+s*s),u)),bl=t,wl=n,Sl=r}var El=function(t){return Tl.reset(),Ou(t,Pl),+Tl},Vl=[null,null],Gl={type:"LineString",coordinates:Vl},kl=function(t,e){return Vl[0]=t,Vl[1]=e,El(Gl)},Rl={Feature:function(t,e){return Il(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)if(Il(n[r].geometry,e))return!0;return!1}},Ol={Sphere:function(){return!0},Point:function(t,e){return Nl(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(Nl(n[r],e))return!0;return!1},LineString:function(t,e){return Dl(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(Dl(n[r],e))return!0;return!1},Polygon:function(t,e){return Fl(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)if(Fl(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)if(Il(n[r],e))return!0;return!1}};function Il(t,e){return!(!t||!Ol.hasOwnProperty(t.type))&&Ol[t.type](t,e)}function Nl(t,e){return 0===kl(t,e)}function Dl(t,e){var n=kl(t[0],t[1]);return kl(t[0],e)+kl(e,t[1])<=n+nu}function Fl(t,e){return!!fl(t.map(zl),Xl(e))}function zl(t){return(t=t.map(Xl)).pop(),t}function Xl(t){return[t[0]*uu,t[1]*uu]}var Bl=function(t,e){return(t&&Rl.hasOwnProperty(t.type)?Rl[t.type]:Il)(t,e)};function Yl(t,e,n){var r=w(t,e-nu,n).concat(e);return function(t){return r.map(function(e){return[t,e]})}}function Hl(t,e,n){var r=w(t,e-nu,n).concat(e);return function(t){return r.map(function(e){return[e,t]})}}function Ul(){var t,e,n,r,i,a,o,s,u,c,l,f,h=10,d=h,p=90,g=360,_=2.5;function y(){return{type:"MultiLineString",coordinates:x()}}function x(){return w(du(r/p)*p,n,p).map(l).concat(w(du(s/g)*g,o,g).map(f)).concat(w(du(e/h)*h,t,h).filter(function(t){return cu(t%p)>nu}).map(u)).concat(w(du(a/d)*d,i,d).filter(function(t){return cu(t%g)>nu}).map(c))}return y.lines=function(){return x().map(function(t){return{type:"LineString",coordinates:t}})},y.outline=function(){return{type:"Polygon",coordinates:[l(r).concat(f(o).slice(1),l(n).reverse().slice(1),f(s).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],s=+t[0][1],o=+t[1][1],r>n&&(t=r,r=n,n=t),s>o&&(t=s,s=o,o=t),y.precision(_)):[[r,s],[n,o]]},y.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],a=+n[0][1],i=+n[1][1],e>t&&(n=e,e=t,t=n),a>i&&(n=a,a=i,i=n),y.precision(_)):[[e,a],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(p=+t[0],g=+t[1],y):[p,g]},y.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],y):[h,d]},y.precision=function(h){return arguments.length?(_=+h,u=Yl(a,i,90),c=Hl(e,t,_),l=Yl(s,o,90),f=Hl(r,n,_),y):_},y.extentMajor([[-180,-90+nu],[180,90-nu]]).extentMinor([[-180,-80-nu],[180,80+nu]])}function jl(){return Ul()()}var Wl,ql,Ql,Zl,$l=function(t,e){var n=t[0]*uu,r=t[1]*uu,i=e[0]*uu,a=e[1]*uu,o=hu(r),s=yu(r),u=hu(a),c=yu(a),l=o*hu(n),f=o*yu(n),h=u*hu(i),d=u*yu(i),p=2*wu(vu(Su(a-r)+o*u*Su(i-n))),g=yu(p),_=p?function(t){var e=yu(t*=p)/g,n=yu(p-t)/g,r=n*l+e*h,i=n*f+e*d,a=n*s+e*c;return[fu(i,r)*su,fu(a,vu(r*r+i*i))*su]}:function(){return[n*su,r*su]};return _.distance=p,_},Kl=function(t){return t},Jl=Ks(),tf=Ks(),ef={point:Au,lineStart:Au,lineEnd:Au,polygonStart:function(){ef.lineStart=nf,ef.lineEnd=of},polygonEnd:function(){ef.lineStart=ef.lineEnd=ef.point=Au,Jl.add(cu(tf)),tf.reset()},result:function(){var t=Jl/2;return Jl.reset(),t}};function nf(){ef.point=rf}function rf(t,e){ef.point=af,Wl=Ql=t,ql=Zl=e}function af(t,e){tf.add(Zl*t-Ql*e),Ql=t,Zl=e}function of(){af(Wl,ql)}var sf=ef,uf=1/0,cf=uf,lf=-uf,ff=lf;var hf,df,pf,gf,_f={point:function(t,e){t<uf&&(uf=t);t>lf&&(lf=t);e<cf&&(cf=e);e>ff&&(ff=e)},lineStart:Au,lineEnd:Au,polygonStart:Au,polygonEnd:Au,result:function(){var t=[[uf,cf],[lf,ff]];return lf=ff=-(cf=uf=1/0),t}},yf=0,xf=0,vf=0,mf=0,bf=0,wf=0,Sf=0,Af=0,Tf=0,Pf={point:Cf,lineStart:Mf,lineEnd:Vf,polygonStart:function(){Pf.lineStart=Gf,Pf.lineEnd=kf},polygonEnd:function(){Pf.point=Cf,Pf.lineStart=Mf,Pf.lineEnd=Vf},result:function(){var t=Tf?[Sf/Tf,Af/Tf]:wf?[mf/wf,bf/wf]:vf?[yf/vf,xf/vf]:[NaN,NaN];return yf=xf=vf=mf=bf=wf=Sf=Af=Tf=0,t}};function Cf(t,e){yf+=t,xf+=e,++vf}function Mf(){Pf.point=Lf}function Lf(t,e){Pf.point=Ef,Cf(pf=t,gf=e)}function Ef(t,e){var n=t-pf,r=e-gf,i=vu(n*n+r*r);mf+=i*(pf+t)/2,bf+=i*(gf+e)/2,wf+=i,Cf(pf=t,gf=e)}function Vf(){Pf.point=Cf}function Gf(){Pf.point=Rf}function kf(){Of(hf,df)}function Rf(t,e){Pf.point=Of,Cf(hf=pf=t,df=gf=e)}function Of(t,e){var n=t-pf,r=e-gf,i=vu(n*n+r*r);mf+=i*(pf+t)/2,bf+=i*(gf+e)/2,wf+=i,Sf+=(i=gf*t-pf*e)*(pf+t),Af+=i*(gf+e),Tf+=3*i,Cf(pf=t,gf=e)}var If=Pf;function Nf(t){this._context=t}Nf.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,ou)}},result:Au};var Df,Ff,zf,Xf,Bf,Yf=Ks(),Hf={point:Au,lineStart:function(){Hf.point=Uf},lineEnd:function(){Df&&jf(Ff,zf),Hf.point=Au},polygonStart:function(){Df=!0},polygonEnd:function(){Df=null},result:function(){var t=+Yf;return Yf.reset(),t}};function Uf(t,e){Hf.point=jf,Ff=Xf=t,zf=Bf=e}function jf(t,e){Xf-=t,Bf-=e,Yf.add(vu(Xf*Xf+Bf*Bf)),Xf=t,Bf=e}var Wf=Hf;function qf(){this._string=[]}function Qf(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}qf.prototype={_radius:4.5,_circle:Qf(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Qf(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var Zf=function(t,e){var n,r,i=4.5;function a(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),Ou(t,n(r))),r.result()}return a.area=function(t){return Ou(t,n(sf)),sf.result()},a.measure=function(t){return Ou(t,n(Wf)),Wf.result()},a.bounds=function(t){return Ou(t,n(_f)),_f.result()},a.centroid=function(t){return Ou(t,n(If)),If.result()},a.projection=function(e){return arguments.length?(n=null==e?(t=null,Kl):(t=e).stream,a):t},a.context=function(t){return arguments.length?(r=null==t?(e=null,new qf):new Nf(e=t),"function"!=typeof i&&r.pointRadius(i),a):e},a.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),a):i},a.projection(t).context(e)},$f=function(t){return{stream:Kf(t)}};function Kf(t){return function(e){var n=new Jf;for(var r in t)n[r]=t[r];return n.stream=e,n}}function Jf(){}function th(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Ou(n,t.stream(_f)),e(_f.result()),null!=r&&t.clipExtent(r),t}function eh(t,e,n){return th(t,function(n){var r=e[1][0]-e[0][0],i=e[1][1]-e[0][1],a=Math.min(r/(n[1][0]-n[0][0]),i/(n[1][1]-n[0][1])),o=+e[0][0]+(r-a*(n[1][0]+n[0][0]))/2,s=+e[0][1]+(i-a*(n[1][1]+n[0][1]))/2;t.scale(150*a).translate([o,s])},n)}function nh(t,e,n){return eh(t,[[0,0],e],n)}function rh(t,e,n){return th(t,function(n){var r=+e,i=r/(n[1][0]-n[0][0]),a=(r-i*(n[1][0]+n[0][0]))/2,o=-i*n[0][1];t.scale(150*i).translate([a,o])},n)}function ih(t,e,n){return th(t,function(n){var r=+e,i=r/(n[1][1]-n[0][1]),a=-i*n[0][0],o=(r-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([a,o])},n)}Jf.prototype={constructor:Jf,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var ah=16,oh=hu(30*uu),sh=function(t,e){return+e?function(t,e){function n(r,i,a,o,s,u,c,l,f,h,d,p,g,_){var y=c-r,x=l-i,v=y*y+x*x;if(v>4*e&&g--){var m=o+h,b=s+d,w=u+p,S=vu(m*m+b*b+w*w),A=wu(w/=S),T=cu(cu(w)-1)<nu||cu(a-f)<nu?(a+f)/2:fu(b,m),P=t(T,A),C=P[0],M=P[1],L=C-r,E=M-i,V=x*L-y*E;(V*V/v>e||cu((y*L+x*E)/v-.5)>.3||o*h+s*d+u*p<oh)&&(n(r,i,a,o,s,u,C,M,T,m/=S,b/=S,w,g,_),_.point(C,M),n(C,M,T,m,b,w,c,l,f,h,d,p,g,_))}}return function(e){var r,i,a,o,s,u,c,l,f,h,d,p,g={point:_,lineStart:y,lineEnd:v,polygonStart:function(){e.polygonStart(),g.lineStart=m},polygonEnd:function(){e.polygonEnd(),g.lineStart=y}};function _(n,r){n=t(n,r),e.point(n[0],n[1])}function y(){l=NaN,g.point=x,e.lineStart()}function x(r,i){var a=Uu([r,i]),o=t(r,i);n(l,f,c,h,d,p,l=o[0],f=o[1],c=r,h=a[0],d=a[1],p=a[2],ah,e),e.point(l,f)}function v(){g.point=_,e.lineEnd()}function m(){y(),g.point=b,g.lineEnd=w}function b(t,e){x(r=t,e),i=l,a=f,o=h,s=d,u=p,g.point=x}function w(){n(l,f,c,h,d,p,i,a,r,o,s,u,ah,e),g.lineEnd=v,v()}return g}}(t,e):function(t){return Kf({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)};var uh=Kf({point:function(t,e){this.stream.point(t*uu,e*uu)}});function ch(t,e,n,r){var i=hu(r),a=yu(r),o=i*t,s=a*t,u=i/t,c=a/t,l=(a*n-i*e)/t,f=(a*e+i*n)/t;function h(t,r){return[o*t-s*r+e,n-s*t-o*r]}return h.invert=function(t,e){return[u*t-c*e+l,f-c*t-u*e]},h}function lh(t){return fh(function(){return t})()}function fh(t){var e,n,r,i,a,o,s,u,c,l,f=150,h=480,d=250,p=0,g=0,_=0,y=0,x=0,v=0,m=null,b=gl,w=null,S=Kl,A=.5;function T(t){return u(t[0]*uu,t[1]*uu)}function P(t){return(t=u.invert(t[0],t[1]))&&[t[0]*su,t[1]*su]}function C(){var t=ch(f,0,0,v).apply(null,e(p,g)),r=(v?ch:function(t,e,n){function r(r,i){return[e+t*r,n-t*i]}return r.invert=function(r,i){return[(r-e)/t,(n-i)/t]},r})(f,h-t[0],d-t[1],v);return n=$c(_,y,x),s=Qc(e,r),u=Qc(n,s),o=sh(s,A),M()}function M(){return c=l=null,T}return T.stream=function(t){return c&&l===t?c:c=uh(function(t){return Kf({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(n)(b(o(S(l=t)))))},T.preclip=function(t){return arguments.length?(b=t,m=void 0,M()):b},T.postclip=function(t){return arguments.length?(S=t,w=r=i=a=null,M()):S},T.clipAngle=function(t){return arguments.length?(b=+t?_l(m=t*uu):(m=null,gl),M()):m*su},T.clipExtent=function(t){return arguments.length?(S=null==t?(w=r=i=a=null,Kl):ml(w=+t[0][0],r=+t[0][1],i=+t[1][0],a=+t[1][1]),M()):null==w?null:[[w,r],[i,a]]},T.scale=function(t){return arguments.length?(f=+t,C()):f},T.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],C()):[h,d]},T.center=function(t){return arguments.length?(p=t[0]%360*uu,g=t[1]%360*uu,C()):[p*su,g*su]},T.rotate=function(t){return arguments.length?(_=t[0]%360*uu,y=t[1]%360*uu,x=t.length>2?t[2]%360*uu:0,C()):[_*su,y*su,x*su]},T.angle=function(t){return arguments.length?(v=t%360*uu,C()):v*su},T.precision=function(t){return arguments.length?(o=sh(s,A=t*t),M()):vu(A)},T.fitExtent=function(t,e){return eh(T,t,e)},T.fitSize=function(t,e){return nh(T,t,e)},T.fitWidth=function(t,e){return rh(T,t,e)},T.fitHeight=function(t,e){return ih(T,t,e)},function(){return e=t.apply(this,arguments),T.invert=e.invert&&P,C()}}function hh(t){var e=0,n=ru/3,r=fh(t),i=r(e,n);return i.parallels=function(t){return arguments.length?r(e=t[0]*uu,n=t[1]*uu):[e*su,n*su]},i}function dh(t,e){var n=yu(t),r=(n+yu(e))/2;if(cu(r)<nu)return function(t){var e=hu(t);function n(t,n){return[t*e,yu(n)/e]}return n.invert=function(t,n){return[t/e,wu(n*e)]},n}(t);var i=1+n*(2*r-n),a=vu(i)/r;function o(t,e){var n=vu(i-2*r*yu(e))/r;return[n*yu(t*=r),a-n*hu(t)]}return o.invert=function(t,e){var n=a-e;return[fu(t,cu(n))/r*xu(n),wu((i-(t*t+n*n)*r*r)/(2*r))]},o}var ph=function(){return hh(dh).scale(155.424).center([0,33.6442])},gh=function(){return ph().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var _h=function(){var t,e,n,r,i,a,o=gh(),s=ph().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=ph().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(t,e){a=[t,e]}};function l(t){var e=t[0],o=t[1];return a=null,n.point(e,o),a||(r.point(e,o),a)||(i.point(e,o),a)}function f(){return t=e=null,l}return l.invert=function(t){var e=o.scale(),n=o.translate(),r=(t[0]-n[0])/e,i=(t[1]-n[1])/e;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?s:i>=.166&&i<.234&&r>=-.214&&r<-.115?u:o).invert(t)},l.stream=function(n){return t&&e===n?t:(r=[o.stream(e=n),s.stream(n),u.stream(n)],i=r.length,t={point:function(t,e){for(var n=-1;++n<i;)r[n].point(t,e)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},l.precision=function(t){return arguments.length?(o.precision(t),s.precision(t),u.precision(t),f()):o.precision()},l.scale=function(t){return arguments.length?(o.scale(t),s.scale(.35*t),u.scale(t),l.translate(o.translate())):o.scale()},l.translate=function(t){if(!arguments.length)return o.translate();var e=o.scale(),a=+t[0],l=+t[1];return n=o.translate(t).clipExtent([[a-.455*e,l-.238*e],[a+.455*e,l+.238*e]]).stream(c),r=s.translate([a-.307*e,l+.201*e]).clipExtent([[a-.425*e+nu,l+.12*e+nu],[a-.214*e-nu,l+.234*e-nu]]).stream(c),i=u.translate([a-.205*e,l+.212*e]).clipExtent([[a-.214*e+nu,l+.166*e+nu],[a-.115*e-nu,l+.234*e-nu]]).stream(c),f()},l.fitExtent=function(t,e){return eh(l,t,e)},l.fitSize=function(t,e){return nh(l,t,e)},l.fitWidth=function(t,e){return rh(l,t,e)},l.fitHeight=function(t,e){return ih(l,t,e)},l.scale(1070)};function yh(t){return function(e,n){var r=hu(e),i=hu(n),a=t(r*i);return[a*i*yu(e),a*yu(n)]}}function xh(t){return function(e,n){var r=vu(e*e+n*n),i=t(r),a=yu(i),o=hu(i);return[fu(e*a,r*o),wu(r&&n*a/r)]}}var vh=yh(function(t){return vu(2/(1+t))});vh.invert=xh(function(t){return 2*wu(t/2)});var mh=function(){return lh(vh).scale(124.75).clipAngle(179.999)},bh=yh(function(t){return(t=bu(t))&&t/yu(t)});bh.invert=xh(function(t){return t});var wh=function(){return lh(bh).scale(79.4188).clipAngle(179.999)};function Sh(t,e){return[t,gu(mu((iu+e)/2))]}Sh.invert=function(t,e){return[t,2*lu(pu(e))-iu]};var Ah=function(){return Th(Sh).scale(961/ou)};function Th(t){var e,n,r,i=lh(t),a=i.center,o=i.scale,s=i.translate,u=i.clipExtent,c=null;function l(){var a=ru*o(),s=i(el(i.rotate()).invert([0,0]));return u(null==c?[[s[0]-a,s[1]-a],[s[0]+a,s[1]+a]]:t===Sh?[[Math.max(s[0]-a,c),e],[Math.min(s[0]+a,n),r]]:[[c,Math.max(s[1]-a,e)],[n,Math.min(s[1]+a,r)]])}return i.scale=function(t){return arguments.length?(o(t),l()):o()},i.translate=function(t){return arguments.length?(s(t),l()):s()},i.center=function(t){return arguments.length?(a(t),l()):a()},i.clipExtent=function(t){return arguments.length?(null==t?c=e=n=r=null:(c=+t[0][0],e=+t[0][1],n=+t[1][0],r=+t[1][1]),l()):null==c?null:[[c,e],[n,r]]},l()}function Ph(t){return mu((iu+t)/2)}function Ch(t,e){var n=hu(t),r=t===e?yu(t):gu(n/hu(e))/gu(Ph(e)/Ph(t)),i=n*_u(Ph(t),r)/r;if(!r)return Sh;function a(t,e){i>0?e<-iu+nu&&(e=-iu+nu):e>iu-nu&&(e=iu-nu);var n=i/_u(Ph(e),r);return[n*yu(r*t),i-n*hu(r*t)]}return a.invert=function(t,e){var n=i-e,a=xu(r)*vu(t*t+n*n);return[fu(t,cu(n))/r*xu(n),2*lu(_u(i/a,1/r))-iu]},a}var Mh=function(){return hh(Ch).scale(109.5).parallels([30,30])};function Lh(t,e){return[t,e]}Lh.invert=Lh;var Eh=function(){return lh(Lh).scale(152.63)};function Vh(t,e){var n=hu(t),r=t===e?yu(t):(n-hu(e))/(e-t),i=n/r+t;if(cu(r)<nu)return Lh;function a(t,e){var n=i-e,a=r*t;return[n*yu(a),i-n*hu(a)]}return a.invert=function(t,e){var n=i-e;return[fu(t,cu(n))/r*xu(n),i-xu(r)*vu(t*t+n*n)]},a}var Gh=function(){return hh(Vh).scale(131.154).center([0,13.9389])},kh=1.340264,Rh=-.081106,Oh=893e-6,Ih=.003796,Nh=vu(3)/2;function Dh(t,e){var n=wu(Nh*yu(e)),r=n*n,i=r*r*r;return[t*hu(n)/(Nh*(kh+3*Rh*r+i*(7*Oh+9*Ih*r))),n*(kh+Rh*r+i*(Oh+Ih*r))]}Dh.invert=function(t,e){for(var n,r=e,i=r*r,a=i*i*i,o=0;o<12&&(a=(i=(r-=n=(r*(kh+Rh*i+a*(Oh+Ih*i))-e)/(kh+3*Rh*i+a*(7*Oh+9*Ih*i)))*r)*i*i,!(cu(n)<1e-12));++o);return[Nh*t*(kh+3*Rh*i+a*(7*Oh+9*Ih*i))/hu(r),wu(yu(r)/Nh)]};var Fh=function(){return lh(Dh).scale(177.158)};function zh(t,e){var n=hu(e),r=hu(t)*n;return[n*yu(t)/r,yu(e)/r]}zh.invert=xh(lu);var Xh=function(){return lh(zh).scale(144.049).clipAngle(60)};function Bh(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?Kl:Kf({point:function(i,a){this.stream.point(i*t+n,a*e+r)}})}var Yh=function(){var t,e,n,r,i,a,o=1,s=0,u=0,c=1,l=1,f=Kl,h=null,d=Kl;function p(){return r=i=null,a}return a={stream:function(t){return r&&i===t?r:r=f(d(i=t))},postclip:function(r){return arguments.length?(d=r,h=t=e=n=null,p()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=t=e=n=null,Kl):ml(h=+r[0][0],t=+r[0][1],e=+r[1][0],n=+r[1][1]),p()):null==h?null:[[h,t],[e,n]]},scale:function(t){return arguments.length?(f=Bh((o=+t)*c,o*l,s,u),p()):o},translate:function(t){return arguments.length?(f=Bh(o*c,o*l,s=+t[0],u=+t[1]),p()):[s,u]},reflectX:function(t){return arguments.length?(f=Bh(o*(c=t?-1:1),o*l,s,u),p()):c<0},reflectY:function(t){return arguments.length?(f=Bh(o*c,o*(l=t?-1:1),s,u),p()):l<0},fitExtent:function(t,e){return eh(a,t,e)},fitSize:function(t,e){return nh(a,t,e)},fitWidth:function(t,e){return rh(a,t,e)},fitHeight:function(t,e){return ih(a,t,e)}}};function Hh(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Hh.invert=function(t,e){var n,r=e,i=25;do{var a=r*r,o=a*a;r-=n=(r*(1.007226+a*(.015085+o*(.028874*a-.044475-.005916*o)))-e)/(1.007226+a*(.045255+o*(.259866*a-.311325-.005916*11*o)))}while(cu(n)>nu&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};var Uh=function(){return lh(Hh).scale(175.295)};function jh(t,e){return[hu(e)*yu(t),yu(e)]}jh.invert=xh(wu);var Wh=function(){return lh(jh).scale(249.5).clipAngle(90+nu)};function qh(t,e){var n=hu(e),r=1+hu(t)*n;return[n*yu(t)/r,yu(e)/r]}qh.invert=xh(function(t){return 2*lu(t)});var Qh=function(){return lh(qh).scale(250).clipAngle(142)};function Zh(t,e){return[gu(mu((iu+e)/2)),-t]}Zh.invert=function(t,e){return[-e,2*lu(pu(t))-iu]};var $h=function(){var t=Th(Zh),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)};function Kh(t,e){return t.parent===e.parent?1:2}function Jh(t,e){return t+e.x}function td(t,e){return Math.max(t,e.y)}var ed=function(){var t=Kh,e=1,n=1,r=!1;function i(i){var a,o=0;i.eachAfter(function(e){var n=e.children;n?(e.x=function(t){return t.reduce(Jh,0)/t.length}(n),e.y=function(t){return 1+t.reduce(td,0)}(n)):(e.x=a?o+=t(e,a):0,e.y=0,a=e)});var s=function(t){for(var e;e=t.children;)t=e[0];return t}(i),u=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(i),c=s.x-t(s,u)/2,l=u.x+t(u,s)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*e,t.y=(i.y-t.y)*n}:function(t){t.x=(t.x-c)/(l-c)*e,t.y=(1-(i.y?t.y/i.y:1))*n})}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i};function nd(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function rd(t,e){var n,r,i,a,o,s=new sd(t),u=+t.value&&(s.value=t.value),c=[s];for(null==e&&(e=id);n=c.pop();)if(u&&(n.value=+n.data.value),(i=e(n.data))&&(o=i.length))for(n.children=new Array(o),a=o-1;a>=0;--a)c.push(r=n.children[a]=new sd(i[a])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(od)}function id(t){return t.children}function ad(t){t.data=t.data.data}function od(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function sd(t){this.data=t,this.depth=this.height=0,this.parent=null}sd.prototype=rd.prototype={constructor:sd,count:function(){return this.eachAfter(nd)},each:function(t){var e,n,r,i,a=this,o=[a];do{for(e=o.reverse(),o=[];a=e.pop();)if(t(a),n=a.children)for(r=0,i=n.length;r<i;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,i=this,a=[i],o=[];i=a.pop();)if(o.push(i),e=i.children)for(n=0,r=e.length;n<r;++n)a.push(e[n]);for(;i=o.pop();)t(i);return this},eachBefore:function(t){for(var e,n,r=this,i=[r];r=i.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)i.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,r=e.children,i=r&&r.length;--i>=0;)n+=r[i].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),i=null;for(t=n.pop(),e=r.pop();t===e;)i=t,t=n.pop(),e=r.pop();return i}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var i=r.length;t!==n;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return rd(this).eachBefore(ad)}};var ud=Array.prototype.slice;var cd=function(t){for(var e,n,r=0,i=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(ud.call(t))).length,a=[];r<i;)e=t[r],n&&hd(n,e)?++r:(n=pd(a=ld(a,e)),r=0);return n};function ld(t,e){var n,r;if(dd(e,t))return[e];for(n=0;n<t.length;++n)if(fd(e,t[n])&&dd(gd(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(fd(gd(t[n],t[r]),e)&&fd(gd(t[n],e),t[r])&&fd(gd(t[r],e),t[n])&&dd(_d(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function fd(t,e){var n=t.r-e.r,r=e.x-t.x,i=e.y-t.y;return n<0||n*n<r*r+i*i}function hd(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function dd(t,e){for(var n=0;n<e.length;++n)if(!hd(t,e[n]))return!1;return!0}function pd(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return gd(t[0],t[1]);case 3:return _d(t[0],t[1],t[2])}var e}function gd(t,e){var n=t.x,r=t.y,i=t.r,a=e.x,o=e.y,s=e.r,u=a-n,c=o-r,l=s-i,f=Math.sqrt(u*u+c*c);return{x:(n+a+u/f*l)/2,y:(r+o+c/f*l)/2,r:(f+i+s)/2}}function _d(t,e,n){var r=t.x,i=t.y,a=t.r,o=e.x,s=e.y,u=e.r,c=n.x,l=n.y,f=n.r,h=r-o,d=r-c,p=i-s,g=i-l,_=u-a,y=f-a,x=r*r+i*i-a*a,v=x-o*o-s*s+u*u,m=x-c*c-l*l+f*f,b=d*p-h*g,w=(p*m-g*v)/(2*b)-r,S=(g*_-p*y)/b,A=(d*v-h*m)/(2*b)-i,T=(h*y-d*_)/b,P=S*S+T*T-1,C=2*(a+w*S+A*T),M=w*w+A*A-a*a,L=-(P?(C+Math.sqrt(C*C-4*P*M))/(2*P):M/C);return{x:r+w+S*L,y:i+A+T*L,r:L}}function yd(t,e,n){var r,i,a,o,s=t.x-e.x,u=t.y-e.y,c=s*s+u*u;c?(i=e.r+n.r,i*=i,o=t.r+n.r,i>(o*=o)?(r=(c+o-i)/(2*c),a=Math.sqrt(Math.max(0,o/c-r*r)),n.x=t.x-r*s-a*u,n.y=t.y-r*u+a*s):(r=(c+i-o)/(2*c),a=Math.sqrt(Math.max(0,i/c-r*r)),n.x=e.x+r*s-a*u,n.y=e.y+r*u+a*s)):(n.x=e.x+n.r,n.y=e.y)}function xd(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,i=e.y-t.y;return n>0&&n*n>r*r+i*i}function vd(t){var e=t._,n=t.next._,r=e.r+n.r,i=(e.x*n.r+n.x*e.r)/r,a=(e.y*n.r+n.y*e.r)/r;return i*i+a*a}function md(t){this._=t,this.next=null,this.previous=null}function bd(t){if(!(i=t.length))return 0;var e,n,r,i,a,o,s,u,c,l,f;if((e=t[0]).x=0,e.y=0,!(i>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(i>2))return e.r+n.r;yd(n,e,r=t[2]),e=new md(e),n=new md(n),r=new md(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(s=3;s<i;++s){yd(e._,n._,r=t[s]),r=new md(r),u=n.next,c=e.previous,l=n._.r,f=e._.r;do{if(l<=f){if(xd(u._,r._)){n=u,e.next=n,n.previous=e,--s;continue t}l+=u._.r,u=u.next}else{if(xd(c._,r._)){(e=c).next=n,n.previous=e,--s;continue t}f+=c._.r,c=c.previous}}while(u!==c.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,a=vd(e);(r=r.next)!==n;)(o=vd(r))<a&&(e=r,a=o);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=cd(e),s=0;s<i;++s)(e=t[s]).x-=r.x,e.y-=r.y;return r.r}var wd=function(t){return bd(t),t};function Sd(t){if("function"!=typeof t)throw new Error;return t}function Ad(){return 0}var Td=function(t){return function(){return t}};function Pd(t){return Math.sqrt(t.value)}var Cd=function(){var t=null,e=1,n=1,r=Ad;function i(i){return i.x=e/2,i.y=n/2,t?i.eachBefore(Md(t)).eachAfter(Ld(r,.5)).eachBefore(Ed(1)):i.eachBefore(Md(Pd)).eachAfter(Ld(Ad,1)).eachAfter(Ld(r,i.r/Math.min(e,n))).eachBefore(Ed(Math.min(e,n)/(2*i.r))),i}return i.radius=function(e){return arguments.length?(t=null==(n=e)?null:Sd(n),i):t;var n},i.size=function(t){return arguments.length?(e=+t[0],n=+t[1],i):[e,n]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Td(+t),i):r},i};function Md(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Ld(t,e){return function(n){if(r=n.children){var r,i,a,o=r.length,s=t(n)*e||0;if(s)for(i=0;i<o;++i)r[i].r+=s;if(a=bd(r),s)for(i=0;i<o;++i)r[i].r-=s;n.r=a+s}}}function Ed(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Vd=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Gd=function(t,e,n,r,i){for(var a,o=t.children,s=-1,u=o.length,c=t.value&&(r-e)/t.value;++s<u;)(a=o[s]).y0=n,a.y1=i,a.x0=e,a.x1=e+=a.value*c},kd=function(){var t=1,e=1,n=0,r=!1;function i(i){var a=i.height+1;return i.x0=i.y0=n,i.x1=t,i.y1=e/a,i.eachBefore(function(t,e){return function(r){r.children&&Gd(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var i=r.x0,a=r.y0,o=r.x1-n,s=r.y1-n;o<i&&(i=o=(i+o)/2),s<a&&(a=s=(a+s)/2),r.x0=i,r.y0=a,r.x1=o,r.y1=s}}(e,a)),r&&i.eachBefore(Vd),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(n){return arguments.length?(t=+n[0],e=+n[1],i):[t,e]},i.padding=function(t){return arguments.length?(n=+t,i):n},i},Rd="$",Od={depth:-1},Id={};function Nd(t){return t.id}function Dd(t){return t.parentId}var Fd=function(){var t=Nd,e=Dd;function n(n){var r,i,a,o,s,u,c,l=n.length,f=new Array(l),h={};for(i=0;i<l;++i)r=n[i],s=f[i]=new sd(r),null!=(u=t(r,i,n))&&(u+="")&&(h[c=Rd+(s.id=u)]=c in h?Id:s);for(i=0;i<l;++i)if(s=f[i],null!=(u=e(n[i],i,n))&&(u+="")){if(!(o=h[Rd+u]))throw new Error("missing: "+u);if(o===Id)throw new Error("ambiguous: "+u);o.children?o.children.push(s):o.children=[s],s.parent=o}else{if(a)throw new Error("multiple roots");a=s}if(!a)throw new Error("no root");if(a.parent=Od,a.eachBefore(function(t){t.depth=t.parent.depth+1,--l}).eachBefore(od),a.parent=null,l>0)throw new Error("cycle");return a}return n.id=function(e){return arguments.length?(t=Sd(e),n):t},n.parentId=function(t){return arguments.length?(e=Sd(t),n):e},n};function zd(t,e){return t.parent===e.parent?1:2}function Xd(t){var e=t.children;return e?e[0]:t.t}function Bd(t){var e=t.children;return e?e[e.length-1]:t.t}function Yd(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Hd(t,e,n){return t.a.parent===e.parent?t.a:n}function Ud(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Ud.prototype=Object.create(sd.prototype);var jd=function(){var t=zd,e=1,n=1,r=null;function i(i){var u=function(t){for(var e,n,r,i,a,o=new Ud(t,0),s=[o];e=s.pop();)if(r=e._.children)for(e.children=new Array(a=r.length),i=a-1;i>=0;--i)s.push(n=e.children[i]=new Ud(r[i],i)),n.parent=e;return(o.parent=new Ud(null,0)).children=[o],o}(i);if(u.eachAfter(a),u.parent.m=-u.z,u.eachBefore(o),r)i.eachBefore(s);else{var c=i,l=i,f=i;i.eachBefore(function(t){t.x<c.x&&(c=t),t.x>l.x&&(l=t),t.depth>f.depth&&(f=t)});var h=c===l?1:t(c,l)/2,d=h-c.x,p=e/(l.x+h+d),g=n/(f.depth||1);i.eachBefore(function(t){t.x=(t.x+d)*p,t.y=t.depth*g})}return i}function a(e){var n=e.children,r=e.parent.children,i=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,i=t.children,a=i.length;--a>=0;)(e=i[a]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var a=(n[0].z+n[n.length-1].z)/2;i?(e.z=i.z+t(e._,i._),e.m=e.z-a):e.z=a}else i&&(e.z=i.z+t(e._,i._));e.parent.A=function(e,n,r){if(n){for(var i,a=e,o=e,s=n,u=a.parent.children[0],c=a.m,l=o.m,f=s.m,h=u.m;s=Bd(s),a=Xd(a),s&&a;)u=Xd(u),(o=Bd(o)).a=e,(i=s.z+f-a.z-c+t(s._,a._))>0&&(Yd(Hd(s,e,r),e,i),c+=i,l+=i),f+=s.m,c+=a.m,h+=u.m,l+=o.m;s&&!Bd(o)&&(o.t=s,o.m+=f-l),a&&!Xd(u)&&(u.t=a,u.m+=c-h,r=e)}return r}(e,i,e.parent.A||r[0])}function o(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function s(t){t.x*=e,t.y=t.depth*n}return i.separation=function(e){return arguments.length?(t=e,i):t},i.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],i):r?null:[e,n]},i.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],i):r?[e,n]:null},i},Wd=function(t,e,n,r,i){for(var a,o=t.children,s=-1,u=o.length,c=t.value&&(i-n)/t.value;++s<u;)(a=o[s]).x0=e,a.x1=r,a.y0=n,a.y1=n+=a.value*c},qd=(1+Math.sqrt(5))/2;function Qd(t,e,n,r,i,a){for(var o,s,u,c,l,f,h,d,p,g,_,y=[],x=e.children,v=0,m=0,b=x.length,w=e.value;v<b;){u=i-n,c=a-r;do{l=x[m++].value}while(!l&&m<b);for(f=h=l,_=l*l*(g=Math.max(c/u,u/c)/(w*t)),p=Math.max(h/_,_/f);m<b;++m){if(l+=s=x[m].value,s<f&&(f=s),s>h&&(h=s),_=l*l*g,(d=Math.max(h/_,_/f))>p){l-=s;break}p=d}y.push(o={value:l,dice:u<c,children:x.slice(v,m)}),o.dice?Gd(o,n,r,i,w?r+=c*l/w:a):Wd(o,n,r,w?n+=u*l/w:i,a),w-=l,v=m}return y}var Zd=function t(e){function n(t,n,r,i,a){Qd(e,t,n,r,i,a)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(qd),$d=function(){var t=Zd,e=!1,n=1,r=1,i=[0],a=Ad,o=Ad,s=Ad,u=Ad,c=Ad;function l(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(f),i=[0],e&&t.eachBefore(Vd),t}function f(e){var n=i[e.depth],r=e.x0+n,l=e.y0+n,f=e.x1-n,h=e.y1-n;f<r&&(r=f=(r+f)/2),h<l&&(l=h=(l+h)/2),e.x0=r,e.y0=l,e.x1=f,e.y1=h,e.children&&(n=i[e.depth+1]=a(e)/2,r+=c(e)-n,l+=o(e)-n,(f-=s(e)-n)<r&&(r=f=(r+f)/2),(h-=u(e)-n)<l&&(l=h=(l+h)/2),t(e,r,l,f,h))}return l.round=function(t){return arguments.length?(e=!!t,l):e},l.size=function(t){return arguments.length?(n=+t[0],r=+t[1],l):[n,r]},l.tile=function(e){return arguments.length?(t=Sd(e),l):t},l.padding=function(t){return arguments.length?l.paddingInner(t).paddingOuter(t):l.paddingInner()},l.paddingInner=function(t){return arguments.length?(a="function"==typeof t?t:Td(+t),l):a},l.paddingOuter=function(t){return arguments.length?l.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):l.paddingTop()},l.paddingTop=function(t){return arguments.length?(o="function"==typeof t?t:Td(+t),l):o},l.paddingRight=function(t){return arguments.length?(s="function"==typeof t?t:Td(+t),l):s},l.paddingBottom=function(t){return arguments.length?(u="function"==typeof t?t:Td(+t),l):u},l.paddingLeft=function(t){return arguments.length?(c="function"==typeof t?t:Td(+t),l):c},l},Kd=function(t,e,n,r,i){var a,o,s=t.children,u=s.length,c=new Array(u+1);for(c[0]=o=a=0;a<u;++a)c[a+1]=o+=s[a].value;!function t(e,n,r,i,a,o,u){if(e>=n-1){var l=s[e];return l.x0=i,l.y0=a,l.x1=o,void(l.y1=u)}var f=c[e],h=r/2+f,d=e+1,p=n-1;for(;d<p;){var g=d+p>>>1;c[g]<h?d=g+1:p=g}h-c[d-1]<c[d]-h&&e+1<d&&--d;var _=c[d]-f,y=r-_;if(o-i>u-a){var x=(i*y+o*_)/r;t(e,d,_,i,a,x,u),t(d,n,y,x,a,o,u)}else{var v=(a*y+u*_)/r;t(e,d,_,i,a,o,v),t(d,n,y,i,v,o,u)}}(0,u,t.value,e,n,r,i)},Jd=function(t,e,n,r,i){(1&t.depth?Wd:Gd)(t,e,n,r,i)},tp=function t(e){function n(t,n,r,i,a){if((o=t._squarify)&&o.ratio===e)for(var o,s,u,c,l,f=-1,h=o.length,d=t.value;++f<h;){for(u=(s=o[f]).children,c=s.value=0,l=u.length;c<l;++c)s.value+=u[c].value;s.dice?Gd(s,n,r,i,r+=(a-r)*s.value/d):Wd(s,n,r,n+=(i-n)*s.value/d,a),d-=s.value}else t._squarify=o=Qd(e,t,n,r,i,a),o.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(qd),ep=function(t){for(var e,n=-1,r=t.length,i=t[r-1],a=0;++n<r;)e=i,i=t[n],a+=e[1]*i[0]-e[0]*i[1];return a/2},np=function(t){for(var e,n,r=-1,i=t.length,a=0,o=0,s=t[i-1],u=0;++r<i;)e=s,s=t[r],u+=n=e[0]*s[1]-s[0]*e[1],a+=(e[0]+s[0])*n,o+=(e[1]+s[1])*n;return[a/(u*=3),o/u]},rp=function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])};function ip(t,e){return t[0]-e[0]||t[1]-e[1]}function ap(t){for(var e=t.length,n=[0,1],r=2,i=2;i<e;++i){for(;r>1&&rp(t[n[r-2]],t[n[r-1]],t[i])<=0;)--r;n[r++]=i}return n.slice(0,r)}var op=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),i=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(ip),e=0;e<n;++e)i[e]=[r[e][0],-r[e][1]];var a=ap(r),o=ap(i),s=o[0]===a[0],u=o[o.length-1]===a[a.length-1],c=[];for(e=a.length-1;e>=0;--e)c.push(t[r[a[e]][2]]);for(e=+s;e<o.length-u;++e)c.push(t[r[o[e]][2]]);return c},sp=function(t,e){for(var n,r,i=t.length,a=t[i-1],o=e[0],s=e[1],u=a[0],c=a[1],l=!1,f=0;f<i;++f)n=(a=t[f])[0],(r=a[1])>s!=c>s&&o<(u-n)*(s-r)/(c-r)+n&&(l=!l),u=n,c=r;return l},up=function(t){for(var e,n,r=-1,i=t.length,a=t[i-1],o=a[0],s=a[1],u=0;++r<i;)e=o,n=s,e-=o=(a=t[r])[0],n-=s=a[1],u+=Math.sqrt(e*e+n*n);return u},cp=function(){return Math.random()},lp=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(cp),fp=function t(e){function n(t,n){var r,i;return t=null==t?0:+t,n=null==n?1:+n,function(){var a;if(null!=r)a=r,r=null;else do{r=2*e()-1,a=2*e()-1,i=r*r+a*a}while(!i||i>1);return t+n*a*Math.sqrt(-2*Math.log(i)/i)}}return n.source=t,n}(cp),hp=function t(e){function n(){var t=fp.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(cp),dp=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(cp),pp=function t(e){function n(t){var n=dp.source(e)(t);return function(){return n()/t}}return n.source=t,n}(cp),gp=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(cp),_p=Array.prototype,yp=_p.map,xp=_p.slice,vp={name:"implicit"};function mp(t){var e=$a(),n=[],r=vp;function i(i){var a=i+"",o=e.get(a);if(!o){if(r!==vp)return r;e.set(a,o=n.push(i))}return t[(o-1)%t.length]}return t=null==t?[]:xp.call(t),i.domain=function(t){if(!arguments.length)return n.slice();n=[],e=$a();for(var r,a,o=-1,s=t.length;++o<s;)e.has(a=(r=t[o])+"")||e.set(a,n.push(r));return i},i.range=function(e){return arguments.length?(t=xp.call(e),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return mp().domain(n).range(t).unknown(r)},i}function bp(){var t,e,n=mp().unknown(void 0),r=n.domain,i=n.range,a=[0,1],o=!1,s=0,u=0,c=.5;function l(){var n=r().length,l=a[1]<a[0],f=a[l-0],h=a[1-l];t=(h-f)/Math.max(1,n-s+2*u),o&&(t=Math.floor(t)),f+=(h-f-t*(n-s))*c,e=t*(1-s),o&&(f=Math.round(f),e=Math.round(e));var d=w(n).map(function(e){return f+t*e});return i(l?d.reverse():d)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),l()):r()},n.range=function(t){return arguments.length?(a=[+t[0],+t[1]],l()):a.slice()},n.rangeRound=function(t){return a=[+t[0],+t[1]],o=!0,l()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(o=!!t,l()):o},n.padding=function(t){return arguments.length?(s=u=Math.max(0,Math.min(1,t)),l()):s},n.paddingInner=function(t){return arguments.length?(s=Math.max(0,Math.min(1,t)),l()):s},n.paddingOuter=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),l()):u},n.align=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),l()):c},n.copy=function(){return bp().domain(r()).range(a).round(o).paddingInner(s).paddingOuter(u).align(c)},l()}function wp(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return t(n())},e}(bp().paddingInner(1))}var Sp=function(t){return function(){return t}},Ap=function(t){return+t},Tp=[0,1];function Pp(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Sp(e)}function Cp(t,e,n,r){var i=t[0],a=t[1],o=e[0],s=e[1];return a<i?(i=n(a,i),o=r(s,o)):(i=n(i,a),o=r(o,s)),function(t){return o(i(t))}}function Mp(t,e,n,r){var i=Math.min(t.length,e.length)-1,a=new Array(i),o=new Array(i),s=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<i;)a[s]=n(t[s],t[s+1]),o[s]=r(e[s],e[s+1]);return function(e){var n=u(t,e,1,i)-1;return o[n](a[n](e))}}function Lp(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function Ep(t,e){var n,r,i,a=Tp,o=Tp,s=$n,u=!1;function c(){return n=Math.min(a.length,o.length)>2?Mp:Cp,r=i=null,l}function l(e){return(r||(r=n(a,o,u?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,s)))(+e)}return l.invert=function(t){return(i||(i=n(o,a,Pp,u?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},l.domain=function(t){return arguments.length?(a=yp.call(t,Ap),c()):a.slice()},l.range=function(t){return arguments.length?(o=xp.call(t),c()):o.slice()},l.rangeRound=function(t){return o=xp.call(t),s=tr,c()},l.clamp=function(t){return arguments.length?(u=!!t,c()):u},l.interpolate=function(t){return arguments.length?(s=t,c()):s},c()}var Vp=function(t,e,n){var r,i=t[0],a=t[t.length-1],o=M(i,a,null==e?10:e);switch((n=Is(null==n?",f":n)).type){case"s":var s=Math.max(Math.abs(i),Math.abs(a));return null!=n.precision||isNaN(r=Zs(o,s))||(n.precision=r),Xs(n,s);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=$s(o,Math.max(Math.abs(i),Math.abs(a))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=Qs(o))||(n.precision=r-2*("%"===n.type))}return zs(n)};function Gp(t){var e=t.domain;return t.ticks=function(t){var n=e();return P(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return Vp(e(),t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),a=0,o=i.length-1,s=i[a],u=i[o];return u<s&&(r=s,s=u,u=r,r=a,a=o,o=r),(r=C(s,u,n))>0?r=C(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=C(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(i[a]=Math.floor(s/r)*r,i[o]=Math.ceil(u/r)*r,e(i)):r<0&&(i[a]=Math.ceil(s*r)/r,i[o]=Math.floor(u*r)/r,e(i)),t},t}function kp(){var t=Ep(Pp,Bn);return t.copy=function(){return Lp(t,kp())},Gp(t)}function Rp(){var t=[0,1];function e(t){return+t}return e.invert=e,e.domain=e.range=function(n){return arguments.length?(t=yp.call(n,Ap),e):t.slice()},e.copy=function(){return Rp().domain(t)},Gp(e)}var Op=function(t,e){var n,r=0,i=(t=t.slice()).length-1,a=t[r],o=t[i];return o<a&&(n=r,r=i,i=n,n=a,a=o,o=n),t[r]=e.floor(a),t[i]=e.ceil(o),t};function Ip(t,e){return(e=Math.log(e/t))?function(n){return Math.log(n/t)/e}:Sp(e)}function Np(t,e){return t<0?function(n){return-Math.pow(-e,n)*Math.pow(-t,1-n)}:function(n){return Math.pow(e,n)*Math.pow(t,1-n)}}function Dp(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Fp(t){return 10===t?Dp:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}function zp(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}function Xp(t){return function(e){return-t(-e)}}function Bp(){var t=Ep(Ip,Np).domain([1,10]),e=t.domain,n=10,r=zp(10),i=Fp(10);function a(){return r=zp(n),i=Fp(n),e()[0]<0&&(r=Xp(r),i=Xp(i)),t}return t.base=function(t){return arguments.length?(n=+t,a()):n},t.domain=function(t){return arguments.length?(e(t),a()):e()},t.ticks=function(t){var a,o=e(),s=o[0],u=o[o.length-1];(a=u<s)&&(h=s,s=u,u=h);var c,l,f,h=r(s),d=r(u),p=null==t?10:+t,g=[];if(!(n%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,s>0){for(;h<d;++h)for(l=1,c=i(h);l<n;++l)if(!((f=c*l)<s)){if(f>u)break;g.push(f)}}else for(;h<d;++h)for(l=n-1,c=i(h);l>=1;--l)if(!((f=c*l)<s)){if(f>u)break;g.push(f)}}else g=P(h,d,Math.min(d-h,p)).map(i);return a?g.reverse():g},t.tickFormat=function(e,a){if(null==a&&(a=10===n?".0e":","),"function"!=typeof a&&(a=zs(a)),e===1/0)return a;null==e&&(e=10);var o=Math.max(1,n*e/t.ticks().length);return function(t){var e=t/i(Math.round(r(t)));return e*n<n-.5&&(e*=n),e<=o?a(t):""}},t.nice=function(){return e(Op(e(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return Lp(t,Bp().base(n))},t}function Yp(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function Hp(){var t=1,e=Ep(function(e,n){return(n=Yp(n,t)-(e=Yp(e,t)))?function(r){return(Yp(r,t)-e)/n}:Sp(n)},function(e,n){return n=Yp(n,t)-(e=Yp(e,t)),function(r){return Yp(e+n*r,1/t)}}),n=e.domain;return e.exponent=function(e){return arguments.length?(t=+e,n(n())):t},e.copy=function(){return Lp(e,Hp().exponent(t))},Gp(e)}function Up(){return Hp().exponent(.5)}function jp(){var t=[],e=[],n=[];function i(){var r=0,i=Math.max(1,e.length);for(n=new Array(i-1);++r<i;)n[r-1]=V(t,r/i);return a}function a(t){if(!isNaN(t=+t))return e[u(n,t)]}return a.invertExtent=function(r){var i=e.indexOf(r);return i<0?[NaN,NaN]:[i>0?n[i-1]:t[0],i<n.length?n[i]:t[t.length-1]]},a.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,a=0,o=e.length;a<o;++a)null==(n=e[a])||isNaN(n=+n)||t.push(n);return t.sort(r),i()},a.range=function(t){return arguments.length?(e=xp.call(t),i()):e.slice()},a.quantiles=function(){return n.slice()},a.copy=function(){return jp().domain(t).range(e)},a}function Wp(){var t=0,e=1,n=1,r=[.5],i=[0,1];function a(t){if(t<=t)return i[u(r,t,0,n)]}function o(){var i=-1;for(r=new Array(n);++i<n;)r[i]=((i+1)*e-(i-n)*t)/(n+1);return a}return a.domain=function(n){return arguments.length?(t=+n[0],e=+n[1],o()):[t,e]},a.range=function(t){return arguments.length?(n=(i=xp.call(t)).length-1,o()):i.slice()},a.invertExtent=function(a){var o=i.indexOf(a);return o<0?[NaN,NaN]:o<1?[t,r[0]]:o>=n?[r[n-1],e]:[r[o-1],r[o]]},a.copy=function(){return Wp().domain([t,e]).range(i)},Gp(a)}function qp(){var t=[.5],e=[0,1],n=1;function r(r){if(r<=r)return e[u(t,r,0,n)]}return r.domain=function(i){return arguments.length?(t=xp.call(i),n=Math.min(t.length,e.length-1),r):t.slice()},r.range=function(i){return arguments.length?(e=xp.call(i),n=Math.min(t.length,e.length-1),r):e.slice()},r.invertExtent=function(n){var r=e.indexOf(n);return[t[r-1],t[r]]},r.copy=function(){return qp().domain(t).range(e)},r}var Qp=new Date,Zp=new Date;function $p(t,e,n,r){function i(e){return t(e=new Date(+e)),e}return i.floor=i,i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var o,s=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return s;do{s.push(o=new Date(+n)),e(n,a),t(n)}while(o<n&&n<r);return s},i.filter=function(n){return $p(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})},n&&(i.count=function(e,r){return Qp.setTime(+e),Zp.setTime(+r),t(Qp),t(Zp),Math.floor(n(Qp,Zp))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var Kp=$p(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Kp.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?$p(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Kp:null};var Jp=Kp,tg=Kp.range,eg=6e4,ng=6048e5,rg=$p(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),ig=rg,ag=rg.range,og=$p(function(t){t.setTime(Math.floor(t/eg)*eg)},function(t,e){t.setTime(+t+e*eg)},function(t,e){return(e-t)/eg},function(t){return t.getMinutes()}),sg=og,ug=og.range,cg=$p(function(t){var e=t.getTimezoneOffset()*eg%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()}),lg=cg,fg=cg.range,hg=$p(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*eg)/864e5},function(t){return t.getDate()-1}),dg=hg,pg=hg.range;function gg(t){return $p(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*eg)/ng})}var _g=gg(0),yg=gg(1),xg=gg(2),vg=gg(3),mg=gg(4),bg=gg(5),wg=gg(6),Sg=_g.range,Ag=yg.range,Tg=xg.range,Pg=vg.range,Cg=mg.range,Mg=bg.range,Lg=wg.range,Eg=$p(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Vg=Eg,Gg=Eg.range,kg=$p(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});kg.every=function(t){return isFinite(t=Math.floor(t))&&t>0?$p(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Rg=kg,Og=kg.range,Ig=$p(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*eg)},function(t,e){return(e-t)/eg},function(t){return t.getUTCMinutes()}),Ng=Ig,Dg=Ig.range,Fg=$p(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()}),zg=Fg,Xg=Fg.range,Bg=$p(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1}),Yg=Bg,Hg=Bg.range;function Ug(t){return $p(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/ng})}var jg=Ug(0),Wg=Ug(1),qg=Ug(2),Qg=Ug(3),Zg=Ug(4),$g=Ug(5),Kg=Ug(6),Jg=jg.range,t_=Wg.range,e_=qg.range,n_=Qg.range,r_=Zg.range,i_=$g.range,a_=Kg.range,o_=$p(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),s_=o_,u_=o_.range,c_=$p(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});c_.every=function(t){return isFinite(t=Math.floor(t))&&t>0?$p(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var l_=c_,f_=c_.range;function h_(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function d_(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function p_(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function g_(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,o=t.shortDays,s=t.months,u=t.shortMonths,c=C_(i),l=M_(i),f=C_(a),h=M_(a),d=C_(o),p=M_(o),g=C_(s),_=M_(s),y=C_(u),x=M_(u),v={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:q_,e:q_,f:J_,H:Q_,I:Z_,j:$_,L:K_,m:ty,M:ey,p:function(t){return i[+(t.getHours()>=12)]},Q:Ly,s:Ey,S:ny,u:ry,U:iy,V:ay,w:oy,W:sy,x:null,X:null,y:uy,Y:cy,Z:ly,"%":My},m={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:fy,e:fy,f:_y,H:hy,I:dy,j:py,L:gy,m:yy,M:xy,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:Ly,s:Ey,S:vy,u:my,U:by,V:wy,w:Sy,W:Ay,x:null,X:null,y:Ty,Y:Py,Z:Cy,"%":My},b={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=p[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=x[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=_[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return A(t,e,n,r)},d:D_,e:D_,f:H_,H:z_,I:z_,j:F_,L:Y_,m:N_,M:X_,p:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.p=l[r[0].toLowerCase()],n+r[0].length):-1},Q:j_,s:W_,S:B_,u:E_,U:V_,V:G_,w:L_,W:k_,x:function(t,e,r){return A(t,n,e,r)},X:function(t,e,n){return A(t,r,e,n)},y:O_,Y:R_,Z:I_,"%":U_};function w(t,e){return function(n){var r,i,a,o=[],s=-1,u=0,c=t.length;for(n instanceof Date||(n=new Date(+n));++s<c;)37===t.charCodeAt(s)&&(o.push(t.slice(u,s)),null!=(i=b_[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),o.push(r),u=s+1);return o.push(t.slice(u,s)),o.join("")}}function S(t,e){return function(n){var r,i,a=p_(1900);if(A(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=d_(p_(a.y))).getUTCDay(),r=i>4||0===i?Wg.ceil(r):Wg(r),r=Yg.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=e(p_(a.y))).getDay(),r=i>4||0===i?yg.ceil(r):yg(r),r=dg.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?d_(p_(a.y)).getUTCDay():e(p_(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,d_(a)):e(a)}}function A(t,e,n,r){for(var i,a,o=0,s=e.length,u=n.length;o<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(o++))){if(i=e.charAt(o++),!(a=b[i in b_?e.charAt(o++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return v.x=w(n,v),v.X=w(r,v),v.c=w(e,v),m.x=w(n,m),m.X=w(r,m),m.c=w(e,m),{format:function(t){var e=w(t+="",v);return e.toString=function(){return t},e},parse:function(t){var e=S(t+="",h_);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",m);return e.toString=function(){return t},e},utcParse:function(t){var e=S(t,d_);return e.toString=function(){return t},e}}}var __,y_,x_,v_,m_,b_={"-":"",_:" ",0:"0"},w_=/^\s*\d+/,S_=/^%/,A_=/[\\^$*+?|[\]().{}]/g;function T_(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function P_(t){return t.replace(A_,"\\$&")}function C_(t){return new RegExp("^(?:"+t.map(P_).join("|")+")","i")}function M_(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function L_(t,e,n){var r=w_.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function E_(t,e,n){var r=w_.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function V_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function G_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function k_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function R_(t,e,n){var r=w_.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function O_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function I_(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function N_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function D_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function F_(t,e,n){var r=w_.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function z_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function X_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function B_(t,e,n){var r=w_.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Y_(t,e,n){var r=w_.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function H_(t,e,n){var r=w_.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function U_(t,e,n){var r=S_.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function j_(t,e,n){var r=w_.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function W_(t,e,n){var r=w_.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function q_(t,e){return T_(t.getDate(),e,2)}function Q_(t,e){return T_(t.getHours(),e,2)}function Z_(t,e){return T_(t.getHours()%12||12,e,2)}function $_(t,e){return T_(1+dg.count(Rg(t),t),e,3)}function K_(t,e){return T_(t.getMilliseconds(),e,3)}function J_(t,e){return K_(t,e)+"000"}function ty(t,e){return T_(t.getMonth()+1,e,2)}function ey(t,e){return T_(t.getMinutes(),e,2)}function ny(t,e){return T_(t.getSeconds(),e,2)}function ry(t){var e=t.getDay();return 0===e?7:e}function iy(t,e){return T_(_g.count(Rg(t),t),e,2)}function ay(t,e){var n=t.getDay();return t=n>=4||0===n?mg(t):mg.ceil(t),T_(mg.count(Rg(t),t)+(4===Rg(t).getDay()),e,2)}function oy(t){return t.getDay()}function sy(t,e){return T_(yg.count(Rg(t),t),e,2)}function uy(t,e){return T_(t.getFullYear()%100,e,2)}function cy(t,e){return T_(t.getFullYear()%1e4,e,4)}function ly(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+T_(e/60|0,"0",2)+T_(e%60,"0",2)}function fy(t,e){return T_(t.getUTCDate(),e,2)}function hy(t,e){return T_(t.getUTCHours(),e,2)}function dy(t,e){return T_(t.getUTCHours()%12||12,e,2)}function py(t,e){return T_(1+Yg.count(l_(t),t),e,3)}function gy(t,e){return T_(t.getUTCMilliseconds(),e,3)}function _y(t,e){return gy(t,e)+"000"}function yy(t,e){return T_(t.getUTCMonth()+1,e,2)}function xy(t,e){return T_(t.getUTCMinutes(),e,2)}function vy(t,e){return T_(t.getUTCSeconds(),e,2)}function my(t){var e=t.getUTCDay();return 0===e?7:e}function by(t,e){return T_(jg.count(l_(t),t),e,2)}function wy(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Zg(t):Zg.ceil(t),T_(Zg.count(l_(t),t)+(4===l_(t).getUTCDay()),e,2)}function Sy(t){return t.getUTCDay()}function Ay(t,e){return T_(Wg.count(l_(t),t),e,2)}function Ty(t,e){return T_(t.getUTCFullYear()%100,e,2)}function Py(t,e){return T_(t.getUTCFullYear()%1e4,e,4)}function Cy(){return"+0000"}function My(){return"%"}function Ly(t){return+t}function Ey(t){return Math.floor(+t/1e3)}function Vy(t){return __=g_(t),y_=__.format,x_=__.parse,v_=__.utcFormat,m_=__.utcParse,__}Vy({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Gy=Date.prototype.toISOString?function(t){return t.toISOString()}:v_("%Y-%m-%dT%H:%M:%S.%LZ");var ky=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:m_("%Y-%m-%dT%H:%M:%S.%LZ"),Ry=1e3,Oy=60*Ry,Iy=60*Oy,Ny=24*Iy,Dy=7*Ny,Fy=30*Ny,zy=365*Ny;function Xy(t){return new Date(t)}function By(t){return t instanceof Date?+t:+new Date(+t)}function Yy(t,e,n,r,a,o,s,u,c){var l=Ep(Pp,Bn),f=l.invert,h=l.domain,d=c(".%L"),p=c(":%S"),g=c("%I:%M"),_=c("%I %p"),y=c("%a %d"),x=c("%b %d"),v=c("%B"),m=c("%Y"),b=[[s,1,Ry],[s,5,5*Ry],[s,15,15*Ry],[s,30,30*Ry],[o,1,Oy],[o,5,5*Oy],[o,15,15*Oy],[o,30,30*Oy],[a,1,Iy],[a,3,3*Iy],[a,6,6*Iy],[a,12,12*Iy],[r,1,Ny],[r,2,2*Ny],[n,1,Dy],[e,1,Fy],[e,3,3*Fy],[t,1,zy]];function w(i){return(s(i)<i?d:o(i)<i?p:a(i)<i?g:r(i)<i?_:e(i)<i?n(i)<i?y:x:t(i)<i?v:m)(i)}function S(e,n,r,a){if(null==e&&(e=10),"number"==typeof e){var o=Math.abs(r-n)/e,s=i(function(t){return t[2]}).right(b,o);s===b.length?(a=M(n/zy,r/zy,e),e=t):s?(a=(s=b[o/b[s-1][2]<b[s][2]/o?s-1:s])[1],e=s[0]):(a=Math.max(M(n,r,e),1),e=u)}return null==a?e:e.every(a)}return l.invert=function(t){return new Date(f(t))},l.domain=function(t){return arguments.length?h(yp.call(t,By)):h().map(Xy)},l.ticks=function(t,e){var n,r=h(),i=r[0],a=r[r.length-1],o=a<i;return o&&(n=i,i=a,a=n),n=(n=S(t,i,a,e))?n.range(i,a+1):[],o?n.reverse():n},l.tickFormat=function(t,e){return null==e?w:c(e)},l.nice=function(t,e){var n=h();return(t=S(t,n[0],n[n.length-1],e))?h(Op(n,t)):l},l.copy=function(){return Lp(l,Yy(t,e,n,r,a,o,s,u,c))},l}var Hy=function(){return Yy(Rg,Vg,_g,dg,lg,sg,ig,Jp,y_).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},Uy=function(){return Yy(l_,s_,jg,Yg,zg,Ng,ig,Jp,v_).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])};function jy(t){var e=0,n=1,r=1,i=!1;function a(n){var a=(n-e)*r;return t(i?Math.max(0,Math.min(1,a)):a)}return a.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],r=e===n?0:1/(n-e),a):[e,n]},a.clamp=function(t){return arguments.length?(i=!!t,a):i},a.interpolator=function(e){return arguments.length?(t=e,a):t},a.copy=function(){return jy(t).domain([e,n]).clamp(i)},Gp(a)}function Wy(t){var e=0,n=.5,r=1,i=1,a=1,o=!1;function s(e){var r=.5+((e=+e)-n)*(e<n?i:a);return t(o?Math.max(0,Math.min(1,r)):r)}return s.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],r=+t[2],i=e===n?0:.5/(n-e),a=n===r?0:.5/(r-n),s):[e,n,r]},s.clamp=function(t){return arguments.length?(o=!!t,s):o},s.interpolator=function(e){return arguments.length?(t=e,s):t},s.copy=function(){return Wy(t).domain([e,n,r]).clamp(o)},Gp(s)}var qy=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},Qy=qy("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Zy=qy("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),$y=qy("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),Ky=qy("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Jy=qy("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),tx=qy("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),ex=qy("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),nx=qy("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),rx=qy("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),ix=function(t){return Dn(t[t.length-1])},ax=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(qy),ox=ix(ax),sx=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(qy),ux=ix(sx),cx=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(qy),lx=ix(cx),fx=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(qy),hx=ix(fx),dx=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(qy),px=ix(dx),gx=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(qy),_x=ix(gx),yx=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(qy),xx=ix(yx),vx=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(qy),mx=ix(vx),bx=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(qy),wx=ix(bx),Sx=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(qy),Ax=ix(Sx),Tx=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(qy),Px=ix(Tx),Cx=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(qy),Mx=ix(Cx),Lx=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(qy),Ex=ix(Lx),Vx=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(qy),Gx=ix(Vx),kx=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(qy),Rx=ix(kx),Ox=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(qy),Ix=ix(Ox),Nx=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(qy),Dx=ix(Nx),Fx=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(qy),zx=ix(Fx),Xx=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(qy),Bx=ix(Xx),Yx=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(qy),Hx=ix(Yx),Ux=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(qy),jx=ix(Ux),Wx=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(qy),qx=ix(Wx),Qx=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(qy),Zx=ix(Qx),$x=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(qy),Kx=ix($x),Jx=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(qy),tv=ix(Jx),ev=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(qy),nv=ix(ev),rv=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(qy),iv=ix(rv),av=vr(Pn(300,.5,0),Pn(-240,.5,1)),ov=vr(Pn(-100,.75,.35),Pn(80,1.5,.8)),sv=vr(Pn(260,.75,.35),Pn(80,1.5,.8)),uv=Pn(),cv=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return uv.h=360*t-100,uv.s=1.5-1.5*e,uv.l=.8-.9*e,uv+""},lv=Ue(),fv=Math.PI/3,hv=2*Math.PI/3,dv=function(t){var e;return t=(.5-t)*Math.PI,lv.r=255*(e=Math.sin(t))*e,lv.g=255*(e=Math.sin(t+fv))*e,lv.b=255*(e=Math.sin(t+hv))*e,lv+""};function pv(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}var gv=pv(qy("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),_v=pv(qy("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),yv=pv(qy("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),xv=pv(qy("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),vv=function(t){return function(){return t}},mv=Math.abs,bv=Math.atan2,wv=Math.cos,Sv=Math.max,Av=Math.min,Tv=Math.sin,Pv=Math.sqrt,Cv=1e-12,Mv=Math.PI,Lv=Mv/2,Ev=2*Mv;function Vv(t){return t>=1?Lv:t<=-1?-Lv:Math.asin(t)}function Gv(t){return t.innerRadius}function kv(t){return t.outerRadius}function Rv(t){return t.startAngle}function Ov(t){return t.endAngle}function Iv(t){return t&&t.padAngle}function Nv(t,e,n,r,i,a,o){var s=t-n,u=e-r,c=(o?a:-a)/Pv(s*s+u*u),l=c*u,f=-c*s,h=t+l,d=e+f,p=n+l,g=r+f,_=(h+p)/2,y=(d+g)/2,x=p-h,v=g-d,m=x*x+v*v,b=i-a,w=h*g-p*d,S=(v<0?-1:1)*Pv(Sv(0,b*b*m-w*w)),A=(w*v-x*S)/m,T=(-w*x-v*S)/m,P=(w*v+x*S)/m,C=(-w*x+v*S)/m,M=A-_,L=T-y,E=P-_,V=C-y;return M*M+L*L>E*E+V*V&&(A=P,T=C),{cx:A,cy:T,x01:-l,y01:-f,x11:A*(i/b-1),y11:T*(i/b-1)}}var Dv=function(){var t=Gv,e=kv,n=vv(0),r=null,i=Rv,a=Ov,o=Iv,s=null;function u(){var u,c,l,f=+t.apply(this,arguments),h=+e.apply(this,arguments),d=i.apply(this,arguments)-Lv,p=a.apply(this,arguments)-Lv,g=mv(p-d),_=p>d;if(s||(s=u=Ba()),h<f&&(c=h,h=f,f=c),h>Cv)if(g>Ev-Cv)s.moveTo(h*wv(d),h*Tv(d)),s.arc(0,0,h,d,p,!_),f>Cv&&(s.moveTo(f*wv(p),f*Tv(p)),s.arc(0,0,f,p,d,_));else{var y,x,v=d,m=p,b=d,w=p,S=g,A=g,T=o.apply(this,arguments)/2,P=T>Cv&&(r?+r.apply(this,arguments):Pv(f*f+h*h)),C=Av(mv(h-f)/2,+n.apply(this,arguments)),M=C,L=C;if(P>Cv){var E=Vv(P/f*Tv(T)),V=Vv(P/h*Tv(T));(S-=2*E)>Cv?(b+=E*=_?1:-1,w-=E):(S=0,b=w=(d+p)/2),(A-=2*V)>Cv?(v+=V*=_?1:-1,m-=V):(A=0,v=m=(d+p)/2)}var G=h*wv(v),k=h*Tv(v),R=f*wv(w),O=f*Tv(w);if(C>Cv){var I=h*wv(m),N=h*Tv(m),D=f*wv(b),F=f*Tv(b);if(g<Mv){var z=S>Cv?function(t,e,n,r,i,a,o,s){var u=n-t,c=r-e,l=o-i,f=s-a,h=(l*(e-a)-f*(t-i))/(f*u-l*c);return[t+h*u,e+h*c]}(G,k,D,F,I,N,R,O):[R,O],X=G-z[0],B=k-z[1],Y=I-z[0],H=N-z[1],U=1/Tv(((l=(X*Y+B*H)/(Pv(X*X+B*B)*Pv(Y*Y+H*H)))>1?0:l<-1?Mv:Math.acos(l))/2),j=Pv(z[0]*z[0]+z[1]*z[1]);M=Av(C,(f-j)/(U-1)),L=Av(C,(h-j)/(U+1))}}A>Cv?L>Cv?(y=Nv(D,F,G,k,h,L,_),x=Nv(I,N,R,O,h,L,_),s.moveTo(y.cx+y.x01,y.cy+y.y01),L<C?s.arc(y.cx,y.cy,L,bv(y.y01,y.x01),bv(x.y01,x.x01),!_):(s.arc(y.cx,y.cy,L,bv(y.y01,y.x01),bv(y.y11,y.x11),!_),s.arc(0,0,h,bv(y.cy+y.y11,y.cx+y.x11),bv(x.cy+x.y11,x.cx+x.x11),!_),s.arc(x.cx,x.cy,L,bv(x.y11,x.x11),bv(x.y01,x.x01),!_))):(s.moveTo(G,k),s.arc(0,0,h,v,m,!_)):s.moveTo(G,k),f>Cv&&S>Cv?M>Cv?(y=Nv(R,O,I,N,f,-M,_),x=Nv(G,k,D,F,f,-M,_),s.lineTo(y.cx+y.x01,y.cy+y.y01),M<C?s.arc(y.cx,y.cy,M,bv(y.y01,y.x01),bv(x.y01,x.x01),!_):(s.arc(y.cx,y.cy,M,bv(y.y01,y.x01),bv(y.y11,y.x11),!_),s.arc(0,0,f,bv(y.cy+y.y11,y.cx+y.x11),bv(x.cy+x.y11,x.cx+x.x11),_),s.arc(x.cx,x.cy,M,bv(x.y11,x.x11),bv(x.y01,x.x01),!_))):s.arc(0,0,f,w,b,_):s.lineTo(R,O)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +a.apply(this,arguments))/2-Mv/2;return[wv(r)*n,Tv(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:vv(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:vv(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:vv(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:vv(+t),u):r},u.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:vv(+t),u):i},u.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:vv(+t),u):a},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:vv(+t),u):o},u.context=function(t){return arguments.length?(s=null==t?null:t,u):s},u};function Fv(t){this._context=t}Fv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var zv=function(t){return new Fv(t)};function Xv(t){return t[0]}function Bv(t){return t[1]}var Yv=function(){var t=Xv,e=Bv,n=vv(!0),r=null,i=zv,a=null;function o(o){var s,u,c,l=o.length,f=!1;for(null==r&&(a=i(c=Ba())),s=0;s<=l;++s)!(s<l&&n(u=o[s],s,o))===f&&((f=!f)?a.lineStart():a.lineEnd()),f&&a.point(+t(u,s,o),+e(u,s,o));if(c)return a=null,c+""||null}return o.x=function(e){return arguments.length?(t="function"==typeof e?e:vv(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:vv(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:vv(!!t),o):n},o.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),o):r},o},Hv=function(){var t=Xv,e=null,n=vv(0),r=Bv,i=vv(!0),a=null,o=zv,s=null;function u(u){var c,l,f,h,d,p=u.length,g=!1,_=new Array(p),y=new Array(p);for(null==a&&(s=o(d=Ba())),c=0;c<=p;++c){if(!(c<p&&i(h=u[c],c,u))===g)if(g=!g)l=c,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),f=c-1;f>=l;--f)s.point(_[f],y[f]);s.lineEnd(),s.areaEnd()}g&&(_[c]=+t(h,c,u),y[c]=+n(h,c,u),s.point(e?+e(h,c,u):_[c],r?+r(h,c,u):y[c]))}if(d)return s=null,d+""||null}function c(){return Yv().defined(i).curve(o).context(a)}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:vv(+n),e=null,u):t},u.x0=function(e){return arguments.length?(t="function"==typeof e?e:vv(+e),u):t},u.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:vv(+t),u):e},u.y=function(t){return arguments.length?(n="function"==typeof t?t:vv(+t),r=null,u):n},u.y0=function(t){return arguments.length?(n="function"==typeof t?t:vv(+t),u):n},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:vv(+t),u):r},u.lineX0=u.lineY0=function(){return c().x(t).y(n)},u.lineY1=function(){return c().x(t).y(r)},u.lineX1=function(){return c().x(e).y(n)},u.defined=function(t){return arguments.length?(i="function"==typeof t?t:vv(!!t),u):i},u.curve=function(t){return arguments.length?(o=t,null!=a&&(s=o(a)),u):o},u.context=function(t){return arguments.length?(null==t?a=s=null:s=o(a=t),u):a},u},Uv=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},jv=function(t){return t},Wv=function(){var t=jv,e=Uv,n=null,r=vv(0),i=vv(Ev),a=vv(0);function o(o){var s,u,c,l,f,h=o.length,d=0,p=new Array(h),g=new Array(h),_=+r.apply(this,arguments),y=Math.min(Ev,Math.max(-Ev,i.apply(this,arguments)-_)),x=Math.min(Math.abs(y)/h,a.apply(this,arguments)),v=x*(y<0?-1:1);for(s=0;s<h;++s)(f=g[p[s]=s]=+t(o[s],s,o))>0&&(d+=f);for(null!=e?p.sort(function(t,n){return e(g[t],g[n])}):null!=n&&p.sort(function(t,e){return n(o[t],o[e])}),s=0,c=d?(y-h*v)/d:0;s<h;++s,_=l)u=p[s],l=_+((f=g[u])>0?f*c:0)+v,g[u]={data:o[u],index:s,value:f,startAngle:_,endAngle:l,padAngle:x};return g}return o.value=function(e){return arguments.length?(t="function"==typeof e?e:vv(+e),o):t},o.sortValues=function(t){return arguments.length?(e=t,n=null,o):e},o.sort=function(t){return arguments.length?(n=t,e=null,o):n},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:vv(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:vv(+t),o):i},o.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:vv(+t),o):a},o},qv=Zv(zv);function Qv(t){this._curve=t}function Zv(t){function e(e){return new Qv(t(e))}return e._curve=t,e}function $v(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(Zv(t)):e()._curve},t}Qv.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var Kv=function(){return $v(Yv().curve(qv))},Jv=function(){var t=Hv().curve(qv),e=t.curve,n=t.lineX0,r=t.lineX1,i=t.lineY0,a=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return $v(n())},delete t.lineX0,t.lineEndAngle=function(){return $v(r())},delete t.lineX1,t.lineInnerRadius=function(){return $v(i())},delete t.lineY0,t.lineOuterRadius=function(){return $v(a())},delete t.lineY1,t.curve=function(t){return arguments.length?e(Zv(t)):e()._curve},t},tm=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},em=Array.prototype.slice;function nm(t){return t.source}function rm(t){return t.target}function im(t){var e=nm,n=rm,r=Xv,i=Bv,a=null;function o(){var o,s=em.call(arguments),u=e.apply(this,s),c=n.apply(this,s);if(a||(a=o=Ba()),t(a,+r.apply(this,(s[0]=u,s)),+i.apply(this,s),+r.apply(this,(s[0]=c,s)),+i.apply(this,s)),o)return a=null,o+""||null}return o.source=function(t){return arguments.length?(e=t,o):e},o.target=function(t){return arguments.length?(n=t,o):n},o.x=function(t){return arguments.length?(r="function"==typeof t?t:vv(+t),o):r},o.y=function(t){return arguments.length?(i="function"==typeof t?t:vv(+t),o):i},o.context=function(t){return arguments.length?(a=null==t?null:t,o):a},o}function am(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,i,r,i)}function om(t,e,n,r,i){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+i)/2,r,n,r,i)}function sm(t,e,n,r,i){var a=tm(e,n),o=tm(e,n=(n+i)/2),s=tm(r,n),u=tm(r,i);t.moveTo(a[0],a[1]),t.bezierCurveTo(o[0],o[1],s[0],s[1],u[0],u[1])}function um(){return im(am)}function cm(){return im(om)}function lm(){var t=im(sm);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var fm={draw:function(t,e){var n=Math.sqrt(e/Mv);t.moveTo(n,0),t.arc(0,0,n,0,Ev)}},hm={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},dm=Math.sqrt(1/3),pm=2*dm,gm={draw:function(t,e){var n=Math.sqrt(e/pm),r=n*dm;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},_m=Math.sin(Mv/10)/Math.sin(7*Mv/10),ym=Math.sin(Ev/10)*_m,xm=-Math.cos(Ev/10)*_m,vm={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=ym*n,i=xm*n;t.moveTo(0,-n),t.lineTo(r,i);for(var a=1;a<5;++a){var o=Ev*a/5,s=Math.cos(o),u=Math.sin(o);t.lineTo(u*n,-s*n),t.lineTo(s*r-u*i,u*r+s*i)}t.closePath()}},mm={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},bm=Math.sqrt(3),wm={draw:function(t,e){var n=-Math.sqrt(e/(3*bm));t.moveTo(0,2*n),t.lineTo(-bm*n,-n),t.lineTo(bm*n,-n),t.closePath()}},Sm=Math.sqrt(3)/2,Am=1/Math.sqrt(12),Tm=3*(Am/2+1),Pm={draw:function(t,e){var n=Math.sqrt(e/Tm),r=n/2,i=n*Am,a=r,o=n*Am+n,s=-a,u=o;t.moveTo(r,i),t.lineTo(a,o),t.lineTo(s,u),t.lineTo(-.5*r-Sm*i,Sm*r+-.5*i),t.lineTo(-.5*a-Sm*o,Sm*a+-.5*o),t.lineTo(-.5*s-Sm*u,Sm*s+-.5*u),t.lineTo(-.5*r+Sm*i,-.5*i-Sm*r),t.lineTo(-.5*a+Sm*o,-.5*o-Sm*a),t.lineTo(-.5*s+Sm*u,-.5*u-Sm*s),t.closePath()}},Cm=[fm,hm,gm,mm,vm,wm,Pm],Mm=function(){var t=vv(fm),e=vv(64),n=null;function r(){var r;if(n||(n=r=Ba()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:vv(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:vv(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},Lm=function(){};function Em(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Vm(t){this._context=t}Vm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Em(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Em(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Gm=function(t){return new Vm(t)};function km(t){this._context=t}km.prototype={areaStart:Lm,areaEnd:Lm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Em(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Rm=function(t){return new km(t)};function Om(t){this._context=t}Om.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:Em(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var Im=function(t){return new Om(t)};function Nm(t,e){this._basis=new Vm(t),this._beta=e}Nm.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,i=t[0],a=e[0],o=t[n]-i,s=e[n]-a,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*t[u]+(1-this._beta)*(i+r*o),this._beta*e[u]+(1-this._beta)*(a+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var Dm=function t(e){function n(t){return 1===e?new Vm(t):new Nm(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function Fm(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function zm(t,e){this._context=t,this._k=(1-e)/6}zm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Fm(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Fm(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Xm=function t(e){function n(t){return new zm(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Bm(t,e){this._context=t,this._k=(1-e)/6}Bm.prototype={areaStart:Lm,areaEnd:Lm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Fm(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Ym=function t(e){function n(t){return new Bm(t,e)}return n.tension=function(e){return t(+e)},n}(0);function Hm(t,e){this._context=t,this._k=(1-e)/6}Hm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Fm(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Um=function t(e){function n(t){return new Hm(t,e)}return n.tension=function(e){return t(+e)},n}(0);function jm(t,e,n){var r=t._x1,i=t._y1,a=t._x2,o=t._y2;if(t._l01_a>Cv){var s=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*s-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,i=(i*s-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>Cv){var c=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,l=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*c+t._x1*t._l23_2a-e*t._l12_2a)/l,o=(o*c+t._y1*t._l23_2a-n*t._l12_2a)/l}t._context.bezierCurveTo(r,i,a,o,t._x2,t._y2)}function Wm(t,e){this._context=t,this._alpha=e}Wm.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:jm(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var qm=function t(e){function n(t){return e?new Wm(t,e):new zm(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Qm(t,e){this._context=t,this._alpha=e}Qm.prototype={areaStart:Lm,areaEnd:Lm,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:jm(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Zm=function t(e){function n(t){return e?new Qm(t,e):new Bm(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function $m(t,e){this._context=t,this._alpha=e}$m.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:jm(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var Km=function t(e){function n(t){return e?new $m(t,e):new Hm(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function Jm(t){this._context=t}Jm.prototype={areaStart:Lm,areaEnd:Lm,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var tb=function(t){return new Jm(t)};function eb(t){return t<0?-1:1}function nb(t,e,n){var r=t._x1-t._x0,i=e-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),o=(n-t._y1)/(i||r<0&&-0),s=(a*i+o*r)/(r+i);return(eb(a)+eb(o))*Math.min(Math.abs(a),Math.abs(o),.5*Math.abs(s))||0}function rb(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function ib(t,e,n){var r=t._x0,i=t._y0,a=t._x1,o=t._y1,s=(a-r)/3;t._context.bezierCurveTo(r+s,i+s*e,a-s,o-s*n,a,o)}function ab(t){this._context=t}function ob(t){this._context=new sb(t)}function sb(t){this._context=t}function ub(t){return new ab(t)}function cb(t){return new ob(t)}function lb(t){this._context=t}function fb(t){var e,n,r=t.length-1,i=new Array(r),a=new Array(r),o=new Array(r);for(i[0]=0,a[0]=2,o[0]=t[0]+2*t[1],e=1;e<r-1;++e)i[e]=1,a[e]=4,o[e]=4*t[e]+2*t[e+1];for(i[r-1]=2,a[r-1]=7,o[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=i[e]/a[e-1],a[e]-=n,o[e]-=n*o[e-1];for(i[r-1]=o[r-1]/a[r-1],e=r-2;e>=0;--e)i[e]=(o[e]-i[e+1])/a[e];for(a[r-1]=(t[r]+i[r-1])/2,e=0;e<r-1;++e)a[e]=2*t[e+1]-i[e+1];return[i,a]}ab.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:ib(this,this._t0,rb(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,ib(this,rb(this,n=nb(this,t,e)),n);break;default:ib(this,this._t0,n=nb(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(ob.prototype=Object.create(ab.prototype)).point=function(t,e){ab.prototype.point.call(this,e,t)},sb.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,i,a){this._context.bezierCurveTo(e,t,r,n,a,i)}},lb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=fb(t),i=fb(e),a=0,o=1;o<n;++a,++o)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[o],e[o]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var hb=function(t){return new lb(t)};function db(t,e){this._context=t,this._t=e}db.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var pb=function(t){return new db(t,.5)};function gb(t){return new db(t,0)}function _b(t){return new db(t,1)}var yb=function(t,e){if((i=t.length)>1)for(var n,r,i,a=1,o=t[e[0]],s=o.length;a<i;++a)for(r=o,o=t[e[a]],n=0;n<s;++n)o[n][1]+=o[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},xb=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function vb(t,e){return t[e]}var mb=function(){var t=vv([]),e=xb,n=yb,r=vb;function i(i){var a,o,s=t.apply(this,arguments),u=i.length,c=s.length,l=new Array(c);for(a=0;a<c;++a){for(var f,h=s[a],d=l[a]=new Array(u),p=0;p<u;++p)d[p]=f=[0,+r(i[p],h,p,i)],f.data=i[p];d.key=h}for(a=0,o=e(l);a<c;++a)l[o[a]].index=a;return n(l,o),l}return i.keys=function(e){return arguments.length?(t="function"==typeof e?e:vv(em.call(e)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:vv(+t),i):r},i.order=function(t){return arguments.length?(e=null==t?xb:"function"==typeof t?t:vv(em.call(t)),i):e},i.offset=function(t){return arguments.length?(n=null==t?yb:t,i):n},i},bb=function(t,e){if((r=t.length)>0){for(var n,r,i,a=0,o=t[0].length;a<o;++a){for(i=n=0;n<r;++n)i+=t[n][a][1]||0;if(i)for(n=0;n<r;++n)t[n][a][1]/=i}yb(t,e)}},wb=function(t,e){if((s=t.length)>1)for(var n,r,i,a,o,s,u=0,c=t[e[0]].length;u<c;++u)for(a=o=0,n=0;n<s;++n)(i=(r=t[e[n]][u])[1]-r[0])>=0?(r[0]=a,r[1]=a+=i):i<0?(r[1]=o,r[0]=o+=i):r[0]=a},Sb=function(t,e){if((n=t.length)>0){for(var n,r=0,i=t[e[0]],a=i.length;r<a;++r){for(var o=0,s=0;o<n;++o)s+=t[o][r][1]||0;i[r][1]+=i[r][0]=-s/2}yb(t,e)}},Ab=function(t,e){if((i=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,i,a=0,o=1;o<r;++o){for(var s=0,u=0,c=0;s<i;++s){for(var l=t[e[s]],f=l[o][1]||0,h=(f-(l[o-1][1]||0))/2,d=0;d<s;++d){var p=t[e[d]];h+=(p[o][1]||0)-(p[o-1][1]||0)}u+=f,c+=h*f}n[o-1][1]+=n[o-1][0]=a,u&&(a-=c/u)}n[o-1][1]+=n[o-1][0]=a,yb(t,e)}},Tb=function(t){var e=t.map(Pb);return xb(t).sort(function(t,n){return e[t]-e[n]})};function Pb(t){for(var e,n=0,r=-1,i=t.length;++r<i;)(e=+t[r][1])&&(n+=e);return n}var Cb=function(t){return Tb(t).reverse()},Mb=function(t){var e,n,r=t.length,i=t.map(Pb),a=xb(t).sort(function(t,e){return i[e]-i[t]}),o=0,s=0,u=[],c=[];for(e=0;e<r;++e)n=a[e],o<s?(o+=i[n],u.push(n)):(s+=i[n],c.push(n));return c.reverse().concat(u)},Lb=function(t){return xb(t).reverse()},Eb=function(t){return function(){return t}};function Vb(t){return t[0]}function Gb(t){return t[1]}function kb(){this._=null}function Rb(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Ob(t,e){var n=e,r=e.R,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Ib(t,e){var n=e,r=e.L,i=n.U;i?i.L===n?i.L=r:i.R=r:t._=r,r.U=i,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Nb(t){for(;t.L;)t=t.L;return t}kb.prototype={constructor:kb,insert:function(t,e){var n,r,i;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Nb(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(i=r.R)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.R&&(Ob(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ib(this,r)):(i=r.L)&&i.C?(n.C=i.C=!1,r.C=!0,t=r):(t===n.L&&(Ib(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ob(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,i=t.U,a=t.L,o=t.R;if(n=a?o?Nb(o):a:o,i?i.L===t?i.L=n:i.R=n:this._=n,a&&o?(r=n.C,n.C=t.C,n.L=a,a.U=n,n!==o?(i=n.U,n.U=t.U,t=n.R,i.L=t,n.R=o,o.U=n):(n.U=i,i=n,t=n.R)):(r=t.C,t=n),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((e=i.R).C&&(e.C=!1,i.C=!0,Ob(this,i),e=i.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Ib(this,e),e=i.R),e.C=i.C,i.C=e.R.C=!1,Ob(this,i),t=this._;break}}else if((e=i.L).C&&(e.C=!1,i.C=!0,Ib(this,i),e=i.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Ob(this,e),e=i.L),e.C=i.C,i.C=e.L.C=!1,Ib(this,i),t=this._;break}e.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var Db=kb;function Fb(t,e,n,r){var i=[null,null],a=cw.push(i)-1;return i.left=t,i.right=e,n&&Xb(i,t,e,n),r&&Xb(i,e,t,r),sw[t.index].halfedges.push(a),sw[e.index].halfedges.push(a),i}function zb(t,e,n){var r=[e,n];return r.left=t,r}function Xb(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Bb(t,e,n,r,i){var a,o=t[0],s=t[1],u=o[0],c=o[1],l=0,f=1,h=s[0]-u,d=s[1]-c;if(a=e-u,h||!(a>0)){if(a/=h,h<0){if(a<l)return;a<f&&(f=a)}else if(h>0){if(a>f)return;a>l&&(l=a)}if(a=r-u,h||!(a<0)){if(a/=h,h<0){if(a>f)return;a>l&&(l=a)}else if(h>0){if(a<l)return;a<f&&(f=a)}if(a=n-c,d||!(a>0)){if(a/=d,d<0){if(a<l)return;a<f&&(f=a)}else if(d>0){if(a>f)return;a>l&&(l=a)}if(a=i-c,d||!(a<0)){if(a/=d,d<0){if(a>f)return;a>l&&(l=a)}else if(d>0){if(a<l)return;a<f&&(f=a)}return!(l>0||f<1)||(l>0&&(t[0]=[u+l*h,c+l*d]),f<1&&(t[1]=[u+f*h,c+f*d]),!0)}}}}}function Yb(t,e,n,r,i){var a=t[1];if(a)return!0;var o,s,u=t[0],c=t.left,l=t.right,f=c[0],h=c[1],d=l[0],p=l[1],g=(f+d)/2,_=(h+p)/2;if(p===h){if(g<e||g>=r)return;if(f>d){if(u){if(u[1]>=i)return}else u=[g,n];a=[g,i]}else{if(u){if(u[1]<n)return}else u=[g,i];a=[g,n]}}else if(s=_-(o=(f-d)/(p-h))*g,o<-1||o>1)if(f>d){if(u){if(u[1]>=i)return}else u=[(n-s)/o,n];a=[(i-s)/o,i]}else{if(u){if(u[1]<n)return}else u=[(i-s)/o,i];a=[(n-s)/o,n]}else if(h<p){if(u){if(u[0]>=r)return}else u=[e,o*e+s];a=[r,o*r+s]}else{if(u){if(u[0]<e)return}else u=[r,o*r+s];a=[e,o*e+s]}return t[0]=u,t[1]=a,!0}function Hb(t,e){var n=t.site,r=e.left,i=e.right;return n===i&&(i=r,r=n),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(n===r?(r=e[1],i=e[0]):(r=e[0],i=e[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function Ub(t,e){return e[+(e.left!==t.site)]}function jb(t,e){return e[+(e.left===t.site)]}var Wb,qb=[];function Qb(){Rb(this),this.x=this.y=this.arc=this.site=this.cy=null}function Zb(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,i=t.site,a=n.site;if(r!==a){var o=i[0],s=i[1],u=r[0]-o,c=r[1]-s,l=a[0]-o,f=a[1]-s,h=2*(u*f-c*l);if(!(h>=-fw)){var d=u*u+c*c,p=l*l+f*f,g=(f*d-c*p)/h,_=(u*p-l*d)/h,y=qb.pop()||new Qb;y.arc=t,y.site=i,y.x=g+o,y.y=(y.cy=_+s)+Math.sqrt(g*g+_*_),t.circle=y;for(var x=null,v=uw._;v;)if(y.y<v.y||y.y===v.y&&y.x<=v.x){if(!v.L){x=v.P;break}v=v.L}else{if(!v.R){x=v;break}v=v.R}uw.insert(x,y),x||(Wb=y)}}}}function $b(t){var e=t.circle;e&&(e.P||(Wb=e.N),uw.remove(e),qb.push(e),Rb(e),t.circle=null)}var Kb=[];function Jb(){Rb(this),this.edge=this.site=this.circle=null}function tw(t){var e=Kb.pop()||new Jb;return e.site=t,e}function ew(t){$b(t),ow.remove(t),Kb.push(t),Rb(t)}function nw(t){var e=t.circle,n=e.x,r=e.cy,i=[n,r],a=t.P,o=t.N,s=[t];ew(t);for(var u=a;u.circle&&Math.abs(n-u.circle.x)<lw&&Math.abs(r-u.circle.cy)<lw;)a=u.P,s.unshift(u),ew(u),u=a;s.unshift(u),$b(u);for(var c=o;c.circle&&Math.abs(n-c.circle.x)<lw&&Math.abs(r-c.circle.cy)<lw;)o=c.N,s.push(c),ew(c),c=o;s.push(c),$b(c);var l,f=s.length;for(l=1;l<f;++l)c=s[l],u=s[l-1],Xb(c.edge,u.site,c.site,i);u=s[0],(c=s[f-1]).edge=Fb(u.site,c.site,null,i),Zb(u),Zb(c)}function rw(t){for(var e,n,r,i,a=t[0],o=t[1],s=ow._;s;)if((r=iw(s,o)-a)>lw)s=s.L;else{if(!((i=a-aw(s,o))>lw)){r>-lw?(e=s.P,n=s):i>-lw?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){sw[t.index]={site:t,halfedges:[]}}(t);var u=tw(t);if(ow.insert(e,u),e||n){if(e===n)return $b(e),n=tw(e.site),ow.insert(u,n),u.edge=n.edge=Fb(e.site,u.site),Zb(e),void Zb(n);if(n){$b(e),$b(n);var c=e.site,l=c[0],f=c[1],h=t[0]-l,d=t[1]-f,p=n.site,g=p[0]-l,_=p[1]-f,y=2*(h*_-d*g),x=h*h+d*d,v=g*g+_*_,m=[(_*x-d*v)/y+l,(h*v-g*x)/y+f];Xb(n.edge,c,p,m),u.edge=Fb(c,t,null,m),n.edge=Fb(t,p,null,m),Zb(e),Zb(n)}else u.edge=Fb(e.site,u.site)}}function iw(t,e){var n=t.site,r=n[0],i=n[1],a=i-e;if(!a)return r;var o=t.P;if(!o)return-1/0;var s=(n=o.site)[0],u=n[1],c=u-e;if(!c)return s;var l=s-r,f=1/a-1/c,h=l/c;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*c)-u+c/2+i-a/2)))/f+r:(r+s)/2}function aw(t,e){var n=t.N;if(n)return iw(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var ow,sw,uw,cw,lw=1e-6,fw=1e-12;function hw(t,e){return e[1]-t[1]||e[0]-t[0]}function dw(t,e){var n,r,i,a=t.sort(hw).pop();for(cw=[],sw=new Array(t.length),ow=new Db,uw=new Db;;)if(i=Wb,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===n&&a[1]===r||(rw(a),n=a[0],r=a[1]),a=t.pop();else{if(!i)break;nw(i.arc)}if(function(){for(var t,e,n,r,i=0,a=sw.length;i<a;++i)if((t=sw[i])&&(r=(e=t.halfedges).length)){var o=new Array(r),s=new Array(r);for(n=0;n<r;++n)o[n]=n,s[n]=Hb(t,cw[e[n]]);for(o.sort(function(t,e){return s[e]-s[t]}),n=0;n<r;++n)s[n]=e[o[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var o=+e[0][0],s=+e[0][1],u=+e[1][0],c=+e[1][1];!function(t,e,n,r){for(var i,a=cw.length;a--;)Yb(i=cw[a],t,e,n,r)&&Bb(i,t,e,n,r)&&(Math.abs(i[0][0]-i[1][0])>lw||Math.abs(i[0][1]-i[1][1])>lw)||delete cw[a]}(o,s,u,c),function(t,e,n,r){var i,a,o,s,u,c,l,f,h,d,p,g,_=sw.length,y=!0;for(i=0;i<_;++i)if(a=sw[i]){for(o=a.site,s=(u=a.halfedges).length;s--;)cw[u[s]]||u.splice(s,1);for(s=0,c=u.length;s<c;)p=(d=jb(a,cw[u[s]]))[0],g=d[1],f=(l=Ub(a,cw[u[++s%c]]))[0],h=l[1],(Math.abs(p-f)>lw||Math.abs(g-h)>lw)&&(u.splice(s,0,cw.push(zb(o,d,Math.abs(p-t)<lw&&r-g>lw?[t,Math.abs(f-t)<lw?h:r]:Math.abs(g-r)<lw&&n-p>lw?[Math.abs(h-r)<lw?f:n,r]:Math.abs(p-n)<lw&&g-e>lw?[n,Math.abs(f-n)<lw?h:e]:Math.abs(g-e)<lw&&p-t>lw?[Math.abs(h-e)<lw?f:t,e]:null))-1),++c);c&&(y=!1)}if(y){var x,v,m,b=1/0;for(i=0,y=null;i<_;++i)(a=sw[i])&&(m=(x=(o=a.site)[0]-t)*x+(v=o[1]-e)*v)<b&&(b=m,y=a);if(y){var w=[t,e],S=[t,r],A=[n,r],T=[n,e];y.halfedges.push(cw.push(zb(o=y.site,w,S))-1,cw.push(zb(o,S,A))-1,cw.push(zb(o,A,T))-1,cw.push(zb(o,T,w))-1)}}for(i=0;i<_;++i)(a=sw[i])&&(a.halfedges.length||delete sw[i])}(o,s,u,c)}this.edges=cw,this.cells=sw,ow=uw=cw=sw=null}dw.prototype={constructor:dw,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return Ub(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,r){if(a=(i=n.halfedges).length)for(var i,a,o,s,u,c,l=n.site,f=-1,h=e[i[a-1]],d=h.left===l?h.right:h.left;++f<a;)o=d,d=(h=e[i[f]]).left===l?h.right:h.left,o&&d&&r<o.index&&r<d.index&&(u=o,c=d,((s=l)[0]-c[0])*(u[1]-s[1])-(s[0]-u[0])*(c[1]-s[1])<0)&&t.push([l.data,o.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var r,i,a=this,o=a._found||0,s=a.cells.length;!(i=a.cells[o]);)if(++o>=s)return null;var u=t-i.site[0],c=e-i.site[1],l=u*u+c*c;do{i=a.cells[r=o],o=null,i.halfedges.forEach(function(n){var r=a.edges[n],s=r.left;if(s!==i.site&&s||(s=r.right)){var u=t-s[0],c=e-s[1],f=u*u+c*c;f<l&&(l=f,o=s.index)}})}while(null!==o);return a._found=r,null==n||l<=n*n?i.site:null}};var pw=function(){var t=Vb,e=Gb,n=null;function r(r){return new dw(r.map(function(n,i){var a=[Math.round(t(n,i,r)/lw)*lw,Math.round(e(n,i,r)/lw)*lw];return a.index=i,a.data=n,a}),n)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(e){return arguments.length?(t="function"==typeof e?e:Eb(+e),r):t},r.y=function(t){return arguments.length?(e="function"==typeof t?t:Eb(+t),r):e},r.extent=function(t){return arguments.length?(n=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(t){return arguments.length?(n=null==t?null:[[0,0],[+t[0],+t[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},gw=function(t){return function(){return t}};function _w(t,e,n){this.target=t,this.type=e,this.transform=n}function yw(t,e,n){this.k=t,this.x=e,this.y=n}yw.prototype={constructor:yw,scale:function(t){return 1===t?this:new yw(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new yw(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var xw=new yw(1,0,0);function vw(t){return t.__zoom||xw}function mw(){Wt.stopImmediatePropagation()}vw.prototype=yw.prototype;var bw=function(){Wt.preventDefault(),Wt.stopImmediatePropagation()};function ww(){return!Wt.button}function Sw(){var t,e,n=this;return n instanceof SVGElement?(t=(n=n.ownerSVGElement||n).width.baseVal.value,e=n.height.baseVal.value):(t=n.clientWidth,e=n.clientHeight),[[0,0],[t,e]]}function Aw(){return this.__zoom||xw}function Tw(){return-Wt.deltaY*(Wt.deltaMode?120:1)/500}function Pw(){return"ontouchstart"in this}function Cw(t,e,n){var r=t.invertX(e[0][0])-n[0][0],i=t.invertX(e[1][0])-n[1][0],a=t.invertY(e[0][1])-n[0][1],o=t.invertY(e[1][1])-n[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),o>a?(a+o)/2:Math.min(0,a)||Math.max(0,o))}var Mw=function(){var t,e,n=ww,r=Sw,i=Cw,a=Tw,o=Pw,s=[0,1/0],u=[[-1/0,-1/0],[1/0,1/0]],c=250,l=cr,f=[],h=ht("start","zoom","end"),d=500,p=150,g=0;function _(t){t.property("__zoom",Aw).on("wheel.zoom",S).on("mousedown.zoom",A).on("dblclick.zoom",T).filter(o).on("touchstart.zoom",P).on("touchmove.zoom",C).on("touchend.zoom touchcancel.zoom",M).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function y(t,e){return(e=Math.max(s[0],Math.min(s[1],e)))===t.k?t:new yw(e,t.x,t.y)}function x(t,e,n){var r=e[0]-n[0]*t.k,i=e[1]-n[1]*t.k;return r===t.x&&i===t.y?t:new yw(t.k,r,i)}function v(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function m(t,e,n){t.on("start.zoom",function(){b(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){b(this,arguments).end()}).tween("zoom",function(){var t=arguments,i=b(this,t),a=r.apply(this,t),o=n||v(a),s=Math.max(a[1][0]-a[0][0],a[1][1]-a[0][1]),u=this.__zoom,c="function"==typeof e?e.apply(this,t):e,f=l(u.invert(o).concat(s/u.k),c.invert(o).concat(s/c.k));return function(t){if(1===t)t=c;else{var e=f(t),n=s/e[2];t=new yw(n,o[0]-e[0]*n,o[1]-e[1]*n)}i.zoom(null,t)}})}function b(t,e){for(var n,r=0,i=f.length;r<i;++r)if((n=f[r]).that===t)return n;return new w(t,e)}function w(t,e){this.that=t,this.args=e,this.index=-1,this.active=0,this.extent=r.apply(t,e)}function S(){if(n.apply(this,arguments)){var t=b(this,arguments),e=this.__zoom,r=Math.max(s[0],Math.min(s[1],e.k*Math.pow(2,a.apply(this,arguments)))),o=fe(this);if(t.wheel)t.mouse[0][0]===o[0]&&t.mouse[0][1]===o[1]||(t.mouse[1]=e.invert(t.mouse[0]=o)),clearTimeout(t.wheel);else{if(e.k===r)return;t.mouse=[o,e.invert(o)],ni(this),t.start()}bw(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},p),t.zoom("mouse",i(x(y(e,r),t.mouse[0],t.mouse[1]),t.extent,u))}}function A(){if(!e&&n.apply(this,arguments)){var t=b(this,arguments),r=ie(Wt.view).on("mousemove.zoom",function(){if(bw(),!t.moved){var e=Wt.clientX-o,n=Wt.clientY-s;t.moved=e*e+n*n>g}t.zoom("mouse",i(x(t.that.__zoom,t.mouse[0]=fe(t.that),t.mouse[1]),t.extent,u))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),xe(Wt.view,t.moved),bw(),t.end()},!0),a=fe(this),o=Wt.clientX,s=Wt.clientY;ye(Wt.view),mw(),t.mouse=[a,this.__zoom.invert(a)],ni(this),t.start()}}function T(){if(n.apply(this,arguments)){var t=this.__zoom,e=fe(this),a=t.invert(e),o=t.k*(Wt.shiftKey?.5:2),s=i(x(y(t,o),e,a),r.apply(this,arguments),u);bw(),c>0?ie(this).transition().duration(c).call(m,s,e):ie(this).call(_.transform,s)}}function P(){if(n.apply(this,arguments)){var e,r,i,a,o=b(this,arguments),s=Wt.changedTouches,u=s.length;for(mw(),r=0;r<u;++r)i=s[r],a=[a=de(this,s,i.identifier),this.__zoom.invert(a),i.identifier],o.touch0?o.touch1||(o.touch1=a):(o.touch0=a,e=!0);if(t&&(t=clearTimeout(t),!o.touch1))return o.end(),void((a=ie(this).on("dblclick.zoom"))&&a.apply(this,arguments));e&&(t=setTimeout(function(){t=null},d),ni(this),o.start())}}function C(){var e,n,r,a,o=b(this,arguments),s=Wt.changedTouches,c=s.length;for(bw(),t&&(t=clearTimeout(t)),e=0;e<c;++e)n=s[e],r=de(this,s,n.identifier),o.touch0&&o.touch0[2]===n.identifier?o.touch0[0]=r:o.touch1&&o.touch1[2]===n.identifier&&(o.touch1[0]=r);if(n=o.that.__zoom,o.touch1){var l=o.touch0[0],f=o.touch0[1],h=o.touch1[0],d=o.touch1[1],p=(p=h[0]-l[0])*p+(p=h[1]-l[1])*p,g=(g=d[0]-f[0])*g+(g=d[1]-f[1])*g;n=y(n,Math.sqrt(p/g)),r=[(l[0]+h[0])/2,(l[1]+h[1])/2],a=[(f[0]+d[0])/2,(f[1]+d[1])/2]}else{if(!o.touch0)return;r=o.touch0[0],a=o.touch0[1]}o.zoom("touch",i(x(n,r,a),o.extent,u))}function M(){var t,n,r=b(this,arguments),i=Wt.changedTouches,a=i.length;for(mw(),e&&clearTimeout(e),e=setTimeout(function(){e=null},d),t=0;t<a;++t)n=i[t],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return _.transform=function(t,e){var n=t.selection?t.selection():t;n.property("__zoom",Aw),t!==n?m(t,e):n.interrupt().each(function(){b(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()})},_.scaleBy=function(t,e){_.scaleTo(t,function(){return this.__zoom.k*("function"==typeof e?e.apply(this,arguments):e)})},_.scaleTo=function(t,e){_.transform(t,function(){var t=r.apply(this,arguments),n=this.__zoom,a=v(t),o=n.invert(a),s="function"==typeof e?e.apply(this,arguments):e;return i(x(y(n,s),a,o),t,u)})},_.translateBy=function(t,e,n){_.transform(t,function(){return i(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),u)})},_.translateTo=function(t,e,n){_.transform(t,function(){var t=r.apply(this,arguments),a=this.__zoom,o=v(t);return i(xw.translate(o[0],o[1]).scale(a.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,u)})},w.prototype={start:function(){return 1==++this.active&&(this.index=f.push(this)-1,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(f.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Kt(new _w(_,t,this.that.__zoom),h.apply,h,[t,this.that,this.args])}},_.wheelDelta=function(t){return arguments.length?(a="function"==typeof t?t:gw(+t),_):a},_.filter=function(t){return arguments.length?(n="function"==typeof t?t:gw(!!t),_):n},_.touchable=function(t){return arguments.length?(o="function"==typeof t?t:gw(!!t),_):o},_.extent=function(t){return arguments.length?(r="function"==typeof t?t:gw([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),_):r},_.scaleExtent=function(t){return arguments.length?(s[0]=+t[0],s[1]=+t[1],_):[s[0],s[1]]},_.translateExtent=function(t){return arguments.length?(u[0][0]=+t[0][0],u[1][0]=+t[1][0],u[0][1]=+t[0][1],u[1][1]=+t[1][1],_):[[u[0][0],u[0][1]],[u[1][0],u[1][1]]]},_.constrain=function(t){return arguments.length?(i=t,_):i},_.duration=function(t){return arguments.length?(c=+t,_):c},_.interpolate=function(t){return arguments.length?(l=t,_):l},_.on=function(){var t=h.on.apply(h,arguments);return t===h?_:t},_.clickDistance=function(t){return arguments.length?(g=(t=+t)*t,_):Math.sqrt(g)},_};n.d(e,"version",function(){return"5.7.0"}),n.d(e,"bisect",function(){return u}),n.d(e,"bisectRight",function(){return o}),n.d(e,"bisectLeft",function(){return s}),n.d(e,"ascending",function(){return r}),n.d(e,"bisector",function(){return i}),n.d(e,"cross",function(){return f}),n.d(e,"descending",function(){return h}),n.d(e,"deviation",function(){return g}),n.d(e,"extent",function(){return _}),n.d(e,"histogram",function(){return E}),n.d(e,"thresholdFreedmanDiaconis",function(){return G}),n.d(e,"thresholdScott",function(){return k}),n.d(e,"thresholdSturges",function(){return L}),n.d(e,"max",function(){return R}),n.d(e,"mean",function(){return O}),n.d(e,"median",function(){return I}),n.d(e,"merge",function(){return N}),n.d(e,"min",function(){return D}),n.d(e,"pairs",function(){return c}),n.d(e,"permute",function(){return F}),n.d(e,"quantile",function(){return V}),n.d(e,"range",function(){return w}),n.d(e,"scan",function(){return z}),n.d(e,"shuffle",function(){return X}),n.d(e,"sum",function(){return B}),n.d(e,"ticks",function(){return P}),n.d(e,"tickIncrement",function(){return C}),n.d(e,"tickStep",function(){return M}),n.d(e,"transpose",function(){return Y}),n.d(e,"variance",function(){return p}),n.d(e,"zip",function(){return U}),n.d(e,"axisTop",function(){return rt}),n.d(e,"axisRight",function(){return it}),n.d(e,"axisBottom",function(){return at}),n.d(e,"axisLeft",function(){return ot}),n.d(e,"brush",function(){return Pa}),n.d(e,"brushX",function(){return Aa}),n.d(e,"brushY",function(){return Ta}),n.d(e,"brushSelection",function(){return Sa}),n.d(e,"chord",function(){return Ra}),n.d(e,"ribbon",function(){return qa}),n.d(e,"nest",function(){return Ka}),n.d(e,"set",function(){return oo}),n.d(e,"map",function(){return $a}),n.d(e,"keys",function(){return so}),n.d(e,"values",function(){return uo}),n.d(e,"entries",function(){return co}),n.d(e,"color",function(){return Xe}),n.d(e,"rgb",function(){return Ue}),n.d(e,"hsl",function(){return Qe}),n.d(e,"lab",function(){return ln}),n.d(e,"hcl",function(){return xn}),n.d(e,"lch",function(){return yn}),n.d(e,"gray",function(){return cn}),n.d(e,"cubehelix",function(){return Pn}),n.d(e,"contours",function(){return mo}),n.d(e,"contourDensity",function(){return Po}),n.d(e,"dispatch",function(){return ht}),n.d(e,"drag",function(){return Te}),n.d(e,"dragDisable",function(){return ye}),n.d(e,"dragEnable",function(){return xe}),n.d(e,"dsvFormat",function(){return ko}),n.d(e,"csvParse",function(){return Oo}),n.d(e,"csvParseRows",function(){return Io}),n.d(e,"csvFormat",function(){return No}),n.d(e,"csvFormatRows",function(){return Do}),n.d(e,"tsvParse",function(){return zo}),n.d(e,"tsvParseRows",function(){return Xo}),n.d(e,"tsvFormat",function(){return Bo}),n.d(e,"tsvFormatRows",function(){return Yo}),n.d(e,"easeLinear",function(){return fi}),n.d(e,"easeQuad",function(){return pi}),n.d(e,"easeQuadIn",function(){return hi}),n.d(e,"easeQuadOut",function(){return di}),n.d(e,"easeQuadInOut",function(){return pi}),n.d(e,"easeCubic",function(){return yi}),n.d(e,"easeCubicIn",function(){return gi}),n.d(e,"easeCubicOut",function(){return _i}),n.d(e,"easeCubicInOut",function(){return yi}),n.d(e,"easePoly",function(){return mi}),n.d(e,"easePolyIn",function(){return xi}),n.d(e,"easePolyOut",function(){return vi}),n.d(e,"easePolyInOut",function(){return mi}),n.d(e,"easeSin",function(){return Ti}),n.d(e,"easeSinIn",function(){return Si}),n.d(e,"easeSinOut",function(){return Ai}),n.d(e,"easeSinInOut",function(){return Ti}),n.d(e,"easeExp",function(){return Mi}),n.d(e,"easeExpIn",function(){return Pi}),n.d(e,"easeExpOut",function(){return Ci}),n.d(e,"easeExpInOut",function(){return Mi}),n.d(e,"easeCircle",function(){return Vi}),n.d(e,"easeCircleIn",function(){return Li}),n.d(e,"easeCircleOut",function(){return Ei}),n.d(e,"easeCircleInOut",function(){return Vi}),n.d(e,"easeBounce",function(){return Yi}),n.d(e,"easeBounceIn",function(){return Bi}),n.d(e,"easeBounceOut",function(){return Yi}),n.d(e,"easeBounceInOut",function(){return Hi}),n.d(e,"easeBack",function(){return Wi}),n.d(e,"easeBackIn",function(){return Ui}),n.d(e,"easeBackOut",function(){return ji}),n.d(e,"easeBackInOut",function(){return Wi}),n.d(e,"easeElastic",function(){return Zi}),n.d(e,"easeElasticIn",function(){return Qi}),n.d(e,"easeElasticOut",function(){return Zi}),n.d(e,"easeElasticInOut",function(){return $i}),n.d(e,"blob",function(){return Uo}),n.d(e,"buffer",function(){return Wo}),n.d(e,"dsv",function(){return $o}),n.d(e,"csv",function(){return Ko}),n.d(e,"tsv",function(){return Jo}),n.d(e,"image",function(){return ts}),n.d(e,"json",function(){return ns}),n.d(e,"text",function(){return Qo}),n.d(e,"xml",function(){return is}),n.d(e,"html",function(){return as}),n.d(e,"svg",function(){return os}),n.d(e,"forceCenter",function(){return ss}),n.d(e,"forceCollide",function(){return ms}),n.d(e,"forceLink",function(){return Ss}),n.d(e,"forceManyBody",function(){return Ls}),n.d(e,"forceRadial",function(){return Es}),n.d(e,"forceSimulation",function(){return Ms}),n.d(e,"forceX",function(){return Vs}),n.d(e,"forceY",function(){return Gs}),n.d(e,"formatDefaultLocale",function(){return qs}),n.d(e,"format",function(){return zs}),n.d(e,"formatPrefix",function(){return Xs}),n.d(e,"formatLocale",function(){return Ws}),n.d(e,"formatSpecifier",function(){return Is}),n.d(e,"precisionFixed",function(){return Qs}),n.d(e,"precisionPrefix",function(){return Zs}),n.d(e,"precisionRound",function(){return $s}),n.d(e,"geoArea",function(){return Yu}),n.d(e,"geoBounds",function(){return Oc}),n.d(e,"geoCentroid",function(){return Wc}),n.d(e,"geoCircle",function(){return il}),n.d(e,"geoClipAntimeridian",function(){return gl}),n.d(e,"geoClipCircle",function(){return _l}),n.d(e,"geoClipExtent",function(){return Al}),n.d(e,"geoClipRectangle",function(){return ml}),n.d(e,"geoContains",function(){return Bl}),n.d(e,"geoDistance",function(){return kl}),n.d(e,"geoGraticule",function(){return Ul}),n.d(e,"geoGraticule10",function(){return jl}),n.d(e,"geoInterpolate",function(){return $l}),n.d(e,"geoLength",function(){return El}),n.d(e,"geoPath",function(){return Zf}),n.d(e,"geoAlbers",function(){return gh}),n.d(e,"geoAlbersUsa",function(){return _h}),n.d(e,"geoAzimuthalEqualArea",function(){return mh}),n.d(e,"geoAzimuthalEqualAreaRaw",function(){return vh}),n.d(e,"geoAzimuthalEquidistant",function(){return wh}),n.d(e,"geoAzimuthalEquidistantRaw",function(){return bh}),n.d(e,"geoConicConformal",function(){return Mh}),n.d(e,"geoConicConformalRaw",function(){return Ch}),n.d(e,"geoConicEqualArea",function(){return ph}),n.d(e,"geoConicEqualAreaRaw",function(){return dh}),n.d(e,"geoConicEquidistant",function(){return Gh}),n.d(e,"geoConicEquidistantRaw",function(){return Vh}),n.d(e,"geoEqualEarth",function(){return Fh}),n.d(e,"geoEqualEarthRaw",function(){return Dh}),n.d(e,"geoEquirectangular",function(){return Eh}),n.d(e,"geoEquirectangularRaw",function(){return Lh}),n.d(e,"geoGnomonic",function(){return Xh}),n.d(e,"geoGnomonicRaw",function(){return zh}),n.d(e,"geoIdentity",function(){return Yh}),n.d(e,"geoProjection",function(){return lh}),n.d(e,"geoProjectionMutator",function(){return fh}),n.d(e,"geoMercator",function(){return Ah}),n.d(e,"geoMercatorRaw",function(){return Sh}),n.d(e,"geoNaturalEarth1",function(){return Uh}),n.d(e,"geoNaturalEarth1Raw",function(){return Hh}),n.d(e,"geoOrthographic",function(){return Wh}),n.d(e,"geoOrthographicRaw",function(){return jh}),n.d(e,"geoStereographic",function(){return Qh}),n.d(e,"geoStereographicRaw",function(){return qh}),n.d(e,"geoTransverseMercator",function(){return $h}),n.d(e,"geoTransverseMercatorRaw",function(){return Zh}),n.d(e,"geoRotation",function(){return el}),n.d(e,"geoStream",function(){return Ou}),n.d(e,"geoTransform",function(){return $f}),n.d(e,"cluster",function(){return ed}),n.d(e,"hierarchy",function(){return rd}),n.d(e,"pack",function(){return Cd}),n.d(e,"packSiblings",function(){return wd}),n.d(e,"packEnclose",function(){return cd}),n.d(e,"partition",function(){return kd}),n.d(e,"stratify",function(){return Fd}),n.d(e,"tree",function(){return jd}),n.d(e,"treemap",function(){return $d}),n.d(e,"treemapBinary",function(){return Kd}),n.d(e,"treemapDice",function(){return Gd}),n.d(e,"treemapSlice",function(){return Wd}),n.d(e,"treemapSliceDice",function(){return Jd}),n.d(e,"treemapSquarify",function(){return Zd}),n.d(e,"treemapResquarify",function(){return tp}),n.d(e,"interpolate",function(){return $n}),n.d(e,"interpolateArray",function(){return zn}),n.d(e,"interpolateBasis",function(){return Ln}),n.d(e,"interpolateBasisClosed",function(){return En}),n.d(e,"interpolateDate",function(){return Xn}),n.d(e,"interpolateDiscrete",function(){return Kn}),n.d(e,"interpolateHue",function(){return Jn}),n.d(e,"interpolateNumber",function(){return Bn}),n.d(e,"interpolateObject",function(){return Yn}),n.d(e,"interpolateRound",function(){return tr}),n.d(e,"interpolateString",function(){return Zn}),n.d(e,"interpolateTransformCss",function(){return ar}),n.d(e,"interpolateTransformSvg",function(){return or}),n.d(e,"interpolateZoom",function(){return cr}),n.d(e,"interpolateRgb",function(){return In}),n.d(e,"interpolateRgbBasis",function(){return Dn}),n.d(e,"interpolateRgbBasisClosed",function(){return Fn}),n.d(e,"interpolateHsl",function(){return fr}),n.d(e,"interpolateHslLong",function(){return hr}),n.d(e,"interpolateLab",function(){return dr}),n.d(e,"interpolateHcl",function(){return gr}),n.d(e,"interpolateHclLong",function(){return _r}),n.d(e,"interpolateCubehelix",function(){return xr}),n.d(e,"interpolateCubehelixLong",function(){return vr}),n.d(e,"piecewise",function(){return mr}),n.d(e,"quantize",function(){return Sr}),n.d(e,"path",function(){return Ba}),n.d(e,"polygonArea",function(){return ep}),n.d(e,"polygonCentroid",function(){return np}),n.d(e,"polygonHull",function(){return op}),n.d(e,"polygonContains",function(){return sp}),n.d(e,"polygonLength",function(){return up}),n.d(e,"quadtree",function(){return ps}),n.d(e,"randomUniform",function(){return lp}),n.d(e,"randomNormal",function(){return fp}),n.d(e,"randomLogNormal",function(){return hp}),n.d(e,"randomBates",function(){return pp}),n.d(e,"randomIrwinHall",function(){return dp}),n.d(e,"randomExponential",function(){return gp}),n.d(e,"scaleBand",function(){return bp}),n.d(e,"scalePoint",function(){return wp}),n.d(e,"scaleIdentity",function(){return Rp}),n.d(e,"scaleLinear",function(){return kp}),n.d(e,"scaleLog",function(){return Bp}),n.d(e,"scaleOrdinal",function(){return mp}),n.d(e,"scaleImplicit",function(){return vp}),n.d(e,"scalePow",function(){return Hp}),n.d(e,"scaleSqrt",function(){return Up}),n.d(e,"scaleQuantile",function(){return jp}),n.d(e,"scaleQuantize",function(){return Wp}),n.d(e,"scaleThreshold",function(){return qp}),n.d(e,"scaleTime",function(){return Hy}),n.d(e,"scaleUtc",function(){return Uy}),n.d(e,"scaleSequential",function(){return jy}),n.d(e,"scaleDiverging",function(){return Wy}),n.d(e,"schemeCategory10",function(){return Qy}),n.d(e,"schemeAccent",function(){return Zy}),n.d(e,"schemeDark2",function(){return $y}),n.d(e,"schemePaired",function(){return Ky}),n.d(e,"schemePastel1",function(){return Jy}),n.d(e,"schemePastel2",function(){return tx}),n.d(e,"schemeSet1",function(){return ex}),n.d(e,"schemeSet2",function(){return nx}),n.d(e,"schemeSet3",function(){return rx}),n.d(e,"interpolateBrBG",function(){return ox}),n.d(e,"schemeBrBG",function(){return ax}),n.d(e,"interpolatePRGn",function(){return ux}),n.d(e,"schemePRGn",function(){return sx}),n.d(e,"interpolatePiYG",function(){return lx}),n.d(e,"schemePiYG",function(){return cx}),n.d(e,"interpolatePuOr",function(){return hx}),n.d(e,"schemePuOr",function(){return fx}),n.d(e,"interpolateRdBu",function(){return px}),n.d(e,"schemeRdBu",function(){return dx}),n.d(e,"interpolateRdGy",function(){return _x}),n.d(e,"schemeRdGy",function(){return gx}),n.d(e,"interpolateRdYlBu",function(){return xx}),n.d(e,"schemeRdYlBu",function(){return yx}),n.d(e,"interpolateRdYlGn",function(){return mx}),n.d(e,"schemeRdYlGn",function(){return vx}),n.d(e,"interpolateSpectral",function(){return wx}),n.d(e,"schemeSpectral",function(){return bx}),n.d(e,"interpolateBuGn",function(){return Ax}),n.d(e,"schemeBuGn",function(){return Sx}),n.d(e,"interpolateBuPu",function(){return Px}),n.d(e,"schemeBuPu",function(){return Tx}),n.d(e,"interpolateGnBu",function(){return Mx}),n.d(e,"schemeGnBu",function(){return Cx}),n.d(e,"interpolateOrRd",function(){return Ex}),n.d(e,"schemeOrRd",function(){return Lx}),n.d(e,"interpolatePuBuGn",function(){return Gx}),n.d(e,"schemePuBuGn",function(){return Vx}),n.d(e,"interpolatePuBu",function(){return Rx}),n.d(e,"schemePuBu",function(){return kx}),n.d(e,"interpolatePuRd",function(){return Ix}),n.d(e,"schemePuRd",function(){return Ox}),n.d(e,"interpolateRdPu",function(){return Dx}),n.d(e,"schemeRdPu",function(){return Nx}),n.d(e,"interpolateYlGnBu",function(){return zx}),n.d(e,"schemeYlGnBu",function(){return Fx}),n.d(e,"interpolateYlGn",function(){return Bx}),n.d(e,"schemeYlGn",function(){return Xx}),n.d(e,"interpolateYlOrBr",function(){return Hx}),n.d(e,"schemeYlOrBr",function(){return Yx}),n.d(e,"interpolateYlOrRd",function(){return jx}),n.d(e,"schemeYlOrRd",function(){return Ux}),n.d(e,"interpolateBlues",function(){return qx}),n.d(e,"schemeBlues",function(){return Wx}),n.d(e,"interpolateGreens",function(){return Zx}),n.d(e,"schemeGreens",function(){return Qx}),n.d(e,"interpolateGreys",function(){return Kx}),n.d(e,"schemeGreys",function(){return $x}),n.d(e,"interpolatePurples",function(){return tv}),n.d(e,"schemePurples",function(){return Jx}),n.d(e,"interpolateReds",function(){return nv}),n.d(e,"schemeReds",function(){return ev}),n.d(e,"interpolateOranges",function(){return iv}),n.d(e,"schemeOranges",function(){return rv}),n.d(e,"interpolateCubehelixDefault",function(){return av}),n.d(e,"interpolateRainbow",function(){return cv}),n.d(e,"interpolateWarm",function(){return ov}),n.d(e,"interpolateCool",function(){return sv}),n.d(e,"interpolateSinebow",function(){return dv}),n.d(e,"interpolateViridis",function(){return gv}),n.d(e,"interpolateMagma",function(){return _v}),n.d(e,"interpolateInferno",function(){return yv}),n.d(e,"interpolatePlasma",function(){return xv}),n.d(e,"create",function(){return ae}),n.d(e,"creator",function(){return _t}),n.d(e,"local",function(){return se}),n.d(e,"matcher",function(){return At}),n.d(e,"mouse",function(){return fe}),n.d(e,"namespace",function(){return gt}),n.d(e,"namespaces",function(){return pt}),n.d(e,"clientPoint",function(){return le}),n.d(e,"select",function(){return ie}),n.d(e,"selectAll",function(){return he}),n.d(e,"selection",function(){return re}),n.d(e,"selector",function(){return xt}),n.d(e,"selectorAll",function(){return mt}),n.d(e,"style",function(){return Gt}),n.d(e,"touch",function(){return de}),n.d(e,"touches",function(){return pe}),n.d(e,"window",function(){return Vt}),n.d(e,"event",function(){return Wt}),n.d(e,"customEvent",function(){return Kt}),n.d(e,"arc",function(){return Dv}),n.d(e,"area",function(){return Hv}),n.d(e,"line",function(){return Yv}),n.d(e,"pie",function(){return Wv}),n.d(e,"areaRadial",function(){return Jv}),n.d(e,"radialArea",function(){return Jv}),n.d(e,"lineRadial",function(){return Kv}),n.d(e,"radialLine",function(){return Kv}),n.d(e,"pointRadial",function(){return tm}),n.d(e,"linkHorizontal",function(){return um}),n.d(e,"linkVertical",function(){return cm}),n.d(e,"linkRadial",function(){return lm}),n.d(e,"symbol",function(){return Mm}),n.d(e,"symbols",function(){return Cm}),n.d(e,"symbolCircle",function(){return fm}),n.d(e,"symbolCross",function(){return hm}),n.d(e,"symbolDiamond",function(){return gm}),n.d(e,"symbolSquare",function(){return mm}),n.d(e,"symbolStar",function(){return vm}),n.d(e,"symbolTriangle",function(){return wm}),n.d(e,"symbolWye",function(){return Pm}),n.d(e,"curveBasisClosed",function(){return Rm}),n.d(e,"curveBasisOpen",function(){return Im}),n.d(e,"curveBasis",function(){return Gm}),n.d(e,"curveBundle",function(){return Dm}),n.d(e,"curveCardinalClosed",function(){return Ym}),n.d(e,"curveCardinalOpen",function(){return Um}),n.d(e,"curveCardinal",function(){return Xm}),n.d(e,"curveCatmullRomClosed",function(){return Zm}),n.d(e,"curveCatmullRomOpen",function(){return Km}),n.d(e,"curveCatmullRom",function(){return qm}),n.d(e,"curveLinearClosed",function(){return tb}),n.d(e,"curveLinear",function(){return zv}),n.d(e,"curveMonotoneX",function(){return ub}),n.d(e,"curveMonotoneY",function(){return cb}),n.d(e,"curveNatural",function(){return hb}),n.d(e,"curveStep",function(){return pb}),n.d(e,"curveStepAfter",function(){return _b}),n.d(e,"curveStepBefore",function(){return gb}),n.d(e,"stack",function(){return mb}),n.d(e,"stackOffsetExpand",function(){return bb}),n.d(e,"stackOffsetDiverging",function(){return wb}),n.d(e,"stackOffsetNone",function(){return yb}),n.d(e,"stackOffsetSilhouette",function(){return Sb}),n.d(e,"stackOffsetWiggle",function(){return Ab}),n.d(e,"stackOrderAscending",function(){return Tb}),n.d(e,"stackOrderDescending",function(){return Cb}),n.d(e,"stackOrderInsideOut",function(){return Mb}),n.d(e,"stackOrderNone",function(){return xb}),n.d(e,"stackOrderReverse",function(){return Lb}),n.d(e,"timeInterval",function(){return $p}),n.d(e,"timeMillisecond",function(){return Jp}),n.d(e,"timeMilliseconds",function(){return tg}),n.d(e,"utcMillisecond",function(){return Jp}),n.d(e,"utcMilliseconds",function(){return tg}),n.d(e,"timeSecond",function(){return ig}),n.d(e,"timeSeconds",function(){return ag}),n.d(e,"utcSecond",function(){return ig}),n.d(e,"utcSeconds",function(){return ag}),n.d(e,"timeMinute",function(){return sg}),n.d(e,"timeMinutes",function(){return ug}),n.d(e,"timeHour",function(){return lg}),n.d(e,"timeHours",function(){return fg}),n.d(e,"timeDay",function(){return dg}),n.d(e,"timeDays",function(){return pg}),n.d(e,"timeWeek",function(){return _g}),n.d(e,"timeWeeks",function(){return Sg}),n.d(e,"timeSunday",function(){return _g}),n.d(e,"timeSundays",function(){return Sg}),n.d(e,"timeMonday",function(){return yg}),n.d(e,"timeMondays",function(){return Ag}),n.d(e,"timeTuesday",function(){return xg}),n.d(e,"timeTuesdays",function(){return Tg}),n.d(e,"timeWednesday",function(){return vg}),n.d(e,"timeWednesdays",function(){return Pg}),n.d(e,"timeThursday",function(){return mg}),n.d(e,"timeThursdays",function(){return Cg}),n.d(e,"timeFriday",function(){return bg}),n.d(e,"timeFridays",function(){return Mg}),n.d(e,"timeSaturday",function(){return wg}),n.d(e,"timeSaturdays",function(){return Lg}),n.d(e,"timeMonth",function(){return Vg}),n.d(e,"timeMonths",function(){return Gg}),n.d(e,"timeYear",function(){return Rg}),n.d(e,"timeYears",function(){return Og}),n.d(e,"utcMinute",function(){return Ng}),n.d(e,"utcMinutes",function(){return Dg}),n.d(e,"utcHour",function(){return zg}),n.d(e,"utcHours",function(){return Xg}),n.d(e,"utcDay",function(){return Yg}),n.d(e,"utcDays",function(){return Hg}),n.d(e,"utcWeek",function(){return jg}),n.d(e,"utcWeeks",function(){return Jg}),n.d(e,"utcSunday",function(){return jg}),n.d(e,"utcSundays",function(){return Jg}),n.d(e,"utcMonday",function(){return Wg}),n.d(e,"utcMondays",function(){return t_}),n.d(e,"utcTuesday",function(){return qg}),n.d(e,"utcTuesdays",function(){return e_}),n.d(e,"utcWednesday",function(){return Qg}),n.d(e,"utcWednesdays",function(){return n_}),n.d(e,"utcThursday",function(){return Zg}),n.d(e,"utcThursdays",function(){return r_}),n.d(e,"utcFriday",function(){return $g}),n.d(e,"utcFridays",function(){return i_}),n.d(e,"utcSaturday",function(){return Kg}),n.d(e,"utcSaturdays",function(){return a_}),n.d(e,"utcMonth",function(){return s_}),n.d(e,"utcMonths",function(){return u_}),n.d(e,"utcYear",function(){return l_}),n.d(e,"utcYears",function(){return f_}),n.d(e,"timeFormatDefaultLocale",function(){return Vy}),n.d(e,"timeFormat",function(){return y_}),n.d(e,"timeParse",function(){return x_}),n.d(e,"utcFormat",function(){return v_}),n.d(e,"utcParse",function(){return m_}),n.d(e,"timeFormatLocale",function(){return g_}),n.d(e,"isoFormat",function(){return Gy}),n.d(e,"isoParse",function(){return ky}),n.d(e,"now",function(){return kr}),n.d(e,"timer",function(){return Ir}),n.d(e,"timerFlush",function(){return Nr}),n.d(e,"timeout",function(){return Xr}),n.d(e,"interval",function(){return Br}),n.d(e,"transition",function(){return ui}),n.d(e,"active",function(){return ea}),n.d(e,"interrupt",function(){return ni}),n.d(e,"voronoi",function(){return pw}),n.d(e,"zoom",function(){return Mw}),n.d(e,"zoomTransform",function(){return vw}),n.d(e,"zoomIdentity",function(){return xw})},16:function(t,e,n){
/* @license C3.js v0.6.12 | (c) C3 Team and other contributors | http://c3js.org/ */
t.exports=function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t){var e=this;e.d3=window.d3?window.d3:n(15),e.api=t,e.config=e.getDefaultConfig(),e.data={},e.cache={},e.axes={}}function r(t){var n=this.internal=new e(this);n.loadConfig(t),n.beforeInit(t),n.init(),n.afterInit(t),function t(e,n,r){Object.keys(e).forEach(function(i){n[i]=e[i].bind(r),Object.keys(e[i]).length>0&&t(e[i],n[i],r)})}(r.prototype,this,this)}function i(t,e){this.component=t,this.params=e||{},this.d3=t.d3,this.scale=this.d3.scaleLinear(),this.range,this.orient="bottom",this.innerTickSize=6,this.outerTickSize=this.params.withOuterTick?6:0,this.tickPadding=3,this.tickValues=null,this.tickFormat,this.tickArguments,this.tickOffset=0,this.tickCulling=!0,this.tickCentered,this.tickTextCharSize,this.tickTextRotate=this.params.tickTextRotate,this.tickLength,this.axis=this.generateAxis()}i.prototype.axisX=function(t,e,n){t.attr("transform",function(t){return"translate("+Math.ceil(e(t)+n)+", 0)"})},i.prototype.axisY=function(t,e){t.attr("transform",function(t){return"translate(0,"+Math.ceil(e(t))+")"})},i.prototype.scaleExtent=function(t){var e=t[0],n=t[t.length-1];return e<n?[e,n]:[n,e]},i.prototype.generateTicks=function(t){var e,n,r=[];if(t.ticks)return t.ticks.apply(t,this.tickArguments);for(n=t.domain(),e=Math.ceil(n[0]);e<n[1];e++)r.push(e);return r.length>0&&r[0]>0&&r.unshift(r[0]-(r[1]-r[0])),r},i.prototype.copyScale=function(){var t,e=this.scale.copy();return this.params.isCategory&&(t=this.scale.domain(),e.domain([t[0],t[1]-1])),e},i.prototype.textFormatted=function(t){var e=this.tickFormat?this.tickFormat(t):t;return void 0!==e?e:""},i.prototype.updateRange=function(){return this.range=this.scale.rangeExtent?this.scale.rangeExtent():this.scaleExtent(this.scale.range()),this.range},i.prototype.updateTickTextCharSize=function(t){var e=this;if(e.tickTextCharSize)return e.tickTextCharSize;var n={h:11.5,w:5.5};return t.select("text").text(function(t){return e.textFormatted(t)}).each(function(t){var r=this.getBoundingClientRect(),i=e.textFormatted(t),a=r.height,o=i?r.width/i.length:void 0;a&&o&&(n.h=a,n.w=o)}).text(""),e.tickTextCharSize=n,n},i.prototype.isVertical=function(){return"left"===this.orient||"right"===this.orient},i.prototype.tspanData=function(t,e,n){var r=this.params.tickMultiline?this.splitTickText(t,n):[].concat(this.textFormatted(t));return this.params.tickMultiline&&this.params.tickMultilineMax>0&&(r=this.ellipsify(r,this.params.tickMultilineMax)),r.map(function(t){return{index:e,splitted:t,length:r.length}})},i.prototype.splitTickText=function(t,e){var n,r,i,a=this,o=a.textFormatted(t),s=a.params.tickWidth;return"[object Array]"===Object.prototype.toString.call(o)?o:((!s||s<=0)&&(s=a.isVertical()?95:a.params.isCategory?Math.ceil(e(1)-e(0))-12:110),function t(e,o){r=void 0;for(var u=1;u<o.length;u++)if(" "===o.charAt(u)&&(r=u),n=o.substr(0,u+1),i=a.tickTextCharSize.w*n.length,s<i)return t(e.concat(o.substr(0,r||u)),o.slice(r?r+1:u));return e.concat(o)}([],o+""))},i.prototype.ellipsify=function(t,e){if(t.length<=e)return t;for(var n=t.slice(0,e),r=3,i=e-1;i>=0;i--){var a=n[i].length;if(n[i]=n[i].substr(0,a-r).padEnd(a,"."),(r-=a)<=0)break}return n},i.prototype.updateTickLength=function(){this.tickLength=Math.max(this.innerTickSize,0)+this.tickPadding},i.prototype.lineY2=function(t){var e=this.scale(t)+(this.tickCentered?0:this.tickOffset);return this.range[0]<e&&e<this.range[1]?this.innerTickSize:0},i.prototype.textY=function(){var t=this.tickTextRotate;return t?11.5-t/15*2.5*(t>0?1:-1):this.tickLength},i.prototype.textTransform=function(){var t=this.tickTextRotate;return t?"rotate("+t+")":""},i.prototype.textTextAnchor=function(){var t=this.tickTextRotate;return t?t>0?"start":"end":"middle"},i.prototype.tspanDx=function(){var t=this.tickTextRotate;return t?8*Math.sin(Math.PI*(t/180)):0},i.prototype.tspanDy=function(t,e){var n=this.tickTextCharSize.h;return 0===e&&(n=this.isVertical()?-((t.length-1)*(this.tickTextCharSize.h/2)-3):".71em"),n},i.prototype.generateAxis=function(){var t=this,e=t.d3,n=t.params;function r(i,a){var o;return i.each(function(){var i,s,u,c=r.g=e.select(this),l=this.__chart__||t.scale,f=this.__chart__=t.copyScale(),h=t.tickValues?t.tickValues:t.generateTicks(f),d=c.selectAll(".tick").data(h,f),p=d.enter().insert("g",".domain").attr("class","tick").style("opacity",1e-6),g=d.exit().remove(),_=d.merge(p);n.isCategory?(t.tickOffset=Math.ceil((f(1)-f(0))/2),s=t.tickCentered?0:t.tickOffset,u=t.tickCentered?t.tickOffset:0):t.tickOffset=s=0,t.updateRange(),t.updateTickLength(),t.updateTickTextCharSize(c.select(".tick"));var y=_.select("line").merge(p.append("line")),x=_.select("text").merge(p.append("text")),v=_.selectAll("text").selectAll("tspan").data(function(e,n){return t.tspanData(e,n,f)}),m=v.enter().append("tspan"),b=m.merge(v).text(function(t){return t.splitted});v.exit().remove();var w=c.selectAll(".domain").data([0]),S=w.enter().append("path").merge(w).attr("class","domain");switch(t.orient){case"bottom":i=t.axisX,y.attr("x1",s).attr("x2",s).attr("y2",function(e,n){return t.lineY2(e,n)}),x.attr("x",0).attr("y",function(e,n){return t.textY(e,n)}).attr("transform",function(e,n){return t.textTransform(e,n)}).style("text-anchor",function(e,n){return t.textTextAnchor(e,n)}),b.attr("x",0).attr("dy",function(e,n){return t.tspanDy(e,n)}).attr("dx",function(e,n){return t.tspanDx(e,n)}),S.attr("d","M"+t.range[0]+","+t.outerTickSize+"V0H"+t.range[1]+"V"+t.outerTickSize);break;case"top":i=t.axisX,y.attr("x1",s).attr("x2",s).attr("y2",function(e,n){return-1*t.lineY2(e,n)}),x.attr("x",0).attr("y",function(e,r){return-1*t.textY(e,r)-(n.isCategory?2:t.tickLength-2)}).attr("transform",function(e,n){return t.textTransform(e,n)}).style("text-anchor",function(e,n){return t.textTextAnchor(e,n)}),b.attr("x",0).attr("dy",function(e,n){return t.tspanDy(e,n)}).attr("dx",function(e,n){return t.tspanDx(e,n)}),S.attr("d","M"+t.range[0]+","+-t.outerTickSize+"V0H"+t.range[1]+"V"+-t.outerTickSize);break;case"left":i=t.axisY,y.attr("x2",-t.innerTickSize).attr("y1",u).attr("y2",u),x.attr("x",-t.tickLength).attr("y",t.tickOffset).style("text-anchor","end"),b.attr("x",-t.tickLength).attr("dy",function(e,n){return t.tspanDy(e,n)}),S.attr("d","M"+-t.outerTickSize+","+t.range[0]+"H0V"+t.range[1]+"H"+-t.outerTickSize);break;case"right":i=t.axisY,y.attr("x2",t.innerTickSize).attr("y1",u).attr("y2",u),x.attr("x",t.tickLength).attr("y",t.tickOffset).style("text-anchor","start"),b.attr("x",t.tickLength).attr("dy",function(e,n){return t.tspanDy(e,n)}),S.attr("d","M"+t.outerTickSize+","+t.range[0]+"H0V"+t.range[1]+"H"+t.outerTickSize)}if(f.rangeBand){var A=f,T=A.rangeBand()/2;l=f=function(t){return A(t)+T}}else l.rangeBand?l=f:g.call(i,f,t.tickOffset);p.call(i,l,t.tickOffset),o=(a?_.transition(a):_).style("opacity",1).call(i,f,t.tickOffset)}),o}return r.scale=function(e){return arguments.length?(t.scale=e,r):t.scale},r.orient=function(e){return arguments.length?(t.orient=e in{top:1,right:1,bottom:1,left:1}?e+"":"bottom",r):t.orient},r.tickFormat=function(e){return arguments.length?(t.tickFormat=e,r):t.tickFormat},r.tickCentered=function(e){return arguments.length?(t.tickCentered=e,r):t.tickCentered},r.tickOffset=function(){return t.tickOffset},r.tickInterval=function(){var e,i;return n.isCategory?e=2*t.tickOffset:(i=r.g.select("path.domain").node().getTotalLength()-2*t.outerTickSize,e=i/r.g.selectAll("line").size()),e===1/0?0:e},r.ticks=function(){return arguments.length?(t.tickArguments=arguments,r):t.tickArguments},r.tickCulling=function(e){return arguments.length?(t.tickCulling=e,r):t.tickCulling},r.tickValues=function(e){if("function"==typeof e)t.tickValues=function(){return e(t.scale.domain())};else{if(!arguments.length)return t.tickValues;t.tickValues=e}return r},r};var a={target:"c3-target",chart:"c3-chart",chartLine:"c3-chart-line",chartLines:"c3-chart-lines",chartBar:"c3-chart-bar",chartBars:"c3-chart-bars",chartText:"c3-chart-text",chartTexts:"c3-chart-texts",chartArc:"c3-chart-arc",chartArcs:"c3-chart-arcs",chartArcsTitle:"c3-chart-arcs-title",chartArcsBackground:"c3-chart-arcs-background",chartArcsGaugeUnit:"c3-chart-arcs-gauge-unit",chartArcsGaugeMax:"c3-chart-arcs-gauge-max",chartArcsGaugeMin:"c3-chart-arcs-gauge-min",selectedCircle:"c3-selected-circle",selectedCircles:"c3-selected-circles",eventRect:"c3-event-rect",eventRects:"c3-event-rects",eventRectsSingle:"c3-event-rects-single",eventRectsMultiple:"c3-event-rects-multiple",zoomRect:"c3-zoom-rect",brush:"c3-brush",dragZoom:"c3-drag-zoom",focused:"c3-focused",defocused:"c3-defocused",region:"c3-region",regions:"c3-regions",title:"c3-title",tooltipContainer:"c3-tooltip-container",tooltip:"c3-tooltip",tooltipName:"c3-tooltip-name",shape:"c3-shape",shapes:"c3-shapes",line:"c3-line",lines:"c3-lines",bar:"c3-bar",bars:"c3-bars",circle:"c3-circle",circles:"c3-circles",arc:"c3-arc",arcLabelLine:"c3-arc-label-line",arcs:"c3-arcs",area:"c3-area",areas:"c3-areas",empty:"c3-empty",text:"c3-text",texts:"c3-texts",gaugeValue:"c3-gauge-value",grid:"c3-grid",gridLines:"c3-grid-lines",xgrid:"c3-xgrid",xgrids:"c3-xgrids",xgridLine:"c3-xgrid-line",xgridLines:"c3-xgrid-lines",xgridFocus:"c3-xgrid-focus",ygrid:"c3-ygrid",ygrids:"c3-ygrids",ygridLine:"c3-ygrid-line",ygridLines:"c3-ygrid-lines",axis:"c3-axis",axisX:"c3-axis-x",axisXLabel:"c3-axis-x-label",axisY:"c3-axis-y",axisYLabel:"c3-axis-y-label",axisY2:"c3-axis-y2",axisY2Label:"c3-axis-y2-label",legendBackground:"c3-legend-background",legendItem:"c3-legend-item",legendItemEvent:"c3-legend-item-event",legendItemTile:"c3-legend-item-tile",legendItemHidden:"c3-legend-item-hidden",legendItemFocused:"c3-legend-item-focused",dragarea:"c3-dragarea",EXPANDED:"_expanded_",SELECTED:"_selected_",INCLUDED:"_included_"},o=function(t){return Math.ceil(t)+.5},s=function(t){return 10*Math.ceil(t/10)},u=function(t){return t[1]-t[0]},c=function(t,e,n){return h(t[e])?t[e]:n},l=function(t){var e=t.getBoundingClientRect(),n=[t.pathSegList.getItem(0),t.pathSegList.getItem(1)],r=n[0].x,i=Math.min(n[0].y,n[1].y);return{x:r,y:i,width:e.width,height:e.height}},f=function(t){return Array.isArray(t)},h=function(t){return void 0!==t},d=function(e){return null==e||g(e)&&0===e.length||"object"===t(e)&&0===Object.keys(e).length},p=function(t){return"function"==typeof t},g=function(t){return"string"==typeof t},_=function(t){return void 0===t},y=function(t){return t||0===t},x=function(t){return!d(t)},v=function(t){return"string"==typeof t?t.replace(/</g,"&lt;").replace(/>/g,"&gt;"):t},m=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.owner=e,this.d3=e.d3,this.internal=i};m.prototype.init=function(){var t=this.owner,e=t.config,n=t.main;t.axes.x=n.append("g").attr("class",a.axis+" "+a.axisX).attr("clip-path",e.axis_x_inner?"":t.clipPathForXAxis).attr("transform",t.getTranslate("x")).style("visibility",e.axis_x_show?"visible":"hidden"),t.axes.x.append("text").attr("class",a.axisXLabel).attr("transform",e.axis_rotated?"rotate(-90)":"").style("text-anchor",this.textAnchorForXAxisLabel.bind(this)),t.axes.y=n.append("g").attr("class",a.axis+" "+a.axisY).attr("clip-path",e.axis_y_inner?"":t.clipPathForYAxis).attr("transform",t.getTranslate("y")).style("visibility",e.axis_y_show?"visible":"hidden"),t.axes.y.append("text").attr("class",a.axisYLabel).attr("transform",e.axis_rotated?"":"rotate(-90)").style("text-anchor",this.textAnchorForYAxisLabel.bind(this)),t.axes.y2=n.append("g").attr("class",a.axis+" "+a.axisY2).attr("transform",t.getTranslate("y2")).style("visibility",e.axis_y2_show?"visible":"hidden"),t.axes.y2.append("text").attr("class",a.axisY2Label).attr("transform",e.axis_rotated?"":"rotate(-90)").style("text-anchor",this.textAnchorForY2AxisLabel.bind(this))},m.prototype.getXAxis=function(t,e,n,r,i,a,o){var s=this.owner,u=s.config,c={isCategory:s.isCategorized(),withOuterTick:i,tickMultiline:u.axis_x_tick_multiline,tickMultilineMax:u.axis_x_tick_multiline?Number(u.axis_x_tick_multilineMax):0,tickWidth:u.axis_x_tick_width,tickTextRotate:o?0:u.axis_x_tick_rotate,withoutTransition:a},l=new this.internal(this,c).axis.scale(t).orient(e);return s.isTimeSeries()&&r&&"function"!=typeof r&&(r=r.map(function(t){return s.parseDate(t)})),l.tickFormat(n).tickValues(r),s.isCategorized()&&(l.tickCentered(u.axis_x_tick_centered),d(u.axis_x_tick_culling)&&(u.axis_x_tick_culling=!1)),l},m.prototype.updateXAxisTickValues=function(t,e){var n,r=this.owner,i=r.config;return(i.axis_x_tick_fit||i.axis_x_tick_count)&&(n=this.generateTickValues(r.mapTargetsToUniqueXs(t),i.axis_x_tick_count,r.isTimeSeries())),e?e.tickValues(n):(r.xAxis.tickValues(n),r.subXAxis.tickValues(n)),n},m.prototype.getYAxis=function(t,e,n,r,i,a,o){var s=this.owner,u=s.config,c={withOuterTick:i,withoutTransition:a,tickTextRotate:o?0:u.axis_y_tick_rotate},l=new this.internal(this,c).axis.scale(t).orient(e).tickFormat(n);return s.isTimeSeriesY()?l.ticks(u.axis_y_tick_time_type,u.axis_y_tick_time_interval):l.tickValues(r),l},m.prototype.getId=function(t){var e=this.owner.config;return t in e.data_axes?e.data_axes[t]:"y"},m.prototype.getXAxisTickFormat=function(){var t=this.owner,e=t.config,n=t.isTimeSeries()?t.defaultAxisTimeFormat:t.isCategorized()?t.categoryName:function(t){return t};return e.axis_x_tick_format&&(p(e.axis_x_tick_format)?n=e.axis_x_tick_format:t.isTimeSeries()&&(n=function(n){return n?t.axisTimeFormat(e.axis_x_tick_format)(n):""})),p(n)?function(e){return n.call(t,e)}:n},m.prototype.getTickValues=function(t,e){return t||(e?e.tickValues():void 0)},m.prototype.getXAxisTickValues=function(){return this.getTickValues(this.owner.config.axis_x_tick_values,this.owner.xAxis)},m.prototype.getYAxisTickValues=function(){return this.getTickValues(this.owner.config.axis_y_tick_values,this.owner.yAxis)},m.prototype.getY2AxisTickValues=function(){return this.getTickValues(this.owner.config.axis_y2_tick_values,this.owner.y2Axis)},m.prototype.getLabelOptionByAxisId=function(t){var e,n=this.owner,r=n.config;return"y"===t?e=r.axis_y_label:"y2"===t?e=r.axis_y2_label:"x"===t&&(e=r.axis_x_label),e},m.prototype.getLabelText=function(t){var e=this.getLabelOptionByAxisId(t);return g(e)?e:e?e.text:null},m.prototype.setLabelText=function(t,e){var n=this.owner,r=n.config,i=this.getLabelOptionByAxisId(t);g(i)?"y"===t?r.axis_y_label=e:"y2"===t?r.axis_y2_label=e:"x"===t&&(r.axis_x_label=e):i&&(i.text=e)},m.prototype.getLabelPosition=function(e,n){var r=this.getLabelOptionByAxisId(e),i=r&&"object"===t(r)&&r.position?r.position:n;return{isInner:i.indexOf("inner")>=0,isOuter:i.indexOf("outer")>=0,isLeft:i.indexOf("left")>=0,isCenter:i.indexOf("center")>=0,isRight:i.indexOf("right")>=0,isTop:i.indexOf("top")>=0,isMiddle:i.indexOf("middle")>=0,isBottom:i.indexOf("bottom")>=0}},m.prototype.getXAxisLabelPosition=function(){return this.getLabelPosition("x",this.owner.config.axis_rotated?"inner-top":"inner-right")},m.prototype.getYAxisLabelPosition=function(){return this.getLabelPosition("y",this.owner.config.axis_rotated?"inner-right":"inner-top")},m.prototype.getY2AxisLabelPosition=function(){return this.getLabelPosition("y2",this.owner.config.axis_rotated?"inner-right":"inner-top")},m.prototype.getLabelPositionById=function(t){return"y2"===t?this.getY2AxisLabelPosition():"y"===t?this.getYAxisLabelPosition():this.getXAxisLabelPosition()},m.prototype.textForXAxisLabel=function(){return this.getLabelText("x")},m.prototype.textForYAxisLabel=function(){return this.getLabelText("y")},m.prototype.textForY2AxisLabel=function(){return this.getLabelText("y2")},m.prototype.xForAxisLabel=function(t,e){var n=this.owner;return t?e.isLeft?0:e.isCenter?n.width/2:n.width:e.isBottom?-n.height:e.isMiddle?-n.height/2:0},m.prototype.dxForAxisLabel=function(t,e){return t?e.isLeft?"0.5em":e.isRight?"-0.5em":"0":e.isTop?"-0.5em":e.isBottom?"0.5em":"0"},m.prototype.textAnchorForAxisLabel=function(t,e){return t?e.isLeft?"start":e.isCenter?"middle":"end":e.isBottom?"start":e.isMiddle?"middle":"end"},m.prototype.xForXAxisLabel=function(){return this.xForAxisLabel(!this.owner.config.axis_rotated,this.getXAxisLabelPosition())},m.prototype.xForYAxisLabel=function(){return this.xForAxisLabel(this.owner.config.axis_rotated,this.getYAxisLabelPosition())},m.prototype.xForY2AxisLabel=function(){return this.xForAxisLabel(this.owner.config.axis_rotated,this.getY2AxisLabelPosition())},m.prototype.dxForXAxisLabel=function(){return this.dxForAxisLabel(!this.owner.config.axis_rotated,this.getXAxisLabelPosition())},m.prototype.dxForYAxisLabel=function(){return this.dxForAxisLabel(this.owner.config.axis_rotated,this.getYAxisLabelPosition())},m.prototype.dxForY2AxisLabel=function(){return this.dxForAxisLabel(this.owner.config.axis_rotated,this.getY2AxisLabelPosition())},m.prototype.dyForXAxisLabel=function(){var t=this.owner,e=t.config,n=this.getXAxisLabelPosition();return e.axis_rotated?n.isInner?"1.2em":-25-(t.config.axis_x_inner?0:this.getMaxTickWidth("x")):n.isInner?"-0.5em":e.axis_x_height?e.axis_x_height-10:"3em"},m.prototype.dyForYAxisLabel=function(){var t=this.owner,e=this.getYAxisLabelPosition();return t.config.axis_rotated?e.isInner?"-0.5em":"3em":e.isInner?"1.2em":-10-(t.config.axis_y_inner?0:this.getMaxTickWidth("y")+10)},m.prototype.dyForY2AxisLabel=function(){var t=this.owner,e=this.getY2AxisLabelPosition();return t.config.axis_rotated?e.isInner?"1.2em":"-2.2em":e.isInner?"-0.5em":15+(t.config.axis_y2_inner?0:this.getMaxTickWidth("y2")+15)},m.prototype.textAnchorForXAxisLabel=function(){var t=this.owner;return this.textAnchorForAxisLabel(!t.config.axis_rotated,this.getXAxisLabelPosition())},m.prototype.textAnchorForYAxisLabel=function(){var t=this.owner;return this.textAnchorForAxisLabel(t.config.axis_rotated,this.getYAxisLabelPosition())},m.prototype.textAnchorForY2AxisLabel=function(){var t=this.owner;return this.textAnchorForAxisLabel(t.config.axis_rotated,this.getY2AxisLabelPosition())},m.prototype.getMaxTickWidth=function(t,e){var n,r,i,a,o=this.owner,s=o.config,u=0;return e&&o.currentMaxTickWidths[t]?o.currentMaxTickWidths[t]:(o.svg&&(n=o.filterTargetsToShow(o.data.targets),"y"===t?(r=o.y.copy().domain(o.getYDomain(n,"y")),i=this.getYAxis(r,o.yOrient,s.axis_y_tick_format,o.yAxisTickValues,!1,!0,!0)):"y2"===t?(r=o.y2.copy().domain(o.getYDomain(n,"y2")),i=this.getYAxis(r,o.y2Orient,s.axis_y2_tick_format,o.y2AxisTickValues,!1,!0,!0)):(r=o.x.copy().domain(o.getXDomain(n)),i=this.getXAxis(r,o.xOrient,o.xAxisTickFormat,o.xAxisTickValues,!1,!0,!0),this.updateXAxisTickValues(n,i)),(a=o.d3.select("body").append("div").classed("c3",!0)).append("svg").style("visibility","hidden").style("position","fixed").style("top",0).style("left",0).append("g").call(i).each(function(){o.d3.select(this).selectAll("text").each(function(){var t=this.getBoundingClientRect();u<t.width&&(u=t.width)}),a.remove()})),o.currentMaxTickWidths[t]=u<=0?o.currentMaxTickWidths[t]:u,o.currentMaxTickWidths[t])},m.prototype.updateLabels=function(t){var e=this.owner,n=e.main.select("."+a.axisX+" ."+a.axisXLabel),r=e.main.select("."+a.axisY+" ."+a.axisYLabel),i=e.main.select("."+a.axisY2+" ."+a.axisY2Label);(t?n.transition():n).attr("x",this.xForXAxisLabel.bind(this)).attr("dx",this.dxForXAxisLabel.bind(this)).attr("dy",this.dyForXAxisLabel.bind(this)).text(this.textForXAxisLabel.bind(this)),(t?r.transition():r).attr("x",this.xForYAxisLabel.bind(this)).attr("dx",this.dxForYAxisLabel.bind(this)).attr("dy",this.dyForYAxisLabel.bind(this)).text(this.textForYAxisLabel.bind(this)),(t?i.transition():i).attr("x",this.xForY2AxisLabel.bind(this)).attr("dx",this.dxForY2AxisLabel.bind(this)).attr("dy",this.dyForY2AxisLabel.bind(this)).text(this.textForY2AxisLabel.bind(this))},m.prototype.getPadding=function(t,e,n,r){var i="number"==typeof t?t:t[e];return y(i)?"ratio"===t.unit?t[e]*r:this.convertPixelsToAxisPadding(i,r):n},m.prototype.convertPixelsToAxisPadding=function(t,e){var n=this.owner,r=n.config.axis_rotated?n.width:n.height;return e*(t/r)},m.prototype.generateTickValues=function(t,e,n){var r,i,a,o,s,u,c,l=t;if(e)if(1===(r=p(e)?e():e))l=[t[0]];else if(2===r)l=[t[0],t[t.length-1]];else if(r>2){for(o=r-2,i=t[0],a=t[t.length-1],s=(a-i)/(o+1),l=[i],u=0;u<o;u++)c=+i+s*(u+1),l.push(n?new Date(c):c);l.push(a)}return n||(l=l.sort(function(t,e){return t-e})),l},m.prototype.generateTransitions=function(t){var e=this.owner,n=e.axes;return{axisX:t?n.x.transition().duration(t):n.x,axisY:t?n.y.transition().duration(t):n.y,axisY2:t?n.y2.transition().duration(t):n.y2,axisSubX:t?n.subx.transition().duration(t):n.subx}},m.prototype.redraw=function(t,e){var n=this.owner,r=t?n.d3.transition().duration(t):null;n.axes.x.style("opacity",e?0:1).call(n.xAxis,r),n.axes.y.style("opacity",e?0:1).call(n.yAxis,r),n.axes.y2.style("opacity",e?0:1).call(n.y2Axis,r),n.axes.subx.style("opacity",e?0:1).call(n.subXAxis,r)};var b={version:"0.6.12",chart:{fn:r.prototype,internal:{fn:e.prototype,axis:{fn:m.prototype,internal:{fn:i.prototype}}}},generate:function(t){return new r(t)}};return e.prototype.beforeInit=function(){},e.prototype.afterInit=function(){},e.prototype.init=function(){var t=this,e=t.config;if(t.initParams(),e.data_url)t.convertUrlToData(e.data_url,e.data_mimeType,e.data_headers,e.data_keys,t.initWithData);else if(e.data_json)t.initWithData(t.convertJsonToData(e.data_json,e.data_keys));else if(e.data_rows)t.initWithData(t.convertRowsToData(e.data_rows));else{if(!e.data_columns)throw Error("url or json or rows or columns is required.");t.initWithData(t.convertColumnsToData(e.data_columns))}},e.prototype.initParams=function(){var t=this,e=t.d3,n=t.config;t.clipId="c3-"+ +new Date+"-clip",t.clipIdForXAxis=t.clipId+"-xaxis",t.clipIdForYAxis=t.clipId+"-yaxis",t.clipIdForGrid=t.clipId+"-grid",t.clipIdForSubchart=t.clipId+"-subchart",t.clipPath=t.getClipPath(t.clipId),t.clipPathForXAxis=t.getClipPath(t.clipIdForXAxis),t.clipPathForYAxis=t.getClipPath(t.clipIdForYAxis),t.clipPathForGrid=t.getClipPath(t.clipIdForGrid),t.clipPathForSubchart=t.getClipPath(t.clipIdForSubchart),t.dragStart=null,t.dragging=!1,t.flowing=!1,t.cancelClick=!1,t.mouseover=!1,t.transiting=!1,t.color=t.generateColor(),t.levelColor=t.generateLevelColor(),t.dataTimeParse=(n.data_xLocaltime?e.timeParse:e.utcParse)(t.config.data_xFormat),t.axisTimeFormat=n.axis_x_localtime?e.timeFormat:e.utcFormat,t.defaultAxisTimeFormat=function(t){return t.getMilliseconds()?e.timeFormat(".%L")(t):t.getSeconds()?e.timeFormat(":%S")(t):t.getMinutes()?e.timeFormat("%I:%M")(t):t.getHours()?e.timeFormat("%I %p")(t):t.getDay()&&1!==t.getDate()?e.timeFormat("%-m/%-d")(t):1!==t.getDate()?e.timeFormat("%-m/%-d")(t):t.getMonth()?e.timeFormat("%-m/%-d")(t):e.timeFormat("%Y/%-m/%-d")(t)},t.hiddenTargetIds=[],t.hiddenLegendIds=[],t.focusedTargetIds=[],t.defocusedTargetIds=[],t.xOrient=n.axis_rotated?n.axis_x_inner?"right":"left":n.axis_x_inner?"top":"bottom",t.yOrient=n.axis_rotated?n.axis_y_inner?"top":"bottom":n.axis_y_inner?"right":"left",t.y2Orient=n.axis_rotated?n.axis_y2_inner?"bottom":"top":n.axis_y2_inner?"left":"right",t.subXOrient=n.axis_rotated?"left":"bottom",t.isLegendRight="right"===n.legend_position,t.isLegendInset="inset"===n.legend_position,t.isLegendTop="top-left"===n.legend_inset_anchor||"top-right"===n.legend_inset_anchor,t.isLegendLeft="top-left"===n.legend_inset_anchor||"bottom-left"===n.legend_inset_anchor,t.legendStep=0,t.legendItemWidth=0,t.legendItemHeight=0,t.currentMaxTickWidths={x:0,y:0,y2:0},t.rotated_padding_left=30,t.rotated_padding_right=n.axis_rotated&&!n.axis_x_show?0:30,t.rotated_padding_top=5,t.withoutFadeIn={},t.intervalForObserveInserted=void 0,t.axes.subx=e.selectAll([])},e.prototype.initChartElements=function(){this.initBar&&this.initBar(),this.initLine&&this.initLine(),this.initArc&&this.initArc(),this.initGauge&&this.initGauge(),this.initText&&this.initText()},e.prototype.initWithData=function(t){var e,n,r=this,i=r.d3,o=r.config,s=!0;r.axis=new m(r),o.bindto?"function"==typeof o.bindto.node?r.selectChart=o.bindto:r.selectChart=i.select(o.bindto):r.selectChart=i.selectAll([]),r.selectChart.empty()&&(r.selectChart=i.select(document.createElement("div")).style("opacity",0),r.observeInserted(r.selectChart),s=!1),r.selectChart.html("").classed("c3",!0),r.data.xs={},r.data.targets=r.convertDataToTargets(t),o.data_filter&&(r.data.targets=r.data.targets.filter(o.data_filter)),o.data_hide&&r.addHiddenTargetIds(!0===o.data_hide?r.mapToIds(r.data.targets):o.data_hide),o.legend_hide&&r.addHiddenLegendIds(!0===o.legend_hide?r.mapToIds(r.data.targets):o.legend_hide),r.updateSizes(),r.updateScales(),r.x.domain(i.extent(r.getXDomain(r.data.targets))),r.y.domain(r.getYDomain(r.data.targets,"y")),r.y2.domain(r.getYDomain(r.data.targets,"y2")),r.subX.domain(r.x.domain()),r.subY.domain(r.y.domain()),r.subY2.domain(r.y2.domain()),r.orgXDomain=r.x.domain(),r.svg=r.selectChart.append("svg").style("overflow","hidden").on("mouseenter",function(){return o.onmouseover.call(r)}).on("mouseleave",function(){return o.onmouseout.call(r)}),r.config.svg_classname&&r.svg.attr("class",r.config.svg_classname),e=r.svg.append("defs"),r.clipChart=r.appendClip(e,r.clipId),r.clipXAxis=r.appendClip(e,r.clipIdForXAxis),r.clipYAxis=r.appendClip(e,r.clipIdForYAxis),r.clipGrid=r.appendClip(e,r.clipIdForGrid),r.clipSubchart=r.appendClip(e,r.clipIdForSubchart),r.updateSvgSize(),n=r.main=r.svg.append("g").attr("transform",r.getTranslate("main")),r.initPie&&r.initPie(),r.initDragZoom&&r.initDragZoom(),r.initSubchart&&r.initSubchart(),r.initTooltip&&r.initTooltip(),r.initLegend&&r.initLegend(),r.initTitle&&r.initTitle(),r.initZoom&&r.initZoom(),r.initSubchartBrush&&r.initSubchartBrush(),n.append("text").attr("class",a.text+" "+a.empty).attr("text-anchor","middle").attr("dominant-baseline","middle"),r.initRegion(),r.initGrid(),n.append("g").attr("clip-path",r.clipPath).attr("class",a.chart),o.grid_lines_front&&r.initGridLines(),r.initEventRect(),r.initChartElements(),r.axis.init(),r.updateTargets(r.data.targets),o.axis_x_selection&&r.brush.selectionAsValue(r.getDefaultSelection()),s&&(r.updateDimension(),r.config.oninit.call(r),r.redraw({withTransition:!1,withTransform:!0,withUpdateXDomain:!0,withUpdateOrgXDomain:!0,withTransitionForAxis:!1})),r.bindResize(),r.bindWindowFocus(),r.api.element=r.selectChart.node()},e.prototype.smoothLines=function(t,e){var n=this;"grid"===e&&t.each(function(){var t=n.d3.select(this),e=t.attr("x1"),r=t.attr("x2"),i=t.attr("y1"),a=t.attr("y2");t.attr({x1:Math.ceil(e),x2:Math.ceil(r),y1:Math.ceil(i),y2:Math.ceil(a)})})},e.prototype.updateSizes=function(){var t=this,e=t.config,n=t.legend?t.getLegendHeight():0,r=t.legend?t.getLegendWidth():0,i=t.isLegendRight||t.isLegendInset?0:n,a=t.hasArcType(),o=e.axis_rotated||a?0:t.getHorizontalAxisHeight("x"),s=e.subchart_show&&!a?e.subchart_size_height+o:0;t.currentWidth=t.getCurrentWidth(),t.currentHeight=t.getCurrentHeight(),t.margin=e.axis_rotated?{top:t.getHorizontalAxisHeight("y2")+t.getCurrentPaddingTop(),right:a?0:t.getCurrentPaddingRight(),bottom:t.getHorizontalAxisHeight("y")+i+t.getCurrentPaddingBottom(),left:s+(a?0:t.getCurrentPaddingLeft())}:{top:4+t.getCurrentPaddingTop(),right:a?0:t.getCurrentPaddingRight(),bottom:o+s+i+t.getCurrentPaddingBottom(),left:a?0:t.getCurrentPaddingLeft()},t.margin2=e.axis_rotated?{top:t.margin.top,right:NaN,bottom:20+i,left:t.rotated_padding_left}:{top:t.currentHeight-s-i,right:NaN,bottom:o+i,left:t.margin.left},t.margin3={top:0,right:NaN,bottom:0,left:0},t.updateSizeForLegend&&t.updateSizeForLegend(n,r),t.width=t.currentWidth-t.margin.left-t.margin.right,t.height=t.currentHeight-t.margin.top-t.margin.bottom,t.width<0&&(t.width=0),t.height<0&&(t.height=0),t.width2=e.axis_rotated?t.margin.left-t.rotated_padding_left-t.rotated_padding_right:t.width,t.height2=e.axis_rotated?t.height:t.currentHeight-t.margin2.top-t.margin2.bottom,t.width2<0&&(t.width2=0),t.height2<0&&(t.height2=0),t.arcWidth=t.width-(t.isLegendRight?r+10:0),t.arcHeight=t.height-(t.isLegendRight?0:10),t.hasType("gauge")&&!e.gauge_fullCircle&&(t.arcHeight+=t.height-t.getGaugeLabelHeight()),t.updateRadius&&t.updateRadius(),t.isLegendRight&&a&&(t.margin3.left=t.arcWidth/2+1.1*t.radiusExpanded)},e.prototype.updateTargets=function(t){var e=this;e.updateTargetsForText(t),e.updateTargetsForBar(t),e.updateTargetsForLine(t),e.hasArcType()&&e.updateTargetsForArc&&e.updateTargetsForArc(t),e.updateTargetsForSubchart&&e.updateTargetsForSubchart(t),e.showTargets()},e.prototype.showTargets=function(){var t=this;t.svg.selectAll("."+a.target).filter(function(e){return t.isTargetToShow(e.id)}).transition().duration(t.config.transition_duration).style("opacity",1)},e.prototype.redraw=function(t,e){var n,r,i,o,s,u,l,f,h,d,p,g,_,y,x,v,m,b,w,S,A,T,P,C,M,L,E,V,G,k,R,O=this,I=O.main,N=O.d3,D=O.config,F=O.getShapeIndices(O.isAreaType),z=O.getShapeIndices(O.isBarType),X=O.getShapeIndices(O.isLineType),B=O.hasArcType(),Y=O.filterTargetsToShow(O.data.targets),H=O.xv.bind(O);if(n=c(t=t||{},"withY",!0),r=c(t,"withSubchart",!0),i=c(t,"withTransition",!0),u=c(t,"withTransform",!1),l=c(t,"withUpdateXDomain",!1),f=c(t,"withUpdateOrgXDomain",!1),h=c(t,"withTrimXDomain",!0),_=c(t,"withUpdateXAxis",l),d=c(t,"withLegend",!1),p=c(t,"withEventRect",!0),g=c(t,"withDimension",!0),o=c(t,"withTransitionForExit",i),s=c(t,"withTransitionForAxis",i),w=i?D.transition_duration:0,S=o?w:0,A=s?w:0,e=e||O.axis.generateTransitions(A),d&&D.legend_show?O.updateLegend(O.mapToIds(O.data.targets),t,e):g&&O.updateDimension(!0),O.isCategorized()&&0===Y.length&&O.x.domain([0,O.axes.x.selectAll(".tick").size()]),Y.length?(O.updateXDomain(Y,l,f,h),D.axis_x_tick_values||(L=O.axis.updateXAxisTickValues(Y))):(O.xAxis.tickValues([]),O.subXAxis.tickValues([])),D.zoom_rescale&&!t.flow&&(G=O.x.orgDomain()),O.y.domain(O.getYDomain(Y,"y",G)),O.y2.domain(O.getYDomain(Y,"y2",G)),!D.axis_y_tick_values&&D.axis_y_tick_count&&O.yAxis.tickValues(O.axis.generateTickValues(O.y.domain(),D.axis_y_tick_count)),!D.axis_y2_tick_values&&D.axis_y2_tick_count&&O.y2Axis.tickValues(O.axis.generateTickValues(O.y2.domain(),D.axis_y2_tick_count)),O.axis.redraw(A,B),O.axis.updateLabels(i),(l||_)&&Y.length)if(D.axis_x_tick_culling&&L){for(E=1;E<L.length;E++)if(L.length/E<D.axis_x_tick_culling_max){V=E;break}O.svg.selectAll("."+a.axisX+" .tick text").each(function(t){var e=L.indexOf(t);e>=0&&N.select(this).style("display",e%V?"none":"block")})}else O.svg.selectAll("."+a.axisX+" .tick text").style("display","block");y=O.generateDrawArea?O.generateDrawArea(F,!1):void 0,x=O.generateDrawBar?O.generateDrawBar(z):void 0,v=O.generateDrawLine?O.generateDrawLine(X,!1):void 0,m=O.generateXYForText(F,z,X,!0),b=O.generateXYForText(F,z,X,!1),O.updateCircleY(),k=(O.config.axis_rotated?O.circleY:O.circleX).bind(O),R=(O.config.axis_rotated?O.circleX:O.circleY).bind(O),n&&(O.subY.domain(O.getYDomain(Y,"y")),O.subY2.domain(O.getYDomain(Y,"y2"))),O.updateXgridFocus(),I.select("text."+a.text+"."+a.empty).attr("x",O.width/2).attr("y",O.height/2).text(D.data_empty_label_text).transition().style("opacity",Y.length?0:1),p&&O.redrawEventRect(),O.updateGrid(w),O.updateRegion(w),O.updateBar(S),O.updateLine(S),O.updateArea(S),O.updateCircle(k,R),O.hasDataLabel()&&O.updateText(m,b,S),O.redrawTitle&&O.redrawTitle(),O.redrawArc&&O.redrawArc(w,S,u),O.redrawSubchart&&O.redrawSubchart(r,e,w,S,F,z,X),I.selectAll("."+a.selectedCircles).filter(O.isBarType.bind(O)).selectAll("circle").remove(),t.flow&&(C=O.generateFlow({targets:Y,flow:t.flow,duration:t.flow.duration,drawBar:x,drawLine:v,drawArea:y,cx:k,cy:R,xv:H,xForText:m,yForText:b})),O.isTabVisible()&&(w?(M=N.transition().duration(w),T=[],[O.redrawBar(x,!0,M),O.redrawLine(v,!0,M),O.redrawArea(y,!0,M),O.redrawCircle(k,R,!0,M),O.redrawText(m,b,t.flow,!0,M),O.redrawRegion(!0,M),O.redrawGrid(!0,M)].forEach(function(t){t.forEach(function(t){T.push(t)})}),P=O.generateWait(),T.forEach(function(t){P.add(t)}),P(function(){C&&C(),D.onrendered&&D.onrendered.call(O)})):(O.redrawBar(x),O.redrawLine(v),O.redrawArea(y),O.redrawCircle(k,R),O.redrawText(m,b,t.flow),O.redrawRegion(),O.redrawGrid(),C&&C(),D.onrendered&&D.onrendered.call(O))),O.mapToIds(O.data.targets).forEach(function(t){O.withoutFadeIn[t]=!0})},e.prototype.updateAndRedraw=function(t){var e,n=this,r=n.config;(t=t||{}).withTransition=c(t,"withTransition",!0),t.withTransform=c(t,"withTransform",!1),t.withLegend=c(t,"withLegend",!1),t.withUpdateXDomain=c(t,"withUpdateXDomain",!0),t.withUpdateOrgXDomain=c(t,"withUpdateOrgXDomain",!0),t.withTransitionForExit=!1,t.withTransitionForTransform=c(t,"withTransitionForTransform",t.withTransition),n.updateSizes(),t.withLegend&&r.legend_show||(e=n.axis.generateTransitions(t.withTransitionForAxis?r.transition_duration:0),n.updateScales(),n.updateSvgSize(),n.transformAll(t.withTransitionForTransform,e)),n.redraw(t,e)},e.prototype.redrawWithoutRescale=function(){this.redraw({withY:!1,withSubchart:!1,withEventRect:!1,withTransitionForAxis:!1})},e.prototype.isTimeSeries=function(){return"timeseries"===this.config.axis_x_type},e.prototype.isCategorized=function(){return this.config.axis_x_type.indexOf("categor")>=0},e.prototype.isCustomX=function(){var t=this.config;return!this.isTimeSeries()&&(t.data_x||x(t.data_xs))},e.prototype.isTimeSeriesY=function(){return"timeseries"===this.config.axis_y_type},e.prototype.getTranslate=function(t){var e,n,r=this,i=r.config;return"main"===t?(e=o(r.margin.left),n=o(r.margin.top)):"context"===t?(e=o(r.margin2.left),n=o(r.margin2.top)):"legend"===t?(e=r.margin3.left,n=r.margin3.top):"x"===t?(e=0,n=i.axis_rotated?0:r.height):"y"===t?(e=0,n=i.axis_rotated?r.height:0):"y2"===t?(e=i.axis_rotated?0:r.width,n=i.axis_rotated?1:0):"subx"===t?(e=0,n=i.axis_rotated?0:r.height2):"arc"===t&&(e=r.arcWidth/2,n=r.arcHeight/2-(r.hasType("gauge")?6:0)),"translate("+e+","+n+")"},e.prototype.initialOpacity=function(t){return null!==t.value&&this.withoutFadeIn[t.id]?1:0},e.prototype.initialOpacityForCircle=function(t){return null!==t.value&&this.withoutFadeIn[t.id]?this.opacityForCircle(t):0},e.prototype.opacityForCircle=function(t){var e=(p(this.config.point_show)?this.config.point_show(t):this.config.point_show)?1:0;return y(t.value)?this.isScatterType(t)?.5:e:0},e.prototype.opacityForText=function(){return this.hasDataLabel()?1:0},e.prototype.xx=function(t){return t?this.x(t.x):null},e.prototype.xv=function(t){var e=this,n=t.value;return e.isTimeSeries()?n=e.parseDate(t.value):e.isCategorized()&&"string"==typeof t.value&&(n=e.config.axis_x_categories.indexOf(t.value)),Math.ceil(e.x(n))},e.prototype.yv=function(t){var e=t.axis&&"y2"===t.axis?this.y2:this.y;return Math.ceil(e(t.value))},e.prototype.subxx=function(t){return t?this.subX(t.x):null},e.prototype.transformMain=function(t,e){var n,r,i,o=this;e&&e.axisX?n=e.axisX:(n=o.main.select("."+a.axisX),t&&(n=n.transition())),e&&e.axisY?r=e.axisY:(r=o.main.select("."+a.axisY),t&&(r=r.transition())),e&&e.axisY2?i=e.axisY2:(i=o.main.select("."+a.axisY2),t&&(i=i.transition())),(t?o.main.transition():o.main).attr("transform",o.getTranslate("main")),n.attr("transform",o.getTranslate("x")),r.attr("transform",o.getTranslate("y")),i.attr("transform",o.getTranslate("y2")),o.main.select("."+a.chartArcs).attr("transform",o.getTranslate("arc"))},e.prototype.transformAll=function(t,e){var n=this;n.transformMain(t,e),n.config.subchart_show&&n.transformContext(t,e),n.legend&&n.transformLegend(t)},e.prototype.updateSvgSize=function(){var t=this,e=t.svg.select(".c3-brush .overlay");t.svg.attr("width",t.currentWidth).attr("height",t.currentHeight),t.svg.selectAll(["#"+t.clipId,"#"+t.clipIdForGrid]).select("rect").attr("width",t.width).attr("height",t.height),t.svg.select("#"+t.clipIdForXAxis).select("rect").attr("x",t.getXAxisClipX.bind(t)).attr("y",t.getXAxisClipY.bind(t)).attr("width",t.getXAxisClipWidth.bind(t)).attr("height",t.getXAxisClipHeight.bind(t)),t.svg.select("#"+t.clipIdForYAxis).select("rect").attr("x",t.getYAxisClipX.bind(t)).attr("y",t.getYAxisClipY.bind(t)).attr("width",t.getYAxisClipWidth.bind(t)).attr("height",t.getYAxisClipHeight.bind(t)),t.svg.select("#"+t.clipIdForSubchart).select("rect").attr("width",t.width).attr("height",e.size()?e.attr("height"):0)},e.prototype.updateDimension=function(t){var e=this;t||(e.config.axis_rotated?(e.axes.x.call(e.xAxis),e.axes.subx.call(e.subXAxis)):(e.axes.y.call(e.yAxis),e.axes.y2.call(e.y2Axis))),e.updateSizes(),e.updateScales(),e.updateSvgSize(),e.transformAll(!1)},e.prototype.observeInserted=function(t){var e,n=this;"undefined"!=typeof MutationObserver?(e=new MutationObserver(function(r){r.forEach(function(r){"childList"===r.type&&r.previousSibling&&(e.disconnect(),n.intervalForObserveInserted=window.setInterval(function(){t.node().parentNode&&(window.clearInterval(n.intervalForObserveInserted),n.updateDimension(),n.brush&&n.brush.update(),n.config.oninit.call(n),n.redraw({withTransform:!0,withUpdateXDomain:!0,withUpdateOrgXDomain:!0,withTransition:!1,withTransitionForTransform:!1,withLegend:!0}),t.transition().style("opacity",1))},10))})})).observe(t.node(),{attributes:!0,childList:!0,characterData:!0}):window.console.error("MutationObserver not defined.")},e.prototype.bindResize=function(){var t=this,e=t.config;if(t.resizeFunction=t.generateResize(),t.resizeFunction.add(function(){e.onresize.call(t)}),e.resize_auto&&t.resizeFunction.add(function(){void 0!==t.resizeTimeout&&window.clearTimeout(t.resizeTimeout),t.resizeTimeout=window.setTimeout(function(){delete t.resizeTimeout,t.updateAndRedraw({withUpdateXDomain:!1,withUpdateOrgXDomain:!1,withTransition:!1,withTransitionForTransform:!1,withLegend:!0}),t.brush&&t.brush.update()},100)}),t.resizeFunction.add(function(){e.onresized.call(t)}),t.resizeIfElementDisplayed=function(){null!=t.api&&t.api.element.offsetParent&&t.resizeFunction()},window.attachEvent)window.attachEvent("onresize",t.resizeIfElementDisplayed);else if(window.addEventListener)window.addEventListener("resize",t.resizeIfElementDisplayed,!1);else{var n=window.onresize;n?n.add&&n.remove||(n=t.generateResize()).add(window.onresize):n=t.generateResize(),n.add(t.resizeFunction),window.onresize=function(){t.api.element.offsetParent&&n()}}},e.prototype.bindWindowFocus=function(){var t=this;this.windowFocusHandler||(this.windowFocusHandler=function(){t.redraw()},window.addEventListener("focus",this.windowFocusHandler))},e.prototype.unbindWindowFocus=function(){window.removeEventListener("focus",this.windowFocusHandler),delete this.windowFocusHandler},e.prototype.generateResize=function(){var t=[];function e(){t.forEach(function(t){t()})}return e.add=function(e){t.push(e)},e.remove=function(e){for(var n=0;n<t.length;n++)if(t[n]===e){t.splice(n,1);break}},e},e.prototype.endall=function(t,e){var n=0;t.each(function(){++n}).on("end",function(){--n||e.apply(this,arguments)})},e.prototype.generateWait=function(){var t=[],e=function(e){var n=setInterval(function(){var r=0;t.forEach(function(t){if(t.empty())r+=1;else try{t.transition()}catch(t){r+=1}}),r===t.length&&(clearInterval(n),e&&e())},50)};return e.add=function(e){t.push(e)},e},e.prototype.parseDate=function(e){var n;return e instanceof Date?n=e:"string"==typeof e?n=this.dataTimeParse(e):"object"===t(e)?n=new Date(+e):"number"!=typeof e||isNaN(e)||(n=new Date(+e)),n&&!isNaN(+n)||window.console.error("Failed to parse x '"+e+"' to Date object"),n},e.prototype.isTabVisible=function(){return!document.hidden},e.prototype.getPathBox=l,e.prototype.CLASS=a,"SVGPathSeg"in window||(window.SVGPathSeg=function(t,e,n){this.pathSegType=t,this.pathSegTypeAsLetter=e,this._owningPathSegList=n},window.SVGPathSeg.prototype.classname="SVGPathSeg",window.SVGPathSeg.PATHSEG_UNKNOWN=0,window.SVGPathSeg.PATHSEG_CLOSEPATH=1,window.SVGPathSeg.PATHSEG_MOVETO_ABS=2,window.SVGPathSeg.PATHSEG_MOVETO_REL=3,window.SVGPathSeg.PATHSEG_LINETO_ABS=4,window.SVGPathSeg.PATHSEG_LINETO_REL=5,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS=6,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL=7,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS=8,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL=9,window.SVGPathSeg.PATHSEG_ARC_ABS=10,window.SVGPathSeg.PATHSEG_ARC_REL=11,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS=12,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL=13,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS=14,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL=15,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS=16,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL=17,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS=18,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL=19,window.SVGPathSeg.prototype._segmentChanged=function(){this._owningPathSegList&&this._owningPathSegList.segmentChanged(this)},window.SVGPathSegClosePath=function(t){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CLOSEPATH,"z",t)},window.SVGPathSegClosePath.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegClosePath.prototype.toString=function(){return"[object SVGPathSegClosePath]"},window.SVGPathSegClosePath.prototype._asPathString=function(){return this.pathSegTypeAsLetter},window.SVGPathSegClosePath.prototype.clone=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathSegMovetoAbs=function(t,e,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_ABS,"M",t),this._x=e,this._y=n},window.SVGPathSegMovetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoAbs.prototype.toString=function(){return"[object SVGPathSegMovetoAbs]"},window.SVGPathSegMovetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoAbs.prototype.clone=function(){return new window.SVGPathSegMovetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegMovetoRel=function(t,e,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_MOVETO_REL,"m",t),this._x=e,this._y=n},window.SVGPathSegMovetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegMovetoRel.prototype.toString=function(){return"[object SVGPathSegMovetoRel]"},window.SVGPathSegMovetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegMovetoRel.prototype.clone=function(){return new window.SVGPathSegMovetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegMovetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoAbs=function(t,e,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_ABS,"L",t),this._x=e,this._y=n},window.SVGPathSegLinetoAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoAbs.prototype.toString=function(){return"[object SVGPathSegLinetoAbs]"},window.SVGPathSegLinetoAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoAbs.prototype.clone=function(){return new window.SVGPathSegLinetoAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoRel=function(t,e,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_REL,"l",t),this._x=e,this._y=n},window.SVGPathSegLinetoRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoRel.prototype.toString=function(){return"[object SVGPathSegLinetoRel]"},window.SVGPathSegLinetoRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegLinetoRel.prototype.clone=function(){return new window.SVGPathSegLinetoRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegLinetoRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicAbs=function(t,e,n,r,i,a,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS,"C",t),this._x=e,this._y=n,this._x1=r,this._y1=i,this._x2=a,this._y2=o},window.SVGPathSegCurvetoCubicAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicAbs]"},window.SVGPathSegCurvetoCubicAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicAbs(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicRel=function(t,e,n,r,i,a,o){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL,"c",t),this._x=e,this._y=n,this._x1=r,this._y1=i,this._x2=a,this._y2=o},window.SVGPathSegCurvetoCubicRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicRel]"},window.SVGPathSegCurvetoCubicRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicRel(void 0,this._x,this._y,this._x1,this._y1,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticAbs=function(t,e,n,r,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS,"Q",t),this._x=e,this._y=n,this._x1=r,this._y1=i},window.SVGPathSegCurvetoQuadraticAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticAbs]"},window.SVGPathSegCurvetoQuadraticAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticAbs.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticRel=function(t,e,n,r,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL,"q",t),this._x=e,this._y=n,this._x1=r,this._y1=i},window.SVGPathSegCurvetoQuadraticRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticRel]"},window.SVGPathSegCurvetoQuadraticRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x1+" "+this._y1+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticRel(void 0,this._x,this._y,this._x1,this._y1)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"x1",{get:function(){return this._x1},set:function(t){this._x1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticRel.prototype,"y1",{get:function(){return this._y1},set:function(t){this._y1=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcAbs=function(t,e,n,r,i,a,o,s){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_ABS,"A",t),this._x=e,this._y=n,this._r1=r,this._r2=i,this._angle=a,this._largeArcFlag=o,this._sweepFlag=s},window.SVGPathSegArcAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcAbs.prototype.toString=function(){return"[object SVGPathSegArcAbs]"},window.SVGPathSegArcAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcAbs.prototype.clone=function(){return new window.SVGPathSegArcAbs(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcAbs.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegArcRel=function(t,e,n,r,i,a,o,s){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_ARC_REL,"a",t),this._x=e,this._y=n,this._r1=r,this._r2=i,this._angle=a,this._largeArcFlag=o,this._sweepFlag=s},window.SVGPathSegArcRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegArcRel.prototype.toString=function(){return"[object SVGPathSegArcRel]"},window.SVGPathSegArcRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._r1+" "+this._r2+" "+this._angle+" "+(this._largeArcFlag?"1":"0")+" "+(this._sweepFlag?"1":"0")+" "+this._x+" "+this._y},window.SVGPathSegArcRel.prototype.clone=function(){return new window.SVGPathSegArcRel(void 0,this._x,this._y,this._r1,this._r2,this._angle,this._largeArcFlag,this._sweepFlag)},Object.defineProperty(window.SVGPathSegArcRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r1",{get:function(){return this._r1},set:function(t){this._r1=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"r2",{get:function(){return this._r2},set:function(t){this._r2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"largeArcFlag",{get:function(){return this._largeArcFlag},set:function(t){this._largeArcFlag=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegArcRel.prototype,"sweepFlag",{get:function(){return this._sweepFlag},set:function(t){this._sweepFlag=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalAbs=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS,"H",t),this._x=e},window.SVGPathSegLinetoHorizontalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalAbs]"},window.SVGPathSegLinetoHorizontalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalAbs(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoHorizontalRel=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL,"h",t),this._x=e},window.SVGPathSegLinetoHorizontalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoHorizontalRel.prototype.toString=function(){return"[object SVGPathSegLinetoHorizontalRel]"},window.SVGPathSegLinetoHorizontalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x},window.SVGPathSegLinetoHorizontalRel.prototype.clone=function(){return new window.SVGPathSegLinetoHorizontalRel(void 0,this._x)},Object.defineProperty(window.SVGPathSegLinetoHorizontalRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalAbs=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS,"V",t),this._y=e},window.SVGPathSegLinetoVerticalAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalAbs.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalAbs]"},window.SVGPathSegLinetoVerticalAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalAbs.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalAbs(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegLinetoVerticalRel=function(t,e){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL,"v",t),this._y=e},window.SVGPathSegLinetoVerticalRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegLinetoVerticalRel.prototype.toString=function(){return"[object SVGPathSegLinetoVerticalRel]"},window.SVGPathSegLinetoVerticalRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._y},window.SVGPathSegLinetoVerticalRel.prototype.clone=function(){return new window.SVGPathSegLinetoVerticalRel(void 0,this._y)},Object.defineProperty(window.SVGPathSegLinetoVerticalRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothAbs=function(t,e,n,r,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS,"S",t),this._x=e,this._y=n,this._x2=r,this._y2=i},window.SVGPathSegCurvetoCubicSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothAbs]"},window.SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothAbs.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoCubicSmoothRel=function(t,e,n,r,i){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL,"s",t),this._x=e,this._y=n,this._x2=r,this._y2=i},window.SVGPathSegCurvetoCubicSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoCubicSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoCubicSmoothRel]"},window.SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x2+" "+this._y2+" "+this._x+" "+this._y},window.SVGPathSegCurvetoCubicSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,this._x,this._y,this._x2,this._y2)},Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"x2",{get:function(){return this._x2},set:function(t){this._x2=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoCubicSmoothRel.prototype,"y2",{get:function(){return this._y2},set:function(t){this._y2=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothAbs=function(t,e,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS,"T",t),this._x=e,this._y=n},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothAbs]"},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothAbs.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathSegCurvetoQuadraticSmoothRel=function(t,e,n){window.SVGPathSeg.call(this,window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL,"t",t),this._x=e,this._y=n},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype=Object.create(window.SVGPathSeg.prototype),window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString=function(){return"[object SVGPathSegCurvetoQuadraticSmoothRel]"},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString=function(){return this.pathSegTypeAsLetter+" "+this._x+" "+this._y},window.SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone=function(){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,this._x,this._y)},Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t,this._segmentChanged()},enumerable:!0}),Object.defineProperty(window.SVGPathSegCurvetoQuadraticSmoothRel.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t,this._segmentChanged()},enumerable:!0}),window.SVGPathElement.prototype.createSVGPathSegClosePath=function(){return new window.SVGPathSegClosePath(void 0)},window.SVGPathElement.prototype.createSVGPathSegMovetoAbs=function(t,e){return new window.SVGPathSegMovetoAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegMovetoRel=function(t,e){return new window.SVGPathSegMovetoRel(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoAbs=function(t,e){return new window.SVGPathSegLinetoAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegLinetoRel=function(t,e){return new window.SVGPathSegLinetoRel(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs=function(t,e,n,r,i,a){return new window.SVGPathSegCurvetoCubicAbs(void 0,t,e,n,r,i,a)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel=function(t,e,n,r,i,a){return new window.SVGPathSegCurvetoCubicRel(void 0,t,e,n,r,i,a)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs=function(t,e,n,r){return new window.SVGPathSegCurvetoQuadraticAbs(void 0,t,e,n,r)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel=function(t,e,n,r){return new window.SVGPathSegCurvetoQuadraticRel(void 0,t,e,n,r)},window.SVGPathElement.prototype.createSVGPathSegArcAbs=function(t,e,n,r,i,a,o){return new window.SVGPathSegArcAbs(void 0,t,e,n,r,i,a,o)},window.SVGPathElement.prototype.createSVGPathSegArcRel=function(t,e,n,r,i,a,o){return new window.SVGPathSegArcRel(void 0,t,e,n,r,i,a,o)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs=function(t){return new window.SVGPathSegLinetoHorizontalAbs(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel=function(t){return new window.SVGPathSegLinetoHorizontalRel(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs=function(t){return new window.SVGPathSegLinetoVerticalAbs(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel=function(t){return new window.SVGPathSegLinetoVerticalRel(void 0,t)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs=function(t,e,n,r){return new window.SVGPathSegCurvetoCubicSmoothAbs(void 0,t,e,n,r)},window.SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel=function(t,e,n,r){return new window.SVGPathSegCurvetoCubicSmoothRel(void 0,t,e,n,r)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs=function(t,e){return new window.SVGPathSegCurvetoQuadraticSmoothAbs(void 0,t,e)},window.SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel=function(t,e){return new window.SVGPathSegCurvetoQuadraticSmoothRel(void 0,t,e)},"getPathSegAtLength"in window.SVGPathElement.prototype||(window.SVGPathElement.prototype.getPathSegAtLength=function(t){if(void 0===t||!isFinite(t))throw"Invalid arguments.";var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttribute("d",this.getAttribute("d"));var n=e.pathSegList.numberOfItems-1;if(n<=0)return 0;do{if(e.pathSegList.removeItem(n),t>e.getTotalLength())break;n--}while(n>0);return n})),"SVGPathSegList"in window||(window.SVGPathSegList=function(t){this._pathElement=t,this._list=this._parsePath(this._pathElement.getAttribute("d")),this._mutationObserverConfig={attributes:!0,attributeFilter:["d"]},this._pathElementMutationObserver=new MutationObserver(this._updateListFromPathMutations.bind(this)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.classname="SVGPathSegList",Object.defineProperty(window.SVGPathSegList.prototype,"numberOfItems",{get:function(){return this._checkPathSynchronizedToList(),this._list.length},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"pathSegList",{get:function(){return this._pathSegList||(this._pathSegList=new window.SVGPathSegList(this)),this._pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"normalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),Object.defineProperty(window.SVGPathElement.prototype,"animatedNormalizedPathSegList",{get:function(){return this.pathSegList},enumerable:!0}),window.SVGPathSegList.prototype._checkPathSynchronizedToList=function(){this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords())},window.SVGPathSegList.prototype._updateListFromPathMutations=function(t){if(this._pathElement){var e=!1;t.forEach(function(t){"d"==t.attributeName&&(e=!0)}),e&&(this._list=this._parsePath(this._pathElement.getAttribute("d")))}},window.SVGPathSegList.prototype._writeListToPath=function(){this._pathElementMutationObserver.disconnect(),this._pathElement.setAttribute("d",window.SVGPathSegList._pathSegArrayAsString(this._list)),this._pathElementMutationObserver.observe(this._pathElement,this._mutationObserverConfig)},window.SVGPathSegList.prototype.segmentChanged=function(t){this._writeListToPath()},window.SVGPathSegList.prototype.clear=function(){this._checkPathSynchronizedToList(),this._list.forEach(function(t){t._owningPathSegList=null}),this._list=[],this._writeListToPath()},window.SVGPathSegList.prototype.initialize=function(t){return this._checkPathSynchronizedToList(),this._list=[t],t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype._checkValidIndex=function(t){if(isNaN(t)||t<0||t>=this.numberOfItems)throw"INDEX_SIZE_ERR"},window.SVGPathSegList.prototype.getItem=function(t){return this._checkPathSynchronizedToList(),this._checkValidIndex(t),this._list[t]},window.SVGPathSegList.prototype.insertItemBefore=function(t,e){return this._checkPathSynchronizedToList(),e>this.numberOfItems&&(e=this.numberOfItems),t._owningPathSegList&&(t=t.clone()),this._list.splice(e,0,t),t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype.replaceItem=function(t,e){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._checkValidIndex(e),this._list[e]=t,t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList.prototype.removeItem=function(t){this._checkPathSynchronizedToList(),this._checkValidIndex(t);var e=this._list[t];return this._list.splice(t,1),this._writeListToPath(),e},window.SVGPathSegList.prototype.appendItem=function(t){return this._checkPathSynchronizedToList(),t._owningPathSegList&&(t=t.clone()),this._list.push(t),t._owningPathSegList=this,this._writeListToPath(),t},window.SVGPathSegList._pathSegArrayAsString=function(t){var e="",n=!0;return t.forEach(function(t){n?(n=!1,e+=t._asPathString()):e+=" "+t._asPathString()}),e},window.SVGPathSegList.prototype._parsePath=function(t){if(!t||0==t.length)return[];var e=this,n=function(){this.pathSegList=[]};n.prototype.appendSegment=function(t){this.pathSegList.push(t)};var r=function(t){this._string=t,this._currentIndex=0,this._endIndex=this._string.length,this._previousCommand=window.SVGPathSeg.PATHSEG_UNKNOWN,this._skipOptionalSpaces()};r.prototype._isCurrentSpace=function(){var t=this._string[this._currentIndex];return t<=" "&&(" "==t||"\n"==t||"\t"==t||"\r"==t||"\f"==t)},r.prototype._skipOptionalSpaces=function(){for(;this._currentIndex<this._endIndex&&this._isCurrentSpace();)this._currentIndex++;return this._currentIndex<this._endIndex},r.prototype._skipOptionalSpacesOrDelimiter=function(){return!(this._currentIndex<this._endIndex&&!this._isCurrentSpace()&&","!=this._string.charAt(this._currentIndex))&&(this._skipOptionalSpaces()&&this._currentIndex<this._endIndex&&","==this._string.charAt(this._currentIndex)&&(this._currentIndex++,this._skipOptionalSpaces()),this._currentIndex<this._endIndex)},r.prototype.hasMoreData=function(){return this._currentIndex<this._endIndex},r.prototype.peekSegmentType=function(){var t=this._string[this._currentIndex];return this._pathSegTypeFromChar(t)},r.prototype._pathSegTypeFromChar=function(t){switch(t){case"Z":case"z":return window.SVGPathSeg.PATHSEG_CLOSEPATH;case"M":return window.SVGPathSeg.PATHSEG_MOVETO_ABS;case"m":return window.SVGPathSeg.PATHSEG_MOVETO_REL;case"L":return window.SVGPathSeg.PATHSEG_LINETO_ABS;case"l":return window.SVGPathSeg.PATHSEG_LINETO_REL;case"C":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;case"c":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;case"Q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;case"q":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;case"A":return window.SVGPathSeg.PATHSEG_ARC_ABS;case"a":return window.SVGPathSeg.PATHSEG_ARC_REL;case"H":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;case"h":return window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;case"V":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;case"v":return window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;case"S":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;case"s":return window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;case"T":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;case"t":return window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;default:return window.SVGPathSeg.PATHSEG_UNKNOWN}},r.prototype._nextCommandHelper=function(t,e){return("+"==t||"-"==t||"."==t||t>="0"&&t<="9")&&e!=window.SVGPathSeg.PATHSEG_CLOSEPATH?e==window.SVGPathSeg.PATHSEG_MOVETO_ABS?window.SVGPathSeg.PATHSEG_LINETO_ABS:e==window.SVGPathSeg.PATHSEG_MOVETO_REL?window.SVGPathSeg.PATHSEG_LINETO_REL:e:window.SVGPathSeg.PATHSEG_UNKNOWN},r.prototype.initialCommandIsMoveTo=function(){if(!this.hasMoreData())return!0;var t=this.peekSegmentType();return t==window.SVGPathSeg.PATHSEG_MOVETO_ABS||t==window.SVGPathSeg.PATHSEG_MOVETO_REL},r.prototype._parseNumber=function(){var t=0,e=0,n=1,r=0,i=1,a=1,o=this._currentIndex;if(this._skipOptionalSpaces(),this._currentIndex<this._endIndex&&"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:this._currentIndex<this._endIndex&&"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,i=-1),!(this._currentIndex==this._endIndex||(this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")&&"."!=this._string.charAt(this._currentIndex))){for(var s=this._currentIndex;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)this._currentIndex++;if(this._currentIndex!=s)for(var u=this._currentIndex-1,c=1;u>=s;)e+=c*(this._string.charAt(u--)-"0"),c*=10;if(this._currentIndex<this._endIndex&&"."==this._string.charAt(this._currentIndex)){if(this._currentIndex++,this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)n*=10,r+=(this._string.charAt(this._currentIndex)-"0")/n,this._currentIndex+=1}if(this._currentIndex!=o&&this._currentIndex+1<this._endIndex&&("e"==this._string.charAt(this._currentIndex)||"E"==this._string.charAt(this._currentIndex))&&"x"!=this._string.charAt(this._currentIndex+1)&&"m"!=this._string.charAt(this._currentIndex+1)){if(this._currentIndex++,"+"==this._string.charAt(this._currentIndex)?this._currentIndex++:"-"==this._string.charAt(this._currentIndex)&&(this._currentIndex++,a=-1),this._currentIndex>=this._endIndex||this._string.charAt(this._currentIndex)<"0"||this._string.charAt(this._currentIndex)>"9")return;for(;this._currentIndex<this._endIndex&&this._string.charAt(this._currentIndex)>="0"&&this._string.charAt(this._currentIndex)<="9";)t*=10,t+=this._string.charAt(this._currentIndex)-"0",this._currentIndex++}var l=e+r;if(l*=i,t&&(l*=Math.pow(10,a*t)),o!=this._currentIndex)return this._skipOptionalSpacesOrDelimiter(),l}},r.prototype._parseArcFlag=function(){if(!(this._currentIndex>=this._endIndex)){var t=!1,e=this._string.charAt(this._currentIndex++);if("0"==e)t=!1;else{if("1"!=e)return;t=!0}return this._skipOptionalSpacesOrDelimiter(),t}},r.prototype.parseSegment=function(){var t=this._string[this._currentIndex],n=this._pathSegTypeFromChar(t);if(n==window.SVGPathSeg.PATHSEG_UNKNOWN){if(this._previousCommand==window.SVGPathSeg.PATHSEG_UNKNOWN)return null;if((n=this._nextCommandHelper(t,this._previousCommand))==window.SVGPathSeg.PATHSEG_UNKNOWN)return null}else this._currentIndex++;switch(this._previousCommand=n,n){case window.SVGPathSeg.PATHSEG_MOVETO_REL:return new window.SVGPathSegMovetoRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_MOVETO_ABS:return new window.SVGPathSegMovetoAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_REL:return new window.SVGPathSegLinetoRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_ABS:return new window.SVGPathSegLinetoAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:return new window.SVGPathSegLinetoHorizontalRel(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:return new window.SVGPathSegLinetoHorizontalAbs(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:return new window.SVGPathSegLinetoVerticalRel(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:return new window.SVGPathSegLinetoVerticalAbs(e,this._parseNumber());case window.SVGPathSeg.PATHSEG_CLOSEPATH:return this._skipOptionalSpaces(),new window.SVGPathSegClosePath(e);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:var r={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()};return new window.SVGPathSegCurvetoCubicRel(e,r.x,r.y,r.x1,r.y1,r.x2,r.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:return r={x1:this._parseNumber(),y1:this._parseNumber(),x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicAbs(e,r.x,r.y,r.x1,r.y1,r.x2,r.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:return r={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothRel(e,r.x,r.y,r.x2,r.y2);case window.SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:return r={x2:this._parseNumber(),y2:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoCubicSmoothAbs(e,r.x,r.y,r.x2,r.y2);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:return r={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticRel(e,r.x,r.y,r.x1,r.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:return r={x1:this._parseNumber(),y1:this._parseNumber(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegCurvetoQuadraticAbs(e,r.x,r.y,r.x1,r.y1);case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:return new window.SVGPathSegCurvetoQuadraticSmoothRel(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:return new window.SVGPathSegCurvetoQuadraticSmoothAbs(e,this._parseNumber(),this._parseNumber());case window.SVGPathSeg.PATHSEG_ARC_REL:return r={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcRel(e,r.x,r.y,r.x1,r.y1,r.arcAngle,r.arcLarge,r.arcSweep);case window.SVGPathSeg.PATHSEG_ARC_ABS:return r={x1:this._parseNumber(),y1:this._parseNumber(),arcAngle:this._parseNumber(),arcLarge:this._parseArcFlag(),arcSweep:this._parseArcFlag(),x:this._parseNumber(),y:this._parseNumber()},new window.SVGPathSegArcAbs(e,r.x,r.y,r.x1,r.y1,r.arcAngle,r.arcLarge,r.arcSweep);default:throw"Unknown path seg type."}};var i=new n,a=new r(t);if(!a.initialCommandIsMoveTo())return[];for(;a.hasMoreData();){var o=a.parseSegment();if(!o)return[];i.appendSegment(o)}return i.pathSegList}),String.prototype.padEnd||(String.prototype.padEnd=function(t,e){return t>>=0,e=String(void 0!==e?e:" "),this.length>t?String(this):((t-=this.length)>e.length&&(e+=e.repeat(t/e.length)),String(this)+e.slice(0,t))}),r.prototype.axis=function(){},r.prototype.axis.labels=function(t){var e=this.internal;arguments.length&&(Object.keys(t).forEach(function(n){e.axis.setLabelText(n,t[n])}),e.axis.updateLabels())},r.prototype.axis.max=function(e){var n=this.internal,r=n.config;if(!arguments.length)return{x:r.axis_x_max,y:r.axis_y_max,y2:r.axis_y2_max};"object"===t(e)?(y(e.x)&&(r.axis_x_max=e.x),y(e.y)&&(r.axis_y_max=e.y),y(e.y2)&&(r.axis_y2_max=e.y2)):r.axis_y_max=r.axis_y2_max=e,n.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})},r.prototype.axis.min=function(e){var n=this.internal,r=n.config;if(!arguments.length)return{x:r.axis_x_min,y:r.axis_y_min,y2:r.axis_y2_min};"object"===t(e)?(y(e.x)&&(r.axis_x_min=e.x),y(e.y)&&(r.axis_y_min=e.y),y(e.y2)&&(r.axis_y2_min=e.y2)):r.axis_y_min=r.axis_y2_min=e,n.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})},r.prototype.axis.range=function(t){if(!arguments.length)return{max:this.axis.max(),min:this.axis.min()};h(t.max)&&this.axis.max(t.max),h(t.min)&&this.axis.min(t.min)},r.prototype.category=function(t,e){var n=this.internal,r=n.config;return arguments.length>1&&(r.axis_x_categories[t]=e,n.redraw()),r.axis_x_categories[t]},r.prototype.categories=function(t){var e=this.internal,n=e.config;return arguments.length?(n.axis_x_categories=t,e.redraw(),n.axis_x_categories):n.axis_x_categories},r.prototype.resize=function(t){var e=this.internal.config;e.size_width=t?t.width:null,e.size_height=t?t.height:null,this.flush()},r.prototype.flush=function(){this.internal.updateAndRedraw({withLegend:!0,withTransition:!1,withTransitionForTransform:!1})},r.prototype.destroy=function(){var t=this.internal;if(window.clearInterval(t.intervalForObserveInserted),void 0!==t.resizeTimeout&&window.clearTimeout(t.resizeTimeout),window.detachEvent)window.detachEvent("onresize",t.resizeIfElementDisplayed);else if(window.removeEventListener)window.removeEventListener("resize",t.resizeIfElementDisplayed);else{var e=window.onresize;e&&e.add&&e.remove&&e.remove(t.resizeFunction)}return t.resizeFunction.remove(),t.unbindWindowFocus(),t.selectChart.classed("c3",!1).html(""),Object.keys(t).forEach(function(e){t[e]=null}),null},r.prototype.color=function(t){return this.internal.color(t)},r.prototype.data=function(t){var e=this.internal.data.targets;return void 0===t?e:e.filter(function(e){return[].concat(t).indexOf(e.id)>=0})},r.prototype.data.shown=function(t){return this.internal.filterTargetsToShow(this.data(t))},r.prototype.data.values=function(t){var e,n=null;return t&&(n=(e=this.data(t))[0]?e[0].values.map(function(t){return t.value}):null),n},r.prototype.data.names=function(t){return this.internal.clearLegendItemTextBoxCache(),this.internal.updateDataAttributes("names",t)},r.prototype.data.colors=function(t){return this.internal.updateDataAttributes("colors",t)},r.prototype.data.axes=function(t){return this.internal.updateDataAttributes("axes",t)},r.prototype.flow=function(t){var e,n,r,i,a,o,s,u=this.internal,c=[],l=u.getMaxDataCount(),f=0,d=0;if(t.json)n=u.convertJsonToData(t.json,t.keys);else if(t.rows)n=u.convertRowsToData(t.rows);else{if(!t.columns)return;n=u.convertColumnsToData(t.columns)}e=u.convertDataToTargets(n,!0),u.data.targets.forEach(function(t){var n,r,i=!1;for(n=0;n<e.length;n++)if(t.id===e[n].id){for(i=!0,t.values[t.values.length-1]&&(d=t.values[t.values.length-1].index+1),f=e[n].values.length,r=0;r<f;r++)e[n].values[r].index=d+r,u.isTimeSeries()||(e[n].values[r].x=d+r);t.values=t.values.concat(e[n].values),e.splice(n,1);break}i||c.push(t.id)}),u.data.targets.forEach(function(t){var e,n;for(e=0;e<c.length;e++)if(t.id===c[e])for(d=t.values[t.values.length-1].index+1,n=0;n<f;n++)t.values.push({id:t.id,index:d+n,x:u.isTimeSeries()?u.getOtherTargetX(d+n):d+n,value:null})}),u.data.targets.length&&e.forEach(function(t){var e,n=[];for(e=u.data.targets[0].values[0].index;e<d;e++)n.push({id:t.id,index:e,x:u.isTimeSeries()?u.getOtherTargetX(e):e,value:null});t.values.forEach(function(t){t.index+=d,u.isTimeSeries()||(t.x+=d)}),t.values=n.concat(t.values)}),u.data.targets=u.data.targets.concat(e),u.getMaxDataCount(),a=(i=u.data.targets[0]).values[0],h(t.to)?(f=0,s=u.isTimeSeries()?u.parseDate(t.to):t.to,i.values.forEach(function(t){t.x<s&&f++})):h(t.length)&&(f=t.length),l?1===l&&u.isTimeSeries()&&(o=(i.values[i.values.length-1].x-a.x)/2,r=[new Date(+a.x-o),new Date(+a.x+o)],u.updateXDomain(null,!0,!0,!1,r)):(o=u.isTimeSeries()?i.values.length>1?i.values[i.values.length-1].x-a.x:a.x-u.getXDomain(u.data.targets)[0]:1,r=[a.x-o,a.x],u.updateXDomain(null,!0,!0,!1,r)),u.updateTargets(u.data.targets),u.redraw({flow:{index:a.index,length:f,duration:y(t.duration)?t.duration:u.config.transition_duration,done:t.done,orgDataCount:l},withLegend:!0,withTransition:l>1,withTrimXDomain:!1,withUpdateXAxis:!0})},e.prototype.generateFlow=function(t){var e=this,n=e.config,r=e.d3;return function(){var i,o,s,c,l,f,h,d,p,g,_,y=t.targets,x=t.flow,v=t.drawBar,m=t.drawLine,b=t.drawArea,w=t.cx,S=t.cy,A=t.xv,T=t.xForText,P=t.yForText,C=t.duration,M=x.index,L=x.length,E=e.getValueOnIndex(e.data.targets[0].values,M),V=e.getValueOnIndex(e.data.targets[0].values,M+L),G=e.x.domain(),k=x.duration||C,R=x.done||function(){},O=e.generateWait();e.flowing=!0,e.data.targets.forEach(function(t){t.values.splice(0,L)}),s=e.updateXDomain(y,!0,!0),e.updateXGrid&&e.updateXGrid(!0),c=e.xgrid||r.selectAll([]),l=e.xgridLines||r.selectAll([]),f=e.mainRegion||r.selectAll([]),h=e.mainText||r.selectAll([]),d=e.mainBar||r.selectAll([]),p=e.mainLine||r.selectAll([]),g=e.mainArea||r.selectAll([]),_=e.mainCircle||r.selectAll([]),x.orgDataCount?i=1===x.orgDataCount||(E&&E.x)===(V&&V.x)?e.x(G[0])-e.x(s[0]):e.isTimeSeries()?e.x(G[0])-e.x(s[0]):e.x(E.x)-e.x(V.x):1!==e.data.targets[0].values.length?i=e.x(G[0])-e.x(s[0]):e.isTimeSeries()?(E=e.getValueOnIndex(e.data.targets[0].values,0),V=e.getValueOnIndex(e.data.targets[0].values,e.data.targets[0].values.length-1),i=e.x(E.x)-e.x(V.x)):i=u(s)/2,o="translate("+i+",0) scale("+u(G)/u(s)+",1)",e.hideXGridFocus();var I=r.transition().ease(r.easeLinear).duration(k);O.add(e.xAxis(e.axes.x,I)),O.add(d.transition(I).attr("transform",o)),O.add(p.transition(I).attr("transform",o)),O.add(g.transition(I).attr("transform",o)),O.add(_.transition(I).attr("transform",o)),O.add(h.transition(I).attr("transform",o)),O.add(f.filter(e.isRegionOnX).transition(I).attr("transform",o)),O.add(c.transition(I).attr("transform",o)),O.add(l.transition(I).attr("transform",o)),O(function(){var t,r=[],i=[];if(L){for(t=0;t<L;t++)r.push("."+a.shape+"-"+(M+t)),i.push("."+a.text+"-"+(M+t));e.svg.selectAll("."+a.shapes).selectAll(r).remove(),e.svg.selectAll("."+a.texts).selectAll(i).remove(),e.svg.select("."+a.xgrid).remove()}c.attr("transform",null).attr("x1",e.xgridAttr.x1).attr("x2",e.xgridAttr.x2).attr("y1",e.xgridAttr.y1).attr("y2",e.xgridAttr.y2).style("opacity",e.xgridAttr.opacity),l.attr("transform",null),l.select("line").attr("x1",n.axis_rotated?0:A).attr("x2",n.axis_rotated?e.width:A),l.select("text").attr("x",n.axis_rotated?e.width:0).attr("y",A),d.attr("transform",null).attr("d",v),p.attr("transform",null).attr("d",m),g.attr("transform",null).attr("d",b),_.attr("transform",null).attr("cx",w).attr("cy",S),h.attr("transform",null).attr("x",T).attr("y",P).style("fill-opacity",e.opacityForText.bind(e)),f.attr("transform",null),f.filter(e.isRegionOnX).attr("x",e.regionX.bind(e)).attr("width",e.regionWidth.bind(e)),R(),e.flowing=!1})}},r.prototype.focus=function(t){var e,n=this.internal;t=n.mapToTargetIds(t),e=n.svg.selectAll(n.selectorTargets(t.filter(n.isTargetToShow,n))),this.revert(),this.defocus(),e.classed(a.focused,!0).classed(a.defocused,!1),n.hasArcType()&&n.expandArc(t),n.toggleFocusLegend(t,!0),n.focusedTargetIds=t,n.defocusedTargetIds=n.defocusedTargetIds.filter(function(e){return t.indexOf(e)<0})},r.prototype.defocus=function(t){var e=this.internal;t=e.mapToTargetIds(t),e.svg.selectAll(e.selectorTargets(t.filter(e.isTargetToShow,e))).classed(a.focused,!1).classed(a.defocused,!0),e.hasArcType()&&e.unexpandArc(t),e.toggleFocusLegend(t,!1),e.focusedTargetIds=e.focusedTargetIds.filter(function(e){return t.indexOf(e)<0}),e.defocusedTargetIds=t},r.prototype.revert=function(t){var e=this.internal;t=e.mapToTargetIds(t),e.svg.selectAll(e.selectorTargets(t)).classed(a.focused,!1).classed(a.defocused,!1),e.hasArcType()&&e.unexpandArc(t),e.config.legend_show&&(e.showLegend(t.filter(e.isLegendToShow.bind(e))),e.legend.selectAll(e.selectorLegends(t)).filter(function(){return e.d3.select(this).classed(a.legendItemFocused)}).classed(a.legendItemFocused,!1)),e.focusedTargetIds=[],e.defocusedTargetIds=[]},r.prototype.xgrids=function(t){var e=this.internal,n=e.config;return t?(n.grid_x_lines=t,e.redrawWithoutRescale(),n.grid_x_lines):n.grid_x_lines},r.prototype.xgrids.add=function(t){var e=this.internal;return this.xgrids(e.config.grid_x_lines.concat(t||[]))},r.prototype.xgrids.remove=function(t){this.internal.removeGridLines(t,!0)},r.prototype.ygrids=function(t){var e=this.internal,n=e.config;return t?(n.grid_y_lines=t,e.redrawWithoutRescale(),n.grid_y_lines):n.grid_y_lines},r.prototype.ygrids.add=function(t){var e=this.internal;return this.ygrids(e.config.grid_y_lines.concat(t||[]))},r.prototype.ygrids.remove=function(t){this.internal.removeGridLines(t,!1)},r.prototype.groups=function(t){var e=this.internal,n=e.config;return _(t)?n.data_groups:(n.data_groups=t,e.redraw(),n.data_groups)},r.prototype.legend=function(){},r.prototype.legend.show=function(t){var e=this.internal;e.showLegend(e.mapToTargetIds(t)),e.updateAndRedraw({withLegend:!0})},r.prototype.legend.hide=function(t){var e=this.internal;e.hideLegend(e.mapToTargetIds(t)),e.updateAndRedraw({withLegend:!1})},r.prototype.load=function(t){var e=this.internal,n=e.config;t.xs&&e.addXs(t.xs),"names"in t&&r.prototype.data.names.bind(this)(t.names),"classes"in t&&Object.keys(t.classes).forEach(function(e){n.data_classes[e]=t.classes[e]}),"categories"in t&&e.isCategorized()&&(n.axis_x_categories=t.categories),"axes"in t&&Object.keys(t.axes).forEach(function(e){n.data_axes[e]=t.axes[e]}),"colors"in t&&Object.keys(t.colors).forEach(function(e){n.data_colors[e]=t.colors[e]}),"cacheIds"in t&&e.hasCaches(t.cacheIds)?e.load(e.getCaches(t.cacheIds),t.done):"unload"in t?e.unload(e.mapToTargetIds("boolean"==typeof t.unload&&t.unload?null:t.unload),function(){e.loadFromArgs(t)}):e.loadFromArgs(t)},r.prototype.unload=function(t){var e=this.internal;(t=t||{})instanceof Array?t={ids:t}:"string"==typeof t&&(t={ids:[t]}),e.unload(e.mapToTargetIds(t.ids),function(){e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0}),t.done&&t.done()})},r.prototype.regions=function(t){var e=this.internal,n=e.config;return t?(n.regions=t,e.redrawWithoutRescale(),n.regions):n.regions},r.prototype.regions.add=function(t){var e=this.internal,n=e.config;return t?(n.regions=n.regions.concat(t),e.redrawWithoutRescale(),n.regions):n.regions},r.prototype.regions.remove=function(t){var e,n,r,i=this.internal,o=i.config;return e=c(t=t||{},"duration",o.transition_duration),n=c(t,"classes",[a.region]),r=i.main.select("."+a.regions).selectAll(n.map(function(t){return"."+t})),(e?r.transition().duration(e):r).style("opacity",0).remove(),o.regions=o.regions.filter(function(t){var e=!1;return!t.class||(t.class.split(" ").forEach(function(t){n.indexOf(t)>=0&&(e=!0)}),!e)}),o.regions},r.prototype.selected=function(t){var e=this.internal,n=e.d3;return n.merge(e.main.selectAll("."+a.shapes+e.getTargetSelectorSuffix(t)).selectAll("."+a.shape).filter(function(){return n.select(this).classed(a.SELECTED)}).map(function(t){return t.map(function(t){var e=t.__data__;return e.data?e.data:e})}))},r.prototype.select=function(t,e,n){var r=this.internal,i=r.d3,o=r.config;o.data_selection_enabled&&r.main.selectAll("."+a.shapes).selectAll("."+a.shape).each(function(s,u){var c=i.select(this),l=s.data?s.data.id:s.id,f=r.getToggle(this,s).bind(r),d=o.data_selection_grouped||!t||t.indexOf(l)>=0,p=!e||e.indexOf(u)>=0,g=c.classed(a.SELECTED);c.classed(a.line)||c.classed(a.area)||(d&&p?o.data_selection_isselectable(s)&&!g&&f(!0,c.classed(a.SELECTED,!0),s,u):h(n)&&n&&g&&f(!1,c.classed(a.SELECTED,!1),s,u))})},r.prototype.unselect=function(t,e){var n=this.internal,r=n.d3,i=n.config;i.data_selection_enabled&&n.main.selectAll("."+a.shapes).selectAll("."+a.shape).each(function(o,s){var u=r.select(this),c=o.data?o.data.id:o.id,l=n.getToggle(this,o).bind(n),f=i.data_selection_grouped||!t||t.indexOf(c)>=0,h=!e||e.indexOf(s)>=0,d=u.classed(a.SELECTED);u.classed(a.line)||u.classed(a.area)||f&&h&&i.data_selection_isselectable(o)&&d&&l(!1,u.classed(a.SELECTED,!1),o,s)})},r.prototype.show=function(t,e){var n,r=this.internal;t=r.mapToTargetIds(t),e=e||{},r.removeHiddenTargetIds(t),(n=r.svg.selectAll(r.selectorTargets(t))).transition().style("display","initial","important").style("opacity",1,"important").call(r.endall,function(){n.style("opacity",null).style("opacity",1)}),e.withLegend&&r.showLegend(t),r.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0})},r.prototype.hide=function(t,e){var n,r=this.internal;t=r.mapToTargetIds(t),e=e||{},r.addHiddenTargetIds(t),(n=r.svg.selectAll(r.selectorTargets(t))).transition().style("opacity",0,"important").call(r.endall,function(){n.style("opacity",null).style("opacity",0),n.style("display","none")}),e.withLegend&&r.hideLegend(t),r.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0})},r.prototype.toggle=function(t,e){var n=this,r=this.internal;r.mapToTargetIds(t).forEach(function(t){r.isTargetToShow(t)?n.hide(t,e):n.show(t,e)})},r.prototype.tooltip=function(){},r.prototype.tooltip.show=function(t){var e,n,r=this.internal,i={};t.mouse?i=t.mouse:(t.data?n=t.data:void 0!==t.x&&(e=t.id?r.data.targets.filter(function(e){return e.id===t.id}):r.data.targets,n=r.filterByX(e,t.x).slice(0,1)[0]),i=n?r.getMousePosition(n):null),r.dispatchEvent("mousemove",i),r.config.tooltip_onshow.call(r,n)},r.prototype.tooltip.hide=function(){this.internal.dispatchEvent("mouseout",0),this.internal.config.tooltip_onhide.call(this)},r.prototype.transform=function(t,e){var n=this.internal,r=["pie","donut"].indexOf(t)>=0?{withTransform:!0}:null;n.transformTo(e,t,r)},e.prototype.transformTo=function(t,e,n){var r=this,i=!r.hasArcType(),a=n||{withTransitionForAxis:i};a.withTransitionForTransform=!1,r.transiting=!1,r.setTargetType(t,e),r.updateTargets(r.data.targets),r.updateAndRedraw(a)},r.prototype.x=function(t){var e=this.internal;return arguments.length&&(e.updateTargetX(e.data.targets,t),e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})),e.data.xs},r.prototype.xs=function(t){var e=this.internal;return arguments.length&&(e.updateTargetXs(e.data.targets,t),e.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0})),e.data.xs},r.prototype.zoom=function(t){var e=this.internal;return t?(e.isTimeSeries()&&(t=t.map(function(t){return e.parseDate(t)})),e.config.subchart_show?e.brush.selectionAsValue(t,!0):(e.updateXDomain(null,!0,!1,!1,t),e.redraw({withY:e.config.zoom_rescale,withSubchart:!1})),e.config.zoom_onzoom.call(this,e.x.orgDomain()),t):e.x.domain()},r.prototype.zoom.enable=function(t){var e=this.internal;e.config.zoom_enabled=t,e.updateAndRedraw()},r.prototype.unzoom=function(){var t=this.internal;t.config.subchart_show?t.brush.clear():(t.updateXDomain(null,!0,!1,!1,t.subX.domain()),t.redraw({withY:t.config.zoom_rescale,withSubchart:!1}))},r.prototype.zoom.max=function(t){var e=this.internal,n=e.config,r=e.d3;if(0!==t&&!t)return n.zoom_x_max;n.zoom_x_max=r.max([e.orgXDomain[1],t])},r.prototype.zoom.min=function(t){var e=this.internal,n=e.config,r=e.d3;if(0!==t&&!t)return n.zoom_x_min;n.zoom_x_min=r.min([e.orgXDomain[0],t])},r.prototype.zoom.range=function(t){if(!arguments.length)return{max:this.domain.max(),min:this.domain.min()};h(t.max)&&this.domain.max(t.max),h(t.min)&&this.domain.min(t.min)},e.prototype.initPie=function(){var t=this,e=t.d3;t.pie=e.pie().value(function(t){return t.values.reduce(function(t,e){return t+e.value},0)});var n=t.getOrderFunction();if(n&&(t.isOrderAsc()||t.isOrderDesc())){var r=n;n=function(t,e){return-1*r(t,e)}}t.pie.sort(n||null)},e.prototype.updateRadius=function(){var t=this,e=t.config,n=e.gauge_width||e.donut_width,r=t.filterTargetsToShow(t.data.targets).length*t.config.gauge_arcs_minWidth;t.radiusExpanded=Math.min(t.arcWidth,t.arcHeight)/2*(t.hasType("gauge")?.85:1),t.radius=.95*t.radiusExpanded,t.innerRadiusRatio=n?(t.radius-n)/t.radius:.6,t.innerRadius=t.hasType("donut")||t.hasType("gauge")?t.radius*t.innerRadiusRatio:0,t.gaugeArcWidth=n||(r<=t.radius-t.innerRadius?t.radius-t.innerRadius:r<=t.radius?r:t.radius)},e.prototype.updateArc=function(){var t=this;t.svgArc=t.getSvgArc(),t.svgArcExpanded=t.getSvgArcExpanded(),t.svgArcExpandedSub=t.getSvgArcExpanded(.98)},e.prototype.updateAngle=function(t){var e,n,r,i,a=this,o=a.config,s=!1,u=0;return o?(a.pie(a.filterTargetsToShow(a.data.targets)).forEach(function(e){s||e.data.id!==t.data.id||(s=!0,(t=e).index=u),u++}),isNaN(t.startAngle)&&(t.startAngle=0),isNaN(t.endAngle)&&(t.endAngle=t.startAngle),a.isGaugeType(t.data)&&(e=o.gauge_min,n=o.gauge_max,r=Math.PI*(o.gauge_fullCircle?2:1)/(n-e),i=t.value<e?0:t.value<n?t.value-e:n-e,t.startAngle=o.gauge_startingAngle,t.endAngle=t.startAngle+r*i),s?t:null):null},e.prototype.getSvgArc=function(){var t=this,e=t.hasType("gauge"),n=t.gaugeArcWidth/t.filterTargetsToShow(t.data.targets).length,r=t.d3.arc().outerRadius(function(r){return e?t.radius-n*r.index:t.radius}).innerRadius(function(r){return e?t.radius-n*(r.index+1):t.innerRadius}),i=function(e,n){var i;return n?r(e):(i=t.updateAngle(e))?r(i):"M 0 0"};return i.centroid=r.centroid,i},e.prototype.getSvgArcExpanded=function(t){t=t||1;var e=this,n=e.hasType("gauge"),r=e.gaugeArcWidth/e.filterTargetsToShow(e.data.targets).length,i=Math.min(e.radiusExpanded*t-e.radius,.8*r-100*(1-t)),a=e.d3.arc().outerRadius(function(a){return n?e.radius-r*a.index+i:e.radiusExpanded*t}).innerRadius(function(t){return n?e.radius-r*(t.index+1):e.innerRadius});return function(t){var n=e.updateAngle(t);return n?a(n):"M 0 0"}},e.prototype.getArc=function(t,e,n){return n||this.isArcType(t.data)?this.svgArc(t,e):"M 0 0"},e.prototype.transformForArcLabel=function(t){var e,n,r,i,a,o=this,s=o.config,u=o.updateAngle(t),c="",l=o.hasType("gauge");if(u&&!l)e=this.svgArc.centroid(u),n=isNaN(e[0])?0:e[0],r=isNaN(e[1])?0:e[1],i=Math.sqrt(n*n+r*r),c="translate("+n*(a=o.hasType("donut")&&s.donut_label_ratio?p(s.donut_label_ratio)?s.donut_label_ratio(t,o.radius,i):s.donut_label_ratio:o.hasType("pie")&&s.pie_label_ratio?p(s.pie_label_ratio)?s.pie_label_ratio(t,o.radius,i):s.pie_label_ratio:o.radius&&i?(36/o.radius>.375?1.175-36/o.radius:.8)*o.radius/i:0)+","+r*a+")";else if(u&&l&&o.filterTargetsToShow(o.data.targets).length>1){var f=Math.sin(u.endAngle-Math.PI/2);c="translate("+(n=Math.cos(u.endAngle-Math.PI/2)*(o.radiusExpanded+25))+","+(r=f*(o.radiusExpanded+15-Math.abs(10*f))+3)+")"}return c},e.prototype.getArcRatio=function(t){var e=this.config,n=Math.PI*(this.hasType("gauge")&&!e.gauge_fullCircle?1:2);return t?(t.endAngle-t.startAngle)/n:null},e.prototype.convertToArcData=function(t){return this.addName({id:t.data.id,value:t.value,ratio:this.getArcRatio(t),index:t.index})},e.prototype.textForArcLabel=function(t){var e,n,r,i,a,o=this;return o.shouldShowArcLabel()?(n=(e=o.updateAngle(t))?e.value:null,r=o.getArcRatio(e),i=t.data.id,o.hasType("gauge")||o.meetsArcLabelThreshold(r)?(a=o.getArcLabelFormat())?a(n,r,i):o.defaultArcValueFormat(n,r):""):""},e.prototype.textForGaugeMinMax=function(t,e){var n=this.getGaugeLabelExtents();return n?n(t,e):t},e.prototype.expandArc=function(t){var e,n=this;n.transiting?e=window.setInterval(function(){n.transiting||(window.clearInterval(e),n.legend.selectAll(".c3-legend-item-focused").size()>0&&n.expandArc(t))},10):(t=n.mapToTargetIds(t),n.svg.selectAll(n.selectorTargets(t,"."+a.chartArc)).each(function(t){n.shouldExpand(t.data.id)&&n.d3.select(this).selectAll("path").transition().duration(n.expandDuration(t.data.id)).attr("d",n.svgArcExpanded).transition().duration(2*n.expandDuration(t.data.id)).attr("d",n.svgArcExpandedSub).each(function(t){n.isDonutType(t.data)})}))},e.prototype.unexpandArc=function(t){var e=this;e.transiting||(t=e.mapToTargetIds(t),e.svg.selectAll(e.selectorTargets(t,"."+a.chartArc)).selectAll("path").transition().duration(function(t){return e.expandDuration(t.data.id)}).attr("d",e.svgArc),e.svg.selectAll("."+a.arc))},e.prototype.expandDuration=function(t){var e=this.config;return this.isDonutType(t)?e.donut_expand_duration:this.isGaugeType(t)?e.gauge_expand_duration:this.isPieType(t)?e.pie_expand_duration:50},e.prototype.shouldExpand=function(t){var e=this.config;return this.isDonutType(t)&&e.donut_expand||this.isGaugeType(t)&&e.gauge_expand||this.isPieType(t)&&e.pie_expand},e.prototype.shouldShowArcLabel=function(){var t=this.config,e=!0;return this.hasType("donut")?e=t.donut_label_show:this.hasType("pie")&&(e=t.pie_label_show),e},e.prototype.meetsArcLabelThreshold=function(t){var e=this.config;return t>=(this.hasType("donut")?e.donut_label_threshold:e.pie_label_threshold)},e.prototype.getArcLabelFormat=function(){var t=this.config,e=t.pie_label_format;return this.hasType("gauge")?e=t.gauge_label_format:this.hasType("donut")&&(e=t.donut_label_format),e},e.prototype.getGaugeLabelExtents=function(){return this.config.gauge_label_extents},e.prototype.getArcTitle=function(){return this.hasType("donut")?this.config.donut_title:""},e.prototype.updateTargetsForArc=function(t){var e,n=this,r=n.main,i=n.classChartArc.bind(n),o=n.classArcs.bind(n),s=n.classFocus.bind(n);(e=r.select("."+a.chartArcs).selectAll("."+a.chartArc).data(n.pie(t)).attr("class",function(t){return i(t)+s(t.data)}).enter().append("g").attr("class",i)).append("g").attr("class",o),e.append("text").attr("dy",n.hasType("gauge")?"-.1em":".35em").style("opacity",0).style("text-anchor","middle").style("pointer-events","none")},e.prototype.initArc=function(){var t=this;t.arcs=t.main.select("."+a.chart).append("g").attr("class",a.chartArcs).attr("transform",t.getTranslate("arc")),t.arcs.append("text").attr("class",a.chartArcsTitle).style("text-anchor","middle").text(t.getArcTitle())},e.prototype.redrawArc=function(t,e,n){var r,i,o,s,u=this,c=u.d3,l=u.config,f=u.main,h=u.hasType("gauge");if(i=(r=f.selectAll("."+a.arcs).selectAll("."+a.arc).data(u.arcData.bind(u))).enter().append("path").attr("class",u.classArc.bind(u)).style("fill",function(t){return u.color(t.data)}).style("cursor",function(t){return l.interaction_enabled&&l.data_selection_isselectable(t)?"pointer":null}).each(function(t){u.isGaugeType(t.data)&&(t.startAngle=t.endAngle=l.gauge_startingAngle),this._current=t}).merge(r),h&&(s=(o=f.selectAll("."+a.arcs).selectAll("."+a.arcLabelLine).data(u.arcData.bind(u))).enter().append("rect").attr("class",function(t){return a.arcLabelLine+" "+a.target+" "+a.target+"-"+t.data.id}).merge(o),1===u.filterTargetsToShow(u.data.targets).length?s.style("display","none"):s.style("fill",function(t){return u.levelColor?u.levelColor(t.data.values[0].value):u.color(t.data)}).style("display",l.gauge_labelLine_show?"":"none").each(function(t){var e=0,n=0,r=0,i="";if(u.hiddenTargetIds.indexOf(t.data.id)<0){var a=u.updateAngle(t),o=u.gaugeArcWidth/u.filterTargetsToShow(u.data.targets).length*(a.index+1),s=a.endAngle-Math.PI/2,l=u.radius-o,f=s-(0===l?0:1/l);e=u.radiusExpanded-u.radius+o,n=Math.cos(f)*l,r=Math.sin(f)*l,i="rotate("+180*s/Math.PI+", "+n+", "+r+")"}c.select(this).attr("x",n).attr("y",r).attr("width",e).attr("height",2).attr("transform",i).style("stroke-dasharray","0, "+(e+2)+", 0")})),i.attr("transform",function(t){return!u.isGaugeType(t.data)&&n?"scale(0)":""}).on("mouseover",l.interaction_enabled?function(t){var e,n;u.transiting||(e=u.updateAngle(t))&&(n=u.convertToArcData(e),u.expandArc(e.data.id),u.api.focus(e.data.id),u.toggleFocusLegend(e.data.id,!0),u.config.data_onmouseover(n,this))}:null).on("mousemove",l.interaction_enabled?function(t){var e,n=u.updateAngle(t);n&&(e=[u.convertToArcData(n)],u.showTooltip(e,this))}:null).on("mouseout",l.interaction_enabled?function(t){var e,n;u.transiting||(e=u.updateAngle(t))&&(n=u.convertToArcData(e),u.unexpandArc(e.data.id),u.api.revert(),u.revertLegend(),u.hideTooltip(),u.config.data_onmouseout(n,this))}:null).on("click",l.interaction_enabled?function(t,e){var n,r=u.updateAngle(t);r&&(n=u.convertToArcData(r),u.toggleShape&&u.toggleShape(this,n,e),u.config.data_onclick.call(u.api,n,this))}:null).each(function(){u.transiting=!0}).transition().duration(t).attrTween("d",function(t){var e,n=u.updateAngle(t);return n?(isNaN(this._current.startAngle)&&(this._current.startAngle=0),isNaN(this._current.endAngle)&&(this._current.endAngle=this._current.startAngle),e=c.interpolate(this._current,n),this._current=e(0),function(n){var r=e(n);return r.data=t.data,u.getArc(r,!0)}):function(){return"M 0 0"}}).attr("transform",n?"scale(1)":"").style("fill",function(t){return u.levelColor?u.levelColor(t.data.values[0].value):u.color(t.data.id)}).call(u.endall,function(){u.transiting=!1}),r.exit().transition().duration(e).style("opacity",0).remove(),f.selectAll("."+a.chartArc).select("text").style("opacity",0).attr("class",function(t){return u.isGaugeType(t.data)?a.gaugeValue:""}).text(u.textForArcLabel.bind(u)).attr("transform",u.transformForArcLabel.bind(u)).style("font-size",function(t){return u.isGaugeType(t.data)&&1===u.filterTargetsToShow(u.data.targets).length?Math.round(u.radius/5)+"px":""}).transition().duration(t).style("opacity",function(t){return u.isTargetToShow(t.data.id)&&u.isArcType(t.data)?1:0}),f.select("."+a.chartArcsTitle).style("opacity",u.hasType("donut")||h?1:0),h){var d=0,p=u.arcs.select("g."+a.chartArcsBackground).selectAll("path."+a.chartArcsBackground).data(u.data.targets);p.enter().append("path").attr("class",function(t,e){return a.chartArcsBackground+" "+a.chartArcsBackground+"-"+e}).merge(p).attr("d",function(t){if(u.hiddenTargetIds.indexOf(t.id)>=0)return"M 0 0";var e={data:[{value:l.gauge_max}],startAngle:l.gauge_startingAngle,endAngle:-1*l.gauge_startingAngle*(l.gauge_fullCircle?Math.PI:1),index:d++};return u.getArc(e,!0,!0)}),p.exit().remove(),u.arcs.select("."+a.chartArcsGaugeUnit).attr("dy",".75em").text(l.gauge_label_show?l.gauge_units:""),u.arcs.select("."+a.chartArcsGaugeMin).attr("dx",-1*(u.innerRadius+(u.radius-u.innerRadius)/(l.gauge_fullCircle?1:2))+"px").attr("dy","1.2em").text(l.gauge_label_show?u.textForGaugeMinMax(l.gauge_min,!1):""),u.arcs.select("."+a.chartArcsGaugeMax).attr("dx",u.innerRadius+(u.radius-u.innerRadius)/(l.gauge_fullCircle?1:2)+"px").attr("dy","1.2em").text(l.gauge_label_show?u.textForGaugeMinMax(l.gauge_max,!0):"")}},e.prototype.initGauge=function(){var t=this.arcs;this.hasType("gauge")&&(t.append("g").attr("class",a.chartArcsBackground),t.append("text").attr("class",a.chartArcsGaugeUnit).style("text-anchor","middle").style("pointer-events","none"),t.append("text").attr("class",a.chartArcsGaugeMin).style("text-anchor","middle").style("pointer-events","none"),t.append("text").attr("class",a.chartArcsGaugeMax).style("text-anchor","middle").style("pointer-events","none"))},e.prototype.getGaugeLabelHeight=function(){return this.config.gauge_label_show?20:0},e.prototype.hasCaches=function(t){for(var e=0;e<t.length;e++)if(!(t[e]in this.cache))return!1;return!0},e.prototype.addCache=function(t,e){this.cache[t]=this.cloneTarget(e)},e.prototype.getCaches=function(t){var e,n=[];for(e=0;e<t.length;e++)t[e]in this.cache&&n.push(this.cloneTarget(this.cache[t[e]]));return n},e.prototype.categoryName=function(t){var e=this.config;return t<e.axis_x_categories.length?e.axis_x_categories[t]:t},e.prototype.generateTargetClass=function(t){return t||0===t?("-"+t).replace(/\s/g,"-"):""},e.prototype.generateClass=function(t,e){return" "+t+" "+t+this.generateTargetClass(e)},e.prototype.classText=function(t){return this.generateClass(a.text,t.index)},e.prototype.classTexts=function(t){return this.generateClass(a.texts,t.id)},e.prototype.classShape=function(t){return this.generateClass(a.shape,t.index)},e.prototype.classShapes=function(t){return this.generateClass(a.shapes,t.id)},e.prototype.classLine=function(t){return this.classShape(t)+this.generateClass(a.line,t.id)},e.prototype.classLines=function(t){return this.classShapes(t)+this.generateClass(a.lines,t.id)},e.prototype.classCircle=function(t){return this.classShape(t)+this.generateClass(a.circle,t.index)},e.prototype.classCircles=function(t){return this.classShapes(t)+this.generateClass(a.circles,t.id)},e.prototype.classBar=function(t){return this.classShape(t)+this.generateClass(a.bar,t.index)},e.prototype.classBars=function(t){return this.classShapes(t)+this.generateClass(a.bars,t.id)},e.prototype.classArc=function(t){return this.classShape(t.data)+this.generateClass(a.arc,t.data.id)},e.prototype.classArcs=function(t){return this.classShapes(t.data)+this.generateClass(a.arcs,t.data.id)},e.prototype.classArea=function(t){return this.classShape(t)+this.generateClass(a.area,t.id)},e.prototype.classAreas=function(t){return this.classShapes(t)+this.generateClass(a.areas,t.id)},e.prototype.classRegion=function(t,e){return this.generateClass(a.region,e)+" "+("class"in t?t.class:"")},e.prototype.classEvent=function(t){return this.generateClass(a.eventRect,t.index)},e.prototype.classTarget=function(t){var e=this.config.data_classes[t],n="";return e&&(n=" "+a.target+"-"+e),this.generateClass(a.target,t)+n},e.prototype.classFocus=function(t){return this.classFocused(t)+this.classDefocused(t)},e.prototype.classFocused=function(t){return" "+(this.focusedTargetIds.indexOf(t.id)>=0?a.focused:"")},e.prototype.classDefocused=function(t){return" "+(this.defocusedTargetIds.indexOf(t.id)>=0?a.defocused:"")},e.prototype.classChartText=function(t){return a.chartText+this.classTarget(t.id)},e.prototype.classChartLine=function(t){return a.chartLine+this.classTarget(t.id)},e.prototype.classChartBar=function(t){return a.chartBar+this.classTarget(t.id)},e.prototype.classChartArc=function(t){return a.chartArc+this.classTarget(t.data.id)},e.prototype.getTargetSelectorSuffix=function(t){return this.generateTargetClass(t).replace(/([?!@#$%^&*()_=+,.<>'":;\[\]\/|~`{}\\])/g,"\\$1")},e.prototype.selectorTarget=function(t,e){return(e||"")+"."+a.target+this.getTargetSelectorSuffix(t)},e.prototype.selectorTargets=function(t,e){var n=this;return(t=t||[]).length?t.map(function(t){return n.selectorTarget(t,e)}):null},e.prototype.selectorLegend=function(t){return"."+a.legendItem+this.getTargetSelectorSuffix(t)},e.prototype.selectorLegends=function(t){var e=this;return t&&t.length?t.map(function(t){return e.selectorLegend(t)}):null},e.prototype.getClipPath=function(t){return"url("+(window.navigator.appVersion.toLowerCase().indexOf("msie 9.")>=0?"":document.URL.split("#")[0])+"#"+t+")"},e.prototype.appendClip=function(t,e){return t.append("clipPath").attr("id",e).append("rect")},e.prototype.getAxisClipX=function(t){var e=Math.max(30,this.margin.left);return t?-(1+e):-(e-1)},e.prototype.getAxisClipY=function(t){return t?-20:-this.margin.top},e.prototype.getXAxisClipX=function(){return this.getAxisClipX(!this.config.axis_rotated)},e.prototype.getXAxisClipY=function(){return this.getAxisClipY(!this.config.axis_rotated)},e.prototype.getYAxisClipX=function(){return this.config.axis_y_inner?-1:this.getAxisClipX(this.config.axis_rotated)},e.prototype.getYAxisClipY=function(){return this.getAxisClipY(this.config.axis_rotated)},e.prototype.getAxisClipWidth=function(t){var e=Math.max(30,this.margin.left),n=Math.max(30,this.margin.right);return t?this.width+2+e+n:this.margin.left+20},e.prototype.getAxisClipHeight=function(t){return(t?this.margin.bottom:this.margin.top+this.height)+20},e.prototype.getXAxisClipWidth=function(){return this.getAxisClipWidth(!this.config.axis_rotated)},e.prototype.getXAxisClipHeight=function(){return this.getAxisClipHeight(!this.config.axis_rotated)},e.prototype.getYAxisClipWidth=function(){return this.getAxisClipWidth(this.config.axis_rotated)+(this.config.axis_y_inner?20:0)},e.prototype.getYAxisClipHeight=function(){return this.getAxisClipHeight(this.config.axis_rotated)},e.prototype.generateColor=function(){var t=this.config,e=this.d3,n=t.data_colors,r=x(t.color_pattern)?t.color_pattern:e.schemeCategory10,i=t.data_color,a=[];return function(t){var e,o=t.id||t.data&&t.data.id||t;return n[o]instanceof Function?e=n[o](t):n[o]?e=n[o]:(a.indexOf(o)<0&&a.push(o),e=r[a.indexOf(o)%r.length],n[o]=e),i instanceof Function?i(e,t):e}},e.prototype.generateLevelColor=function(){var t=this.config,e=t.color_pattern,n=t.color_threshold,r="value"===n.unit,i=n.values&&n.values.length?n.values:[],a=n.max||100;return x(n)&&x(e)?function(t){var n,o=e[e.length-1];for(n=0;n<i.length;n++)if((r?t:100*t/a)<i[n]){o=e[n];break}return o}:null},e.prototype.getDefaultConfig=function(){var t={bindto:"#chart",svg_classname:void 0,size_width:void 0,size_height:void 0,padding_left:void 0,padding_right:void 0,padding_top:void 0,padding_bottom:void 0,resize_auto:!0,zoom_enabled:!1,zoom_initialRange:void 0,zoom_type:"scroll",zoom_disableDefaultBehavior:!1,zoom_privileged:!1,zoom_rescale:!1,zoom_onzoom:function(){},zoom_onzoomstart:function(){},zoom_onzoomend:function(){},zoom_x_min:void 0,zoom_x_max:void 0,interaction_brighten:!0,interaction_enabled:!0,onmouseover:function(){},onmouseout:function(){},onresize:function(){},onresized:function(){},oninit:function(){},onrendered:function(){},transition_duration:350,data_x:void 0,data_xs:{},data_xFormat:"%Y-%m-%d",data_xLocaltime:!0,data_xSort:!0,data_idConverter:function(t){return t},data_names:{},data_classes:{},data_groups:[],data_axes:{},data_type:void 0,data_types:{},data_labels:{},data_order:"desc",data_regions:{},data_color:void 0,data_colors:{},data_hide:!1,data_filter:void 0,data_selection_enabled:!1,data_selection_grouped:!1,data_selection_isselectable:function(){return!0},data_selection_multiple:!0,data_selection_draggable:!1,data_onclick:function(){},data_onmouseover:function(){},data_onmouseout:function(){},data_onselected:function(){},data_onunselected:function(){},data_url:void 0,data_headers:void 0,data_json:void 0,data_rows:void 0,data_columns:void 0,data_mimeType:void 0,data_keys:void 0,data_empty_label_text:"",subchart_show:!1,subchart_size_height:60,subchart_axis_x_show:!0,subchart_onbrush:function(){},color_pattern:[],color_threshold:{},legend_show:!0,legend_hide:!1,legend_position:"bottom",legend_inset_anchor:"top-left",legend_inset_x:10,legend_inset_y:0,legend_inset_step:void 0,legend_item_onclick:void 0,legend_item_onmouseover:void 0,legend_item_onmouseout:void 0,legend_equally:!1,legend_padding:0,legend_item_tile_width:10,legend_item_tile_height:10,axis_rotated:!1,axis_x_show:!0,axis_x_type:"indexed",axis_x_localtime:!0,axis_x_categories:[],axis_x_tick_centered:!1,axis_x_tick_format:void 0,axis_x_tick_culling:{},axis_x_tick_culling_max:10,axis_x_tick_count:void 0,axis_x_tick_fit:!0,axis_x_tick_values:null,axis_x_tick_rotate:0,axis_x_tick_outer:!0,axis_x_tick_multiline:!0,axis_x_tick_multilineMax:0,axis_x_tick_width:null,axis_x_max:void 0,axis_x_min:void 0,axis_x_padding:{},axis_x_height:void 0,axis_x_selection:void 0,axis_x_label:{},axis_x_inner:void 0,axis_y_show:!0,axis_y_type:void 0,axis_y_max:void 0,axis_y_min:void 0,axis_y_inverted:!1,axis_y_center:void 0,axis_y_inner:void 0,axis_y_label:{},axis_y_tick_format:void 0,axis_y_tick_outer:!0,axis_y_tick_values:null,axis_y_tick_rotate:0,axis_y_tick_count:void 0,axis_y_tick_time_type:void 0,axis_y_tick_time_interval:void 0,axis_y_padding:{},axis_y_default:void 0,axis_y2_show:!1,axis_y2_max:void 0,axis_y2_min:void 0,axis_y2_inverted:!1,axis_y2_center:void 0,axis_y2_inner:void 0,axis_y2_label:{},axis_y2_tick_format:void 0,axis_y2_tick_outer:!0,axis_y2_tick_values:null,axis_y2_tick_count:void 0,axis_y2_padding:{},axis_y2_default:void 0,grid_x_show:!1,grid_x_type:"tick",grid_x_lines:[],grid_y_show:!1,grid_y_lines:[],grid_y_ticks:10,grid_focus_show:!0,grid_lines_front:!0,point_show:!0,point_r:2.5,point_sensitivity:10,point_focus_expand_enabled:!0,point_focus_expand_r:void 0,point_select_r:void 0,line_connectNull:!1,line_step_type:"step",bar_width:void 0,bar_width_ratio:.6,bar_width_max:void 0,bar_zerobased:!0,bar_space:0,area_zerobased:!0,area_above:!1,pie_label_show:!0,pie_label_format:void 0,pie_label_threshold:.05,pie_label_ratio:void 0,pie_expand:{},pie_expand_duration:50,gauge_fullCircle:!1,gauge_label_show:!0,gauge_labelLine_show:!0,gauge_label_format:void 0,gauge_min:0,gauge_max:100,gauge_startingAngle:-1*Math.PI/2,gauge_label_extents:void 0,gauge_units:void 0,gauge_width:void 0,gauge_arcs_minWidth:5,gauge_expand:{},gauge_expand_duration:50,donut_label_show:!0,donut_label_format:void 0,donut_label_threshold:.05,donut_label_ratio:void 0,donut_width:void 0,donut_title:"",donut_expand:{},donut_expand_duration:50,spline_interpolation_type:"cardinal",regions:[],tooltip_show:!0,tooltip_grouped:!0,tooltip_order:void 0,tooltip_format_title:void 0,tooltip_format_name:void 0,tooltip_format_value:void 0,tooltip_position:void 0,tooltip_contents:function(t,e,n,r){return this.getTooltipContent?this.getTooltipContent(t,e,n,r):""},tooltip_init_show:!1,tooltip_init_x:0,tooltip_init_position:{top:"0px",left:"50px"},tooltip_onshow:function(){},tooltip_onhide:function(){},title_text:void 0,title_padding:{top:0,right:0,bottom:0,left:0},title_position:"top-center"};return Object.keys(this.additionalConfig).forEach(function(e){t[e]=this.additionalConfig[e]},this),t},e.prototype.additionalConfig={},e.prototype.loadConfig=function(e){var n,r,i,a=this.config;Object.keys(a).forEach(function(o){n=e,r=o.split("_"),i=function e(){var i=r.shift();return i&&n&&"object"===t(n)&&i in n?(n=n[i],e()):i?void 0:n}(),h(i)&&(a[o]=i)})},e.prototype.convertUrlToData=function(t,e,n,r,i){var a,o,s=this,u=e||"csv";"json"===u?(a=s.d3.json,o=s.convertJsonToData):"tsv"===u?(a=s.d3.tsv,o=s.convertXsvToData):(a=s.d3.csv,o=s.convertXsvToData),a(t,n).then(function(t){i.call(s,o.call(s,t,r))}).catch(function(t){throw t})},e.prototype.convertXsvToData=function(t){var e=t.columns;return 0===t.length?{keys:e,rows:[e.reduce(function(t,e){return Object.assign(t,function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}({},e,null))},{})]}:{keys:e,rows:[].concat(t)}},e.prototype.convertJsonToData=function(t,e){var n,r,i=this,a=[];return e?(e.x?(n=e.value.concat(e.x),i.config.data_x=e.x):n=e.value,a.push(n),t.forEach(function(t){var e=[];n.forEach(function(n){var r=i.findValueInJson(t,n);_(r)&&(r=null),e.push(r)}),a.push(e)}),r=i.convertRowsToData(a)):(Object.keys(t).forEach(function(e){a.push([e].concat(t[e]))}),r=i.convertColumnsToData(a)),r},e.prototype.findValueInJson=function(t,e){for(var n=(e=(e=e.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split("."),r=0;r<n.length;++r){var i=n[r];if(!(i in t))return;t=t[i]}return t},e.prototype.convertRowsToData=function(t){for(var e=[],n=t[0],r=1;r<t.length;r++){for(var i={},a=0;a<t[r].length;a++){if(_(t[r][a]))throw new Error("Source data is missing a component at ("+r+","+a+")!");i[n[a]]=t[r][a]}e.push(i)}return{keys:n,rows:e}},e.prototype.convertColumnsToData=function(t){for(var e=[],n=[],r=0;r<t.length;r++){for(var i=t[r][0],a=1;a<t[r].length;a++){if(_(e[a-1])&&(e[a-1]={}),_(t[r][a]))throw new Error("Source data is missing a component at ("+r+","+a+")!");e[a-1][i]=t[r][a]}n.push(i)}return{keys:n,rows:e}},e.prototype.convertDataToTargets=function(t,e){var n,r,i,a,o=this,s=o.config;return f(t)?a=Object.keys(t[0]):(a=t.keys,t=t.rows),r=a.filter(o.isNotX,o),i=a.filter(o.isX,o),r.forEach(function(n){var r=o.getXKey(n);o.isCustomX()||o.isTimeSeries()?i.indexOf(r)>=0?o.data.xs[n]=(e&&o.data.xs[n]?o.data.xs[n]:[]).concat(t.map(function(t){return t[r]}).filter(y).map(function(t,e){return o.generateTargetX(t,n,e)})):s.data_x?o.data.xs[n]=o.getOtherTargetXs():x(s.data_xs)&&(o.data.xs[n]=o.getXValuesOfXKey(r,o.data.targets)):o.data.xs[n]=t.map(function(t,e){return e})}),r.forEach(function(t){if(!o.data.xs[t])throw new Error('x is not defined for id = "'+t+'".')}),(n=r.map(function(e,n){var r=s.data_idConverter(e);return{id:r,id_org:e,values:t.map(function(t,i){var a,u=t[o.getXKey(e)],c=null===t[e]||isNaN(t[e])?null:+t[e];return o.isCustomX()&&o.isCategorized()&&!_(u)?(0===n&&0===i&&(s.axis_x_categories=[]),-1===(a=s.axis_x_categories.indexOf(u))&&(a=s.axis_x_categories.length,s.axis_x_categories.push(u))):a=o.generateTargetX(u,e,i),(_(t[e])||o.data.xs[e].length<=i)&&(a=void 0),{x:a,value:c,id:r}}).filter(function(t){return h(t.x)})}})).forEach(function(t){var e;s.data_xSort&&(t.values=t.values.sort(function(t,e){return(t.x||0===t.x?t.x:1/0)-(e.x||0===e.x?e.x:1/0)})),e=0,t.values.forEach(function(t){t.index=e++}),o.data.xs[t.id].sort(function(t,e){return t-e})}),o.hasNegativeValue=o.hasNegativeValueInTargets(n),o.hasPositiveValue=o.hasPositiveValueInTargets(n),s.data_type&&o.setTargetType(o.mapToIds(n).filter(function(t){return!(t in s.data_types)}),s.data_type),n.forEach(function(t){o.addCache(t.id_org,t)}),n},e.prototype.isX=function(t){var e,n,r,i=this.config;return i.data_x&&t===i.data_x||x(i.data_xs)&&(e=i.data_xs,n=t,r=!1,Object.keys(e).forEach(function(t){e[t]===n&&(r=!0)}),r)},e.prototype.isNotX=function(t){return!this.isX(t)},e.prototype.getXKey=function(t){var e=this.config;return e.data_x?e.data_x:x(e.data_xs)?e.data_xs[t]:null},e.prototype.getXValuesOfXKey=function(t,e){var n,r=this;return(e&&x(e)?r.mapToIds(e):[]).forEach(function(e){r.getXKey(e)===t&&(n=r.data.xs[e])}),n},e.prototype.getXValue=function(t,e){return t in this.data.xs&&this.data.xs[t]&&y(this.data.xs[t][e])?this.data.xs[t][e]:e},e.prototype.getOtherTargetXs=function(){var t=Object.keys(this.data.xs);return t.length?this.data.xs[t[0]]:null},e.prototype.getOtherTargetX=function(t){var e=this.getOtherTargetXs();return e&&t<e.length?e[t]:null},e.prototype.addXs=function(t){var e=this;Object.keys(t).forEach(function(n){e.config.data_xs[n]=t[n]})},e.prototype.addName=function(t){var e;return t&&(e=this.config.data_names[t.id],t.name=void 0!==e?e:t.id),t},e.prototype.getValueOnIndex=function(t,e){var n=t.filter(function(t){return t.index===e});return n.length?n[0]:null},e.prototype.updateTargetX=function(t,e){var n=this;t.forEach(function(t){t.values.forEach(function(r,i){r.x=n.generateTargetX(e[i],t.id,i)}),n.data.xs[t.id]=e})},e.prototype.updateTargetXs=function(t,e){var n=this;t.forEach(function(t){e[t.id]&&n.updateTargetX([t],e[t.id])})},e.prototype.generateTargetX=function(t,e,n){var r=this;return r.isTimeSeries()?t?r.parseDate(t):r.parseDate(r.getXValue(e,n)):r.isCustomX()&&!r.isCategorized()?y(t)?+t:r.getXValue(e,n):n},e.prototype.cloneTarget=function(t){return{id:t.id,id_org:t.id_org,values:t.values.map(function(t){return{x:t.x,value:t.value,id:t.id}})}},e.prototype.getMaxDataCount=function(){return this.d3.max(this.data.targets,function(t){return t.values.length})},e.prototype.mapToIds=function(t){return t.map(function(t){return t.id})},e.prototype.mapToTargetIds=function(t){return t?[].concat(t):this.mapToIds(this.data.targets)},e.prototype.hasTarget=function(t,e){var n,r=this.mapToIds(t);for(n=0;n<r.length;n++)if(r[n]===e)return!0;return!1},e.prototype.isTargetToShow=function(t){return this.hiddenTargetIds.indexOf(t)<0},e.prototype.isLegendToShow=function(t){return this.hiddenLegendIds.indexOf(t)<0},e.prototype.filterTargetsToShow=function(t){var e=this;return t.filter(function(t){return e.isTargetToShow(t.id)})},e.prototype.mapTargetsToUniqueXs=function(t){var e=this.d3.set(this.d3.merge(t.map(function(t){return t.values.map(function(t){return+t.x})}))).values();return(e=this.isTimeSeries()?e.map(function(t){return new Date(+t)}):e.map(function(t){return+t})).sort(function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN})},e.prototype.addHiddenTargetIds=function(t){t=t instanceof Array?t:new Array(t);for(var e=0;e<t.length;e++)this.hiddenTargetIds.indexOf(t[e])<0&&(this.hiddenTargetIds=this.hiddenTargetIds.concat(t[e]))},e.prototype.removeHiddenTargetIds=function(t){this.hiddenTargetIds=this.hiddenTargetIds.filter(function(e){return t.indexOf(e)<0})},e.prototype.addHiddenLegendIds=function(t){t=t instanceof Array?t:new Array(t);for(var e=0;e<t.length;e++)this.hiddenLegendIds.indexOf(t[e])<0&&(this.hiddenLegendIds=this.hiddenLegendIds.concat(t[e]))},e.prototype.removeHiddenLegendIds=function(t){this.hiddenLegendIds=this.hiddenLegendIds.filter(function(e){return t.indexOf(e)<0})},e.prototype.getValuesAsIdKeyed=function(t){var e={};return t.forEach(function(t){e[t.id]=[],t.values.forEach(function(n){e[t.id].push(n.value)})}),e},e.prototype.checkValueInTargets=function(t,e){var n,r,i,a=Object.keys(t);for(n=0;n<a.length;n++)for(i=t[a[n]].values,r=0;r<i.length;r++)if(e(i[r].value))return!0;return!1},e.prototype.hasNegativeValueInTargets=function(t){return this.checkValueInTargets(t,function(t){return t<0})},e.prototype.hasPositiveValueInTargets=function(t){return this.checkValueInTargets(t,function(t){return t>0})},e.prototype.isOrderDesc=function(){var t=this.config;return"string"==typeof t.data_order&&"desc"===t.data_order.toLowerCase()},e.prototype.isOrderAsc=function(){var t=this.config;return"string"==typeof t.data_order&&"asc"===t.data_order.toLowerCase()},e.prototype.getOrderFunction=function(){var t=this.config,e=this.isOrderAsc(),n=this.isOrderDesc();if(e||n){var r=function(t,e){return t+Math.abs(e.value)};return function(t,n){var i=t.values.reduce(r,0),a=n.values.reduce(r,0);return e?a-i:i-a}}if(p(t.data_order))return t.data_order;if(f(t.data_order)){var i=t.data_order;return function(t,e){return i.indexOf(t.id)-i.indexOf(e.id)}}},e.prototype.orderTargets=function(t){var e=this.getOrderFunction();return e&&t.sort(e),t},e.prototype.filterByX=function(t,e){return this.d3.merge(t.map(function(t){return t.values})).filter(function(t){return t.x-e==0})},e.prototype.filterRemoveNull=function(t){return t.filter(function(t){return y(t.value)})},e.prototype.filterByXDomain=function(t,e){return t.map(function(t){return{id:t.id,id_org:t.id_org,values:t.values.filter(function(t){return e[0]<=t.x&&t.x<=e[1]})}})},e.prototype.hasDataLabel=function(){var e=this.config;return!("boolean"!=typeof e.data_labels||!e.data_labels)||!("object"!==t(e.data_labels)||!x(e.data_labels))},e.prototype.getDataLabelLength=function(t,e,n){var r=this,i=[0,0];return r.selectChart.select("svg").selectAll(".dummy").data([t,e]).enter().append("text").text(function(t){return r.dataLabelFormat(t.id)(t)}).each(function(t,e){i[e]=1.3*this.getBoundingClientRect()[n]}).remove(),i},e.prototype.isNoneArc=function(t){return this.hasTarget(this.data.targets,t.id)},e.prototype.isArc=function(t){return"data"in t&&this.hasTarget(this.data.targets,t.data.id)},e.prototype.findClosestFromTargets=function(t,e){var n,r=this;return n=t.map(function(t){return r.findClosest(t.values,e)}),r.findClosest(n,e)},e.prototype.findClosest=function(t,e){var n,r=this,i=r.config.point_sensitivity;return t.filter(function(t){return t&&r.isBarType(t.id)}).forEach(function(t){var e=r.main.select("."+a.bars+r.getTargetSelectorSuffix(t.id)+" ."+a.bar+"-"+t.index).node();!n&&r.isWithinBar(r.d3.mouse(e),e)&&(n=t)}),t.filter(function(t){return t&&!r.isBarType(t.id)}).forEach(function(t){var a=r.dist(t,e);a<i&&(i=a,n=t)}),n},e.prototype.dist=function(t,e){var n=this.config,r=n.axis_rotated?1:0,i=n.axis_rotated?0:1,a=this.circleY(t,t.index),o=this.x(t.x);return Math.sqrt(Math.pow(o-e[r],2)+Math.pow(a-e[i],2))},e.prototype.convertValuesToStep=function(t){var e,n=[].concat(t);if(!this.isCategorized())return t;for(e=t.length+1;0<e;e--)n[e]=n[e-1];return n[0]={x:n[0].x-1,value:n[0].value,id:n[0].id},n[t.length+1]={x:n[t.length].x+1,value:n[t.length].value,id:n[t.length].id},n},e.prototype.updateDataAttributes=function(t,e){var n=this.config["data_"+t];return void 0===e?n:(Object.keys(e).forEach(function(t){n[t]=e[t]}),this.redraw({withLegend:!0}),n)},e.prototype.load=function(t,e){var n=this;t&&(e.filter&&(t=t.filter(e.filter)),(e.type||e.types)&&t.forEach(function(t){var r=e.types&&e.types[t.id]?e.types[t.id]:e.type;n.setTargetType(t.id,r)}),n.data.targets.forEach(function(e){for(var n=0;n<t.length;n++)if(e.id===t[n].id){e.values=t[n].values,t.splice(n,1);break}}),n.data.targets=n.data.targets.concat(t)),n.updateTargets(n.data.targets),n.redraw({withUpdateOrgXDomain:!0,withUpdateXDomain:!0,withLegend:!0}),e.done&&e.done()},e.prototype.loadFromArgs=function(t){var e=this;t.data?e.load(e.convertDataToTargets(t.data),t):t.url?e.convertUrlToData(t.url,t.mimeType,t.headers,t.keys,function(n){e.load(e.convertDataToTargets(n),t)}):t.json?e.load(e.convertDataToTargets(e.convertJsonToData(t.json,t.keys)),t):t.rows?e.load(e.convertDataToTargets(e.convertRowsToData(t.rows)),t):t.columns?e.load(e.convertDataToTargets(e.convertColumnsToData(t.columns)),t):e.load(null,t)},e.prototype.unload=function(t,e){var n=this;e||(e=function(){}),(t=t.filter(function(t){return n.hasTarget(n.data.targets,t)}))&&0!==t.length?(n.svg.selectAll(t.map(function(t){return n.selectorTarget(t)})).transition().style("opacity",0).remove().call(n.endall,e),t.forEach(function(t){n.withoutFadeIn[t]=!1,n.legend&&n.legend.selectAll("."+a.legendItem+n.getTargetSelectorSuffix(t)).remove(),n.data.targets=n.data.targets.filter(function(e){return e.id!==t})})):e()},e.prototype.getYDomainMin=function(t){var e,n,r,i,a,o,s=this,u=s.config,c=s.mapToIds(t),l=s.getValuesAsIdKeyed(t);if(u.data_groups.length>0)for(o=s.hasNegativeValueInTargets(t),e=0;e<u.data_groups.length;e++)if(0!==(i=u.data_groups[e].filter(function(t){return c.indexOf(t)>=0})).length)for(r=i[0],o&&l[r]&&l[r].forEach(function(t,e){l[r][e]=t<0?t:0}),n=1;n<i.length;n++)a=i[n],l[a]&&l[a].forEach(function(t,e){s.axis.getId(a)!==s.axis.getId(r)||!l[r]||o&&+t>0||(l[r][e]+=+t)});return s.d3.min(Object.keys(l).map(function(t){return s.d3.min(l[t])}))},e.prototype.getYDomainMax=function(t){var e,n,r,i,a,o,s=this,u=s.config,c=s.mapToIds(t),l=s.getValuesAsIdKeyed(t);if(u.data_groups.length>0)for(o=s.hasPositiveValueInTargets(t),e=0;e<u.data_groups.length;e++)if(0!==(i=u.data_groups[e].filter(function(t){return c.indexOf(t)>=0})).length)for(r=i[0],o&&l[r]&&l[r].forEach(function(t,e){l[r][e]=t>0?t:0}),n=1;n<i.length;n++)a=i[n],l[a]&&l[a].forEach(function(t,e){s.axis.getId(a)!==s.axis.getId(r)||!l[r]||o&&+t<0||(l[r][e]+=+t)});return s.d3.max(Object.keys(l).map(function(t){return s.d3.max(l[t])}))},e.prototype.getYDomain=function(t,e,n){var r,i,a,o,s,c,l,f,h,d,p=this,g=p.config,_=t.filter(function(t){return p.axis.getId(t.id)===e}),v=n?p.filterByXDomain(_,n):_,m="y2"===e?g.axis_y2_min:g.axis_y_min,b="y2"===e?g.axis_y2_max:g.axis_y_max,w=p.getYDomainMin(v),S=p.getYDomainMax(v),A="y2"===e?g.axis_y2_center:g.axis_y_center,T=p.hasType("bar",v)&&g.bar_zerobased||p.hasType("area",v)&&g.area_zerobased,P="y2"===e?g.axis_y2_inverted:g.axis_y_inverted,C=p.hasDataLabel()&&g.axis_rotated,M=p.hasDataLabel()&&!g.axis_rotated;return w=y(m)?m:y(b)?w<b?w:b-10:w,S=y(b)?b:y(m)?m<S?S:m+10:S,0===v.length?"y2"===e?p.y2.domain():p.y.domain():(isNaN(w)&&(w=0),isNaN(S)&&(S=w),w===S&&(w<0?S=0:w=0),h=w>=0&&S>=0,d=w<=0&&S<=0,(y(m)&&h||y(b)&&d)&&(T=!1),T&&(h&&(w=0),d&&(S=0)),a=o=.1*(i=Math.abs(S-w)),void 0!==A&&(S=A+(s=Math.max(Math.abs(w),Math.abs(S))),w=A-s),C?(c=p.getDataLabelLength(w,S,"width"),l=u(p.y.range()),a+=i*((f=[c[0]/l,c[1]/l])[1]/(1-f[0]-f[1])),o+=i*(f[0]/(1-f[0]-f[1]))):M&&(c=p.getDataLabelLength(w,S,"height"),a+=p.axis.convertPixelsToAxisPadding(c[1],i),o+=p.axis.convertPixelsToAxisPadding(c[0],i)),"y"===e&&x(g.axis_y_padding)&&(a=p.axis.getPadding(g.axis_y_padding,"top",a,i),o=p.axis.getPadding(g.axis_y_padding,"bottom",o,i)),"y2"===e&&x(g.axis_y2_padding)&&(a=p.axis.getPadding(g.axis_y2_padding,"top",a,i),o=p.axis.getPadding(g.axis_y2_padding,"bottom",o,i)),T&&(h&&(o=w),d&&(a=-S)),r=[w-o,S+a],P?r.reverse():r)},e.prototype.getXDomainMin=function(t){var e=this,n=e.config;return h(n.axis_x_min)?e.isTimeSeries()?this.parseDate(n.axis_x_min):n.axis_x_min:e.d3.min(t,function(t){return e.d3.min(t.values,function(t){return t.x})})},e.prototype.getXDomainMax=function(t){var e=this,n=e.config;return h(n.axis_x_max)?e.isTimeSeries()?this.parseDate(n.axis_x_max):n.axis_x_max:e.d3.max(t,function(t){return e.d3.max(t.values,function(t){return t.x})})},e.prototype.getXDomainPadding=function(e){var n,r,i,a,o=this.config,s=e[1]-e[0];return r=this.isCategorized()?0:this.hasType("bar")?(n=this.getMaxDataCount())>1?s/(n-1)/2:.5:.01*s,"object"===t(o.axis_x_padding)&&x(o.axis_x_padding)?(i=y(o.axis_x_padding.left)?o.axis_x_padding.left:r,a=y(o.axis_x_padding.right)?o.axis_x_padding.right:r):i=a="number"==typeof o.axis_x_padding?o.axis_x_padding:r,{left:i,right:a}},e.prototype.getXDomain=function(t){var e=this,n=[e.getXDomainMin(t),e.getXDomainMax(t)],r=n[0],i=n[1],a=e.getXDomainPadding(n),o=0,s=0;return r-i!=0||e.isCategorized()||(e.isTimeSeries()?(r=new Date(.5*r.getTime()),i=new Date(1.5*i.getTime())):(r=0===r?1:.5*r,i=0===i?-1:1.5*i)),(r||0===r)&&(o=e.isTimeSeries()?new Date(r.getTime()-a.left):r-a.left),(i||0===i)&&(s=e.isTimeSeries()?new Date(i.getTime()+a.right):i+a.right),[o,s]},e.prototype.updateXDomain=function(t,e,n,r,i){var a=this,o=a.config;return n&&(a.x.domain(i||a.d3.extent(a.getXDomain(t))),a.orgXDomain=a.x.domain(),o.zoom_enabled&&a.zoom.update(),a.subX.domain(a.x.domain()),a.brush&&a.brush.updateScale(a.subX)),e&&a.x.domain(i||(!a.brush||a.brush.empty()?a.orgXDomain:a.brush.selectionAsValue())),r&&a.x.domain(a.trimXDomain(a.x.orgDomain())),a.x.domain()},e.prototype.trimXDomain=function(t){var e=this.getZoomDomain(),n=e[0],r=e[1];return t[0]<=n&&(t[1]=+t[1]+(n-t[0]),t[0]=n),r<=t[1]&&(t[0]=+t[0]-(t[1]-r),t[1]=r),t},e.prototype.drag=function(t){var e,n,r,i,o,s,u,c,f=this,h=f.config,d=f.main,p=f.d3;f.hasArcType()||h.data_selection_enabled&&h.data_selection_multiple&&(e=f.dragStart[0],n=f.dragStart[1],r=t[0],i=t[1],o=Math.min(e,r),s=Math.max(e,r),u=h.data_selection_grouped?f.margin.top:Math.min(n,i),c=h.data_selection_grouped?f.height:Math.max(n,i),d.select("."+a.dragarea).attr("x",o).attr("y",u).attr("width",s-o).attr("height",c-u),d.selectAll("."+a.shapes).selectAll("."+a.shape).filter(function(t){return h.data_selection_isselectable(t)}).each(function(t,e){var n,r,i,h,d,g,_=p.select(this),y=_.classed(a.SELECTED),x=_.classed(a.INCLUDED),v=!1;if(_.classed(a.circle))n=1*_.attr("cx"),r=1*_.attr("cy"),d=f.togglePoint,v=o<n&&n<s&&u<r&&r<c;else{if(!_.classed(a.bar))return;n=(g=l(this)).x,r=g.y,i=g.width,h=g.height,d=f.togglePath,v=!(s<n||n+i<o||c<r||r+h<u)}v^x&&(_.classed(a.INCLUDED,!x),_.classed(a.SELECTED,!y),d.call(f,!y,_,t,e))}))},e.prototype.dragstart=function(t){var e=this,n=e.config;e.hasArcType()||n.data_selection_enabled&&(e.dragStart=t,e.main.select("."+a.chart).append("rect").attr("class",a.dragarea).style("opacity",.1),e.dragging=!0)},e.prototype.dragend=function(){var t=this,e=t.config;t.hasArcType()||e.data_selection_enabled&&(t.main.select("."+a.dragarea).transition().duration(100).style("opacity",0).remove(),t.main.selectAll("."+a.shape).classed(a.INCLUDED,!1),t.dragging=!1)},e.prototype.getYFormat=function(t){var e=this,n=t&&!e.hasType("gauge")?e.defaultArcValueFormat:e.yFormat,r=t&&!e.hasType("gauge")?e.defaultArcValueFormat:e.y2Format;return function(t,i,a){return("y2"===e.axis.getId(a)?r:n).call(e,t,i)}},e.prototype.yFormat=function(t){var e=this.config;return(e.axis_y_tick_format?e.axis_y_tick_format:this.defaultValueFormat)(t)},e.prototype.y2Format=function(t){var e=this.config;return(e.axis_y2_tick_format?e.axis_y2_tick_format:this.defaultValueFormat)(t)},e.prototype.defaultValueFormat=function(t){return y(t)?+t:""},e.prototype.defaultArcValueFormat=function(t,e){return(100*e).toFixed(1)+"%"},e.prototype.dataLabelFormat=function(e){var n=this.config.data_labels,r=function(t){return y(t)?+t:""};return"function"==typeof n.format?n.format:"object"===t(n.format)?n.format[e]?!0===n.format[e]?r:n.format[e]:function(){return""}:r},e.prototype.initGrid=function(){var t=this,e=t.config,n=t.d3;t.grid=t.main.append("g").attr("clip-path",t.clipPathForGrid).attr("class",a.grid),e.grid_x_show&&t.grid.append("g").attr("class",a.xgrids),e.grid_y_show&&t.grid.append("g").attr("class",a.ygrids),e.grid_focus_show&&t.grid.append("g").attr("class",a.xgridFocus).append("line").attr("class",a.xgridFocus),t.xgrid=n.selectAll([]),e.grid_lines_front||t.initGridLines()},e.prototype.initGridLines=function(){var t=this,e=t.d3;t.gridLines=t.main.append("g").attr("clip-path",t.clipPathForGrid).attr("class",a.grid+" "+a.gridLines),t.gridLines.append("g").attr("class",a.xgridLines),t.gridLines.append("g").attr("class",a.ygridLines),t.xgridLines=e.selectAll([])},e.prototype.updateXGrid=function(t){var e=this,n=e.config,r=e.d3,i=e.generateGridData(n.grid_x_type,e.x),o=e.isCategorized()?e.xAxis.tickOffset():0;e.xgridAttr=n.axis_rotated?{x1:0,x2:e.width,y1:function(t){return e.x(t)-o},y2:function(t){return e.x(t)-o}}:{x1:function(t){return e.x(t)+o},x2:function(t){return e.x(t)+o},y1:0,y2:e.height},e.xgridAttr.opacity=function(){return+r.select(this).attr(n.axis_rotated?"y1":"x1")===(n.axis_rotated?e.height:0)?0:1};var s=e.main.select("."+a.xgrids).selectAll("."+a.xgrid).data(i),u=s.enter().append("line").attr("class",a.xgrid).attr("x1",e.xgridAttr.x1).attr("x2",e.xgridAttr.x2).attr("y1",e.xgridAttr.y1).attr("y2",e.xgridAttr.y2).style("opacity",0);e.xgrid=u.merge(s),t||e.xgrid.attr("x1",e.xgridAttr.x1).attr("x2",e.xgridAttr.x2).attr("y1",e.xgridAttr.y1).attr("y2",e.xgridAttr.y2).style("opacity",e.xgridAttr.opacity),s.exit().remove()},e.prototype.updateYGrid=function(){var t=this,e=t.config,n=t.yAxis.tickValues()||t.y.ticks(e.grid_y_ticks),r=t.main.select("."+a.ygrids).selectAll("."+a.ygrid).data(n),i=r.enter().append("line").attr("class",a.ygrid);t.ygrid=i.merge(r),t.ygrid.attr("x1",e.axis_rotated?t.y:0).attr("x2",e.axis_rotated?t.y:t.width).attr("y1",e.axis_rotated?0:t.y).attr("y2",e.axis_rotated?t.height:t.y),r.exit().remove(),t.smoothLines(t.ygrid,"grid")},e.prototype.gridTextAnchor=function(t){return t.position?t.position:"end"},e.prototype.gridTextDx=function(t){return"start"===t.position?4:"middle"===t.position?0:-4},e.prototype.xGridTextX=function(t){return"start"===t.position?-this.height:"middle"===t.position?-this.height/2:0},e.prototype.yGridTextX=function(t){return"start"===t.position?0:"middle"===t.position?this.width/2:this.width},e.prototype.updateGrid=function(t){var e,n,r,i,o=this,s=o.main,u=o.config,c=o.xv.bind(o),l=o.yv.bind(o),f=o.xGridTextX.bind(o),h=o.yGridTextX.bind(o);o.grid.style("visibility",o.hasArcType()?"hidden":"visible"),s.select("line."+a.xgridFocus).style("visibility","hidden"),u.grid_x_show&&o.updateXGrid(),(n=(e=s.select("."+a.xgridLines).selectAll("."+a.xgridLine).data(u.grid_x_lines)).enter().append("g").attr("class",function(t){return a.xgridLine+(t.class?" "+t.class:"")})).append("line").attr("x1",u.axis_rotated?0:c).attr("x2",u.axis_rotated?o.width:c).attr("y1",u.axis_rotated?c:0).attr("y2",u.axis_rotated?c:o.height).style("opacity",0),n.append("text").attr("text-anchor",o.gridTextAnchor).attr("transform",u.axis_rotated?"":"rotate(-90)").attr("x",u.axis_rotated?h:f).attr("y",c).attr("dx",o.gridTextDx).attr("dy",-5).style("opacity",0),o.xgridLines=n.merge(e),e.exit().transition().duration(t).style("opacity",0).remove(),u.grid_y_show&&o.updateYGrid(),(i=(r=s.select("."+a.ygridLines).selectAll("."+a.ygridLine).data(u.grid_y_lines)).enter().append("g").attr("class",function(t){return a.ygridLine+(t.class?" "+t.class:"")})).append("line").attr("x1",u.axis_rotated?l:0).attr("x2",u.axis_rotated?l:o.width).attr("y1",u.axis_rotated?0:l).attr("y2",u.axis_rotated?o.height:l).style("opacity",0),i.append("text").attr("text-anchor",o.gridTextAnchor).attr("transform",u.axis_rotated?"rotate(-90)":"").attr("x",u.axis_rotated?f:h).attr("y",l).attr("dx",o.gridTextDx).attr("dy",-5).style("opacity",0),o.ygridLines=i.merge(r),o.ygridLines.select("line").transition().duration(t).attr("x1",u.axis_rotated?l:0).attr("x2",u.axis_rotated?l:o.width).attr("y1",u.axis_rotated?0:l).attr("y2",u.axis_rotated?o.height:l).style("opacity",1),o.ygridLines.select("text").transition().duration(t).attr("x",u.axis_rotated?o.xGridTextX.bind(o):o.yGridTextX.bind(o)).attr("y",l).text(function(t){return t.text}).style("opacity",1),r.exit().transition().duration(t).style("opacity",0).remove()},e.prototype.redrawGrid=function(t,e){var n=this,r=n.config,i=n.xv.bind(n),a=n.xgridLines.select("line"),o=n.xgridLines.select("text");return[(t?a.transition(e):a).attr("x1",r.axis_rotated?0:i).attr("x2",r.axis_rotated?n.width:i).attr("y1",r.axis_rotated?i:0).attr("y2",r.axis_rotated?i:n.height).style("opacity",1),(t?o.transition(e):o).attr("x",r.axis_rotated?n.yGridTextX.bind(n):n.xGridTextX.bind(n)).attr("y",i).text(function(t){return t.text}).style("opacity",1)]},e.prototype.showXGridFocus=function(t){var e=this,n=e.config,r=t.filter(function(t){return t&&y(t.value)}),i=e.main.selectAll("line."+a.xgridFocus),o=e.xx.bind(e);n.tooltip_show&&(e.hasType("scatter")||e.hasArcType()||(i.style("visibility","visible").data([r[0]]).attr(n.axis_rotated?"y1":"x1",o).attr(n.axis_rotated?"y2":"x2",o),e.smoothLines(i,"grid")))},e.prototype.hideXGridFocus=function(){this.main.select("line."+a.xgridFocus).style("visibility","hidden")},e.prototype.updateXgridFocus=function(){var t=this.config;this.main.select("line."+a.xgridFocus).attr("x1",t.axis_rotated?0:-10).attr("x2",t.axis_rotated?this.width:-10).attr("y1",t.axis_rotated?-10:0).attr("y2",t.axis_rotated?-10:this.height)},e.prototype.generateGridData=function(t,e){var n,r,i,o,s=[],u=this.main.select("."+a.axisX).selectAll(".tick").size();if("year"===t)for(r=(n=this.getXDomain())[0].getFullYear(),i=n[1].getFullYear(),o=r;o<=i;o++)s.push(new Date(o+"-01-01 00:00:00"));else(s=e.ticks(10)).length>u&&(s=s.filter(function(t){return(""+t).indexOf(".")<0}));return s},e.prototype.getGridFilterToRemove=function(t){return t?function(e){var n=!1;return[].concat(t).forEach(function(t){("value"in t&&e.value===t.value||"class"in t&&e.class===t.class)&&(n=!0)}),n}:function(){return!0}},e.prototype.removeGridLines=function(t,e){var n=this.config,r=this.getGridFilterToRemove(t),i=function(t){return!r(t)},o=e?a.xgridLines:a.ygridLines,s=e?a.xgridLine:a.ygridLine;this.main.select("."+o).selectAll("."+s).filter(r).transition().duration(n.transition_duration).style("opacity",0).remove(),e?n.grid_x_lines=n.grid_x_lines.filter(i):n.grid_y_lines=n.grid_y_lines.filter(i)},e.prototype.initEventRect=function(){var t=this,e=t.config;t.main.select("."+a.chart).append("g").attr("class",a.eventRects).style("fill-opacity",0),t.eventRect=t.main.select("."+a.eventRects).append("rect").attr("class",a.eventRect),e.zoom_enabled&&t.zoom&&(t.eventRect.call(t.zoom).on("dblclick.zoom",null),e.zoom_initialRange&&t.eventRect.transition().duration(0).call(t.zoom.transform,t.zoomTransform(e.zoom_initialRange)))},e.prototype.redrawEventRect=function(){var t,e,n=this,r=n.d3,i=n.config;function o(){n.svg.select("."+a.eventRect).style("cursor",null),n.hideXGridFocus(),n.hideTooltip(),n.unexpandCircles(),n.unexpandBars()}t=n.width,e=n.height,n.main.select("."+a.eventRects).style("cursor",i.zoom_enabled?i.axis_rotated?"ns-resize":"ew-resize":null),n.eventRect.attr("x",0).attr("y",0).attr("width",t).attr("height",e).on("mouseout",i.interaction_enabled?function(){i&&(n.hasArcType()||o())}:null).on("mousemove",i.interaction_enabled?function(){var t,e,s,u;n.dragging||n.hasArcType(t)||(t=n.filterTargetsToShow(n.data.targets),e=r.mouse(this),s=n.findClosestFromTargets(t,e),!n.mouseover||s&&s.id===n.mouseover.id||(i.data_onmouseout.call(n.api,n.mouseover),n.mouseover=void 0),s?(u=(n.isScatterType(s)||!i.tooltip_grouped?[s]:n.filterByX(t,s.x)).map(function(t){return n.addName(t)}),n.showTooltip(u,this),i.point_focus_expand_enabled&&(n.unexpandCircles(),u.forEach(function(t){n.expandCircles(t.index,t.id,!1)})),n.expandBars(s.index,s.id,!0),n.showXGridFocus(u),(n.isBarType(s.id)||n.dist(s,e)<i.point_sensitivity)&&(n.svg.select("."+a.eventRect).style("cursor","pointer"),n.mouseover||(i.data_onmouseover.call(n.api,s),n.mouseover=s))):o())}:null).on("click",i.interaction_enabled?function(){var t,e,o;n.hasArcType(t)||(t=n.filterTargetsToShow(n.data.targets),e=r.mouse(this),(o=n.findClosestFromTargets(t,e))&&(n.isBarType(o.id)||n.dist(o,e)<i.point_sensitivity)&&(n.isScatterType(o)||!i.data_selection_grouped?[o]:n.filterByX(t,o.x)).forEach(function(t){n.main.selectAll("."+a.shapes+n.getTargetSelectorSuffix(t.id)).selectAll("."+a.shape+"-"+t.index).each(function(){(i.data_selection_grouped||n.isWithinShape(this,t))&&(n.toggleShape(this,t,t.index),i.data_onclick.call(n.api,t,this))})}))}:null).call(i.interaction_enabled&&i.data_selection_draggable&&n.drag?r.drag().on("drag",function(){n.drag(r.mouse(this))}).on("start",function(){n.dragstart(r.mouse(this))}).on("end",function(){n.dragend()}):function(){})},e.prototype.getMousePosition=function(t){return[this.x(t.x),this.getYScale(t.id)(t.value)]},e.prototype.dispatchEvent=function(t,e){var n="."+a.eventRect,r=this.main.select(n).node(),i=r.getBoundingClientRect(),o=i.left+(e?e[0]:0),s=i.top+(e?e[1]:0),u=document.createEvent("MouseEvents");u.initMouseEvent(t,!0,!0,window,0,o,s,o,s,!1,!1,!1,!1,0,null),r.dispatchEvent(u)},e.prototype.initLegend=function(){var t=this;if(t.legendItemTextBox={},t.legendHasRendered=!1,t.legend=t.svg.append("g").attr("transform",t.getTranslate("legend")),!t.config.legend_show)return t.legend.style("visibility","hidden"),void(t.hiddenLegendIds=t.mapToIds(t.data.targets));t.updateLegendWithDefaults()},e.prototype.updateLegendWithDefaults=function(){this.updateLegend(this.mapToIds(this.data.targets),{withTransform:!1,withTransitionForTransform:!1,withTransition:!1})},e.prototype.updateSizeForLegend=function(t,e){var n=this,r=n.config,i={top:n.isLegendTop?n.getCurrentPaddingTop()+r.legend_inset_y+5.5:n.currentHeight-t-n.getCurrentPaddingBottom()-r.legend_inset_y,left:n.isLegendLeft?n.getCurrentPaddingLeft()+r.legend_inset_x+.5:n.currentWidth-e-n.getCurrentPaddingRight()-r.legend_inset_x+.5};n.margin3={top:n.isLegendRight?0:n.isLegendInset?i.top:n.currentHeight-t,right:NaN,bottom:0,left:n.isLegendRight?n.currentWidth-e:n.isLegendInset?i.left:0}},e.prototype.transformLegend=function(t){(t?this.legend.transition():this.legend).attr("transform",this.getTranslate("legend"))},e.prototype.updateLegendStep=function(t){this.legendStep=t},e.prototype.updateLegendItemWidth=function(t){this.legendItemWidth=t},e.prototype.updateLegendItemHeight=function(t){this.legendItemHeight=t},e.prototype.getLegendWidth=function(){var t=this;return t.config.legend_show?t.isLegendRight||t.isLegendInset?t.legendItemWidth*(t.legendStep+1):t.currentWidth:0},e.prototype.getLegendHeight=function(){var t=this,e=0;return t.config.legend_show&&(e=t.isLegendRight?t.currentHeight:Math.max(20,t.legendItemHeight)*(t.legendStep+1)),e},e.prototype.opacityForLegend=function(t){return t.classed(a.legendItemHidden)?null:1},e.prototype.opacityForUnfocusedLegend=function(t){return t.classed(a.legendItemHidden)?null:.3},e.prototype.toggleFocusLegend=function(t,e){var n=this;t=n.mapToTargetIds(t),n.legend.selectAll("."+a.legendItem).filter(function(e){return t.indexOf(e)>=0}).classed(a.legendItemFocused,e).transition().duration(100).style("opacity",function(){return(e?n.opacityForLegend:n.opacityForUnfocusedLegend).call(n,n.d3.select(this))})},e.prototype.revertLegend=function(){var t=this,e=t.d3;t.legend.selectAll("."+a.legendItem).classed(a.legendItemFocused,!1).transition().duration(100).style("opacity",function(){return t.opacityForLegend(e.select(this))})},e.prototype.showLegend=function(t){var e=this,n=e.config;n.legend_show||(n.legend_show=!0,e.legend.style("visibility","visible"),e.legendHasRendered||e.updateLegendWithDefaults()),e.removeHiddenLegendIds(t),e.legend.selectAll(e.selectorLegends(t)).style("visibility","visible").transition().style("opacity",function(){return e.opacityForLegend(e.d3.select(this))})},e.prototype.hideLegend=function(t){var e=this,n=e.config;n.legend_show&&d(t)&&(n.legend_show=!1,e.legend.style("visibility","hidden")),e.addHiddenLegendIds(t),e.legend.selectAll(e.selectorLegends(t)).style("opacity",0).style("visibility","hidden")},e.prototype.clearLegendItemTextBoxCache=function(){this.legendItemTextBox={}},e.prototype.updateLegend=function(t,e,n){var r,i,o,s,u,l,f,d,p,g,_,y,x,v,m,b,w=this,S=w.config,A=4,T=10,P=0,C=0,M=10,L=S.legend_item_tile_width+5,E=0,V={},G={},k={},R=[0],O={},I=0;function N(e,n,r){var i,o,s=0===r,u=r===t.length-1,c=function(t,e){return w.legendItemTextBox[e]||(w.legendItemTextBox[e]=w.getTextRect(t.textContent,a.legendItem,t)),w.legendItemTextBox[e]}(e,n),l=c.width+L+(!u||w.isLegendRight||w.isLegendInset?T:0)+S.legend_padding,f=c.height+A,h=w.isLegendRight||w.isLegendInset?f:l,d=w.isLegendRight||w.isLegendInset?w.getLegendHeight():w.getLegendWidth();function p(t,e){e||(i=(d-E-h)/2)<M&&(i=(d-h)/2,E=0,I++),O[t]=I,R[I]=w.isLegendInset?10:i,V[t]=E,E+=h}s&&(E=0,I=0,P=0,C=0),!S.legend_show||w.isLegendToShow(n)?(G[n]=l,k[n]=f,(!P||l>=P)&&(P=l),(!C||f>=C)&&(C=f),o=w.isLegendRight||w.isLegendInset?C:P,S.legend_equally?(Object.keys(G).forEach(function(t){G[t]=P}),Object.keys(k).forEach(function(t){k[t]=C}),(i=(d-o*t.length)/2)<M?(E=0,I=0,t.forEach(function(t){p(t)})):p(n,!0)):p(n)):G[n]=k[n]=O[n]=V[n]=0}t=t.filter(function(t){return!h(S.data_names[t])||null!==S.data_names[t]}),_=c(e=e||{},"withTransition",!0),y=c(e,"withTransitionForTransform",!0),w.isLegendInset&&(I=S.legend_inset_step?S.legend_inset_step:t.length,w.updateLegendStep(I)),w.isLegendRight?(r=function(t){return P*O[t]},s=function(t){return R[O[t]]+V[t]}):w.isLegendInset?(r=function(t){return P*O[t]+10},s=function(t){return R[O[t]]+V[t]}):(r=function(t){return R[O[t]]+V[t]},s=function(t){return C*O[t]}),i=function(t,e){return r(t,e)+4+S.legend_item_tile_width},u=function(t,e){return s(t,e)+9},o=function(t,e){return r(t,e)},l=function(t,e){return s(t,e)-5},f=function(t,e){return r(t,e)-2},d=function(t,e){return r(t,e)-2+S.legend_item_tile_width},p=function(t,e){return s(t,e)+4},(g=w.legend.selectAll("."+a.legendItem).data(t).enter().append("g").attr("class",function(t){return w.generateClass(a.legendItem,t)}).style("visibility",function(t){return w.isLegendToShow(t)?"visible":"hidden"}).style("cursor","pointer").on("click",function(t){S.legend_item_onclick?S.legend_item_onclick.call(w,t):w.d3.event.altKey?(w.api.hide(),w.api.show(t)):(w.api.toggle(t),w.isTargetToShow(t)?w.api.focus(t):w.api.revert())}).on("mouseover",function(t){S.legend_item_onmouseover?S.legend_item_onmouseover.call(w,t):(w.d3.select(this).classed(a.legendItemFocused,!0),!w.transiting&&w.isTargetToShow(t)&&w.api.focus(t))}).on("mouseout",function(t){S.legend_item_onmouseout?S.legend_item_onmouseout.call(w,t):(w.d3.select(this).classed(a.legendItemFocused,!1),w.api.revert())})).append("text").text(function(t){return h(S.data_names[t])?S.data_names[t]:t}).each(function(t,e){N(this,t,e)}).style("pointer-events","none").attr("x",w.isLegendRight||w.isLegendInset?i:-200).attr("y",w.isLegendRight||w.isLegendInset?-200:u),g.append("rect").attr("class",a.legendItemEvent).style("fill-opacity",0).attr("x",w.isLegendRight||w.isLegendInset?o:-200).attr("y",w.isLegendRight||w.isLegendInset?-200:l),g.append("line").attr("class",a.legendItemTile).style("stroke",w.color).style("pointer-events","none").attr("x1",w.isLegendRight||w.isLegendInset?f:-200).attr("y1",w.isLegendRight||w.isLegendInset?-200:p).attr("x2",w.isLegendRight||w.isLegendInset?d:-200).attr("y2",w.isLegendRight||w.isLegendInset?-200:p).attr("stroke-width",S.legend_item_tile_height),b=w.legend.select("."+a.legendBackground+" rect"),w.isLegendInset&&P>0&&0===b.size()&&(b=w.legend.insert("g","."+a.legendItem).attr("class",a.legendBackground).append("rect")),x=w.legend.selectAll("text").data(t).text(function(t){return h(S.data_names[t])?S.data_names[t]:t}).each(function(t,e){N(this,t,e)}),(_?x.transition():x).attr("x",i).attr("y",u),v=w.legend.selectAll("rect."+a.legendItemEvent).data(t),(_?v.transition():v).attr("width",function(t){return G[t]}).attr("height",function(t){return k[t]}).attr("x",o).attr("y",l),m=w.legend.selectAll("line."+a.legendItemTile).data(t),(_?m.transition():m).style("stroke",w.levelColor?function(t){return w.levelColor(w.cache[t].values[0].value)}:w.color).attr("x1",f).attr("y1",p).attr("x2",d).attr("y2",p),b&&(_?b.transition():b).attr("height",w.getLegendHeight()-12).attr("width",P*(I+1)+10),w.legend.selectAll("."+a.legendItem).classed(a.legendItemHidden,function(t){return!w.isTargetToShow(t)}),w.updateLegendItemWidth(P),w.updateLegendItemHeight(C),w.updateLegendStep(I),w.updateSizes(),w.updateScales(),w.updateSvgSize(),w.transformAll(y,n),w.legendHasRendered=!0},e.prototype.initRegion=function(){this.region=this.main.append("g").attr("clip-path",this.clipPath).attr("class",a.regions)},e.prototype.updateRegion=function(t){var e=this,n=e.config;e.region.style("visibility",e.hasArcType()?"hidden":"visible");var r=e.main.select("."+a.regions).selectAll("."+a.region).data(n.regions),i=r.enter().append("rect").attr("x",e.regionX.bind(e)).attr("y",e.regionY.bind(e)).attr("width",e.regionWidth.bind(e)).attr("height",e.regionHeight.bind(e)).style("fill-opacity",0);e.mainRegion=i.merge(r).attr("class",e.classRegion.bind(e)),r.exit().transition().duration(t).style("opacity",0).remove()},e.prototype.redrawRegion=function(t,e){var n=this,r=n.mainRegion;return[(t?r.transition(e):r).attr("x",n.regionX.bind(n)).attr("y",n.regionY.bind(n)).attr("width",n.regionWidth.bind(n)).attr("height",n.regionHeight.bind(n)).style("fill-opacity",function(t){return y(t.opacity)?t.opacity:.1})]},e.prototype.regionX=function(t){var e=this,n=e.config,r="y"===t.axis?e.y:e.y2;return"y"===t.axis||"y2"===t.axis?n.axis_rotated&&"start"in t?r(t.start):0:n.axis_rotated?0:"start"in t?e.x(e.isTimeSeries()?e.parseDate(t.start):t.start):0},e.prototype.regionY=function(t){var e=this,n=e.config,r="y"===t.axis?e.y:e.y2;return"y"===t.axis||"y2"===t.axis?n.axis_rotated?0:"end"in t?r(t.end):0:n.axis_rotated&&"start"in t?e.x(e.isTimeSeries()?e.parseDate(t.start):t.start):0},e.prototype.regionWidth=function(t){var e,n=this,r=n.config,i=n.regionX(t),a="y"===t.axis?n.y:n.y2;return(e="y"===t.axis||"y2"===t.axis?r.axis_rotated&&"end"in t?a(t.end):n.width:r.axis_rotated?n.width:"end"in t?n.x(n.isTimeSeries()?n.parseDate(t.end):t.end):n.width)<i?0:e-i},e.prototype.regionHeight=function(t){var e,n=this,r=n.config,i=this.regionY(t),a="y"===t.axis?n.y:n.y2;return(e="y"===t.axis||"y2"===t.axis?r.axis_rotated?n.height:"start"in t?a(t.start):n.height:r.axis_rotated&&"end"in t?n.x(n.isTimeSeries()?n.parseDate(t.end):t.end):n.height)<i?0:e-i},e.prototype.isRegionOnX=function(t){return!t.axis||"x"===t.axis},e.prototype.getScale=function(t,e,n){return(n?this.d3.scaleTime():this.d3.scaleLinear()).range([t,e])},e.prototype.getX=function(t,e,n,r){var i,a=this.getScale(t,e,this.isTimeSeries()),o=n?a.domain(n):a;for(i in this.isCategorized()?(r=r||function(){return 0},a=function(t,e){var n=o(t)+r(t);return e?n:Math.ceil(n)}):a=function(t,e){var n=o(t);return e?n:Math.ceil(n)},o)a[i]=o[i];return a.orgDomain=function(){return o.domain()},this.isCategorized()&&(a.domain=function(t){return arguments.length?(o.domain(t),a):[(t=this.orgDomain())[0],t[1]+1]}),a},e.prototype.getY=function(t,e,n){var r=this.getScale(t,e,this.isTimeSeriesY());return n&&r.domain(n),r},e.prototype.getYScale=function(t){return"y2"===this.axis.getId(t)?this.y2:this.y},e.prototype.getSubYScale=function(t){return"y2"===this.axis.getId(t)?this.subY2:this.subY},e.prototype.updateScales=function(){var t=this,e=t.config,n=!t.x;t.xMin=e.axis_rotated?1:0,t.xMax=e.axis_rotated?t.height:t.width,t.yMin=e.axis_rotated?0:t.height,t.yMax=e.axis_rotated?t.width:1,t.subXMin=t.xMin,t.subXMax=t.xMax,t.subYMin=e.axis_rotated?0:t.height2,t.subYMax=e.axis_rotated?t.width2:1,t.x=t.getX(t.xMin,t.xMax,n?void 0:t.x.orgDomain(),function(){return t.xAxis.tickOffset()}),t.y=t.getY(t.yMin,t.yMax,n?e.axis_y_default:t.y.domain()),t.y2=t.getY(t.yMin,t.yMax,n?e.axis_y2_default:t.y2.domain()),t.subX=t.getX(t.xMin,t.xMax,t.orgXDomain,function(e){return e%1?0:t.subXAxis.tickOffset()}),t.subY=t.getY(t.subYMin,t.subYMax,n?e.axis_y_default:t.subY.domain()),t.subY2=t.getY(t.subYMin,t.subYMax,n?e.axis_y2_default:t.subY2.domain()),t.xAxisTickFormat=t.axis.getXAxisTickFormat(),t.xAxisTickValues=t.axis.getXAxisTickValues(),t.yAxisTickValues=t.axis.getYAxisTickValues(),t.y2AxisTickValues=t.axis.getY2AxisTickValues(),t.xAxis=t.axis.getXAxis(t.x,t.xOrient,t.xAxisTickFormat,t.xAxisTickValues,e.axis_x_tick_outer),t.subXAxis=t.axis.getXAxis(t.subX,t.subXOrient,t.xAxisTickFormat,t.xAxisTickValues,e.axis_x_tick_outer),t.yAxis=t.axis.getYAxis(t.y,t.yOrient,e.axis_y_tick_format,t.yAxisTickValues,e.axis_y_tick_outer),t.y2Axis=t.axis.getYAxis(t.y2,t.y2Orient,e.axis_y2_tick_format,t.y2AxisTickValues,e.axis_y2_tick_outer),n||t.brush&&t.brush.updateScale(t.subX),t.updateArc&&t.updateArc()},e.prototype.selectPoint=function(t,e,n){var r=this,i=r.config,o=(i.axis_rotated?r.circleY:r.circleX).bind(r),s=(i.axis_rotated?r.circleX:r.circleY).bind(r),u=r.pointSelectR.bind(r);i.data_onselected.call(r.api,e,t.node()),r.main.select("."+a.selectedCircles+r.getTargetSelectorSuffix(e.id)).selectAll("."+a.selectedCircle+"-"+n).data([e]).enter().append("circle").attr("class",function(){return r.generateClass(a.selectedCircle,n)}).attr("cx",o).attr("cy",s).attr("stroke",function(){return r.color(e)}).attr("r",function(t){return 1.4*r.pointSelectR(t)}).transition().duration(100).attr("r",u)},e.prototype.unselectPoint=function(t,e,n){this.config.data_onunselected.call(this.api,e,t.node()),this.main.select("."+a.selectedCircles+this.getTargetSelectorSuffix(e.id)).selectAll("."+a.selectedCircle+"-"+n).transition().duration(100).attr("r",0).remove()},e.prototype.togglePoint=function(t,e,n,r){t?this.selectPoint(e,n,r):this.unselectPoint(e,n,r)},e.prototype.selectPath=function(t,e){var n=this;n.config.data_onselected.call(n,e,t.node()),n.config.interaction_brighten&&t.transition().duration(100).style("fill",function(){return n.d3.rgb(n.color(e)).brighter(.75)})},e.prototype.unselectPath=function(t,e){var n=this;n.config.data_onunselected.call(n,e,t.node()),n.config.interaction_brighten&&t.transition().duration(100).style("fill",function(){return n.color(e)})},e.prototype.togglePath=function(t,e,n,r){t?this.selectPath(e,n,r):this.unselectPath(e,n,r)},e.prototype.getToggle=function(t,e){var n;return"circle"===t.nodeName?n=this.isStepType(e)?function(){}:this.togglePoint:"path"===t.nodeName&&(n=this.togglePath),n},e.prototype.toggleShape=function(t,e,n){var r=this,i=r.d3,o=r.config,s=i.select(t),u=s.classed(a.SELECTED),c=r.getToggle(t,e).bind(r);o.data_selection_enabled&&o.data_selection_isselectable(e)&&(o.data_selection_multiple||r.main.selectAll("."+a.shapes+(o.data_selection_grouped?r.getTargetSelectorSuffix(e.id):"")).selectAll("."+a.shape).each(function(t,e){var n=i.select(this);n.classed(a.SELECTED)&&c(!1,n.classed(a.SELECTED,!1),t,e)}),s.classed(a.SELECTED,!u),c(!u,s,e,n))},e.prototype.initBar=function(){this.main.select("."+a.chart).append("g").attr("class",a.chartBars)},e.prototype.updateTargetsForBar=function(t){var e=this,n=e.config,r=e.classChartBar.bind(e),i=e.classBars.bind(e),o=e.classFocus.bind(e);e.main.select("."+a.chartBars).selectAll("."+a.chartBar).data(t).attr("class",function(t){return r(t)+o(t)}).enter().append("g").attr("class",r).style("pointer-events","none").append("g").attr("class",i).style("cursor",function(t){return n.data_selection_isselectable(t)?"pointer":null})},e.prototype.updateBar=function(t){var e=this,n=e.barData.bind(e),r=e.classBar.bind(e),i=e.initialOpacity.bind(e),o=function(t){return e.color(t.id)},s=e.main.selectAll("."+a.bars).selectAll("."+a.bar).data(n),u=s.enter().append("path").attr("class",r).style("stroke",o).style("fill",o);e.mainBar=u.merge(s).style("opacity",i),s.exit().transition().duration(t).style("opacity",0)},e.prototype.redrawBar=function(t,e,n){return[(e?this.mainBar.transition(n):this.mainBar).attr("d",t).style("stroke",this.color).style("fill",this.color).style("opacity",1)]},e.prototype.getBarW=function(t,e){var n=this.config,r="number"==typeof n.bar_width?n.bar_width:e?t.tickInterval()*n.bar_width_ratio/e:0;return n.bar_width_max&&r>n.bar_width_max?n.bar_width_max:r},e.prototype.getBars=function(t,e){return(e?this.main.selectAll("."+a.bars+this.getTargetSelectorSuffix(e)):this.main).selectAll("."+a.bar+(y(t)?"-"+t:""))},e.prototype.expandBars=function(t,e,n){n&&this.unexpandBars(),this.getBars(t,e).classed(a.EXPANDED,!0)},e.prototype.unexpandBars=function(t){this.getBars(t).classed(a.EXPANDED,!1)},e.prototype.generateDrawBar=function(t,e){var n=this.config,r=this.generateGetBarPoints(t,e);return function(t,e){var i=r(t,e),a=n.axis_rotated?1:0,o=n.axis_rotated?0:1;return"M "+i[0][a]+","+i[0][o]+" L"+i[1][a]+","+i[1][o]+" L"+i[2][a]+","+i[2][o]+" L"+i[3][a]+","+i[3][o]+" z"}},e.prototype.generateGetBarPoints=function(t,e){var n=this,r=e?n.subXAxis:n.xAxis,i=t.__max__+1,a=n.getBarW(r,i),o=n.getShapeX(a,i,t,!!e),s=n.getShapeY(!!e),u=n.getShapeOffset(n.isBarType,t,!!e),c=a*(n.config.bar_space/2),l=e?n.getSubYScale:n.getYScale;return function(t,e){var r=l.call(n,t.id)(0),i=u(t,e)||r,f=o(t),h=s(t);return n.config.axis_rotated&&(0<t.value&&h<r||t.value<0&&r<h)&&(h=r),[[f+c,i],[f+c,h-(r-i)],[f+a-c,h-(r-i)],[f+a-c,i]]}},e.prototype.isWithinBar=function(t,e){var n=e.getBoundingClientRect(),r=e.pathSegList.getItem(0),i=e.pathSegList.getItem(1),a=Math.min(r.x,i.x),o=Math.min(r.y,i.y),s=a+n.width+2,u=o+n.height+2,c=o-2;return a-2<t[0]&&t[0]<s&&c<t[1]&&t[1]<u},e.prototype.getShapeIndices=function(t){var e,n,r=this.config,i={},a=0;return this.filterTargetsToShow(this.data.targets.filter(t,this)).forEach(function(t){for(e=0;e<r.data_groups.length;e++)if(!(r.data_groups[e].indexOf(t.id)<0))for(n=0;n<r.data_groups[e].length;n++)if(r.data_groups[e][n]in i){i[t.id]=i[r.data_groups[e][n]];break}_(i[t.id])&&(i[t.id]=a++)}),i.__max__=a-1,i},e.prototype.getShapeX=function(t,e,n,r){var i=r?this.subX:this.x;return function(r){var a=r.id in n?n[r.id]:0;return r.x||0===r.x?i(r.x)-t*(e/2-a):0}},e.prototype.getShapeY=function(t){var e=this;return function(n){return(t?e.getSubYScale(n.id):e.getYScale(n.id))(n.value)}},e.prototype.getShapeOffset=function(t,e,n){var r=this,i=r.orderTargets(r.filterTargetsToShow(r.data.targets.filter(t,r))),a=i.map(function(t){return t.id});return function(t,o){var s=n?r.getSubYScale(t.id):r.getYScale(t.id),u=s(0),c=u;return i.forEach(function(n){var i=r.isStepType(t)?r.convertValuesToStep(n.values):n.values;n.id!==t.id&&e[n.id]===e[t.id]&&a.indexOf(n.id)<a.indexOf(t.id)&&(void 0!==i[o]&&+i[o].x==+t.x||(o=-1,i.forEach(function(e,n){e.x===t.x&&(o=n)})),o in i&&i[o].value*t.value>=0&&(c+=s(i[o].value)-u))}),c}},e.prototype.isWithinShape=function(t,e){var n,r=this,i=r.d3.select(t);return r.isTargetToShow(e.id)?"circle"===t.nodeName?n=r.isStepType(e)?r.isWithinStep(t,r.getYScale(e.id)(e.value)):r.isWithinCircle(t,1.5*r.pointSelectR(e)):"path"===t.nodeName&&(n=!i.classed(a.bar)||r.isWithinBar(r.d3.mouse(t),t)):n=!1,n},e.prototype.getInterpolate=function(t){var e=this,n=e.d3,r={linear:n.curveLinear,"linear-closed":n.curveLinearClosed,basis:n.curveBasis,"basis-open":n.curveBasisOpen,"basis-closed":n.curveBasisClosed,bundle:n.curveBundle,cardinal:n.curveCardinal,"cardinal-open":n.curveCardinalOpen,"cardinal-closed":n.curveCardinalClosed,monotone:n.curveMonotoneX,step:n.curveStep,"step-before":n.curveStepBefore,"step-after":n.curveStepAfter};return e.isSplineType(t)?r[e.config.spline_interpolation_type]||r.cardinal:e.isStepType(t)?r[e.config.line_step_type]:r.linear},e.prototype.initLine=function(){this.main.select("."+a.chart).append("g").attr("class",a.chartLines)},e.prototype.updateTargetsForLine=function(t){var e,n=this,r=n.config,i=n.classChartLine.bind(n),o=n.classLines.bind(n),s=n.classAreas.bind(n),u=n.classCircles.bind(n),c=n.classFocus.bind(n);(e=n.main.select("."+a.chartLines).selectAll("."+a.chartLine).data(t).attr("class",function(t){return i(t)+c(t)}).enter().append("g").attr("class",i).style("opacity",0).style("pointer-events","none")).append("g").attr("class",o),e.append("g").attr("class",s),e.append("g").attr("class",function(t){return n.generateClass(a.selectedCircles,t.id)}),e.append("g").attr("class",u).style("cursor",function(t){return r.data_selection_isselectable(t)?"pointer":null}),t.forEach(function(t){n.main.selectAll("."+a.selectedCircles+n.getTargetSelectorSuffix(t.id)).selectAll("."+a.selectedCircle).each(function(e){e.value=t.values[e.index].value})})},e.prototype.updateLine=function(t){var e=this,n=e.main.selectAll("."+a.lines).selectAll("."+a.line).data(e.lineData.bind(e)),r=n.enter().append("path").attr("class",e.classLine.bind(e)).style("stroke",e.color);e.mainLine=r.merge(n).style("opacity",e.initialOpacity.bind(e)).style("shape-rendering",function(t){return e.isStepType(t)?"crispEdges":""}).attr("transform",null),n.exit().transition().duration(t).style("opacity",0)},e.prototype.redrawLine=function(t,e,n){return[(e?this.mainLine.transition(n):this.mainLine).attr("d",t).style("stroke",this.color).style("opacity",1)]},e.prototype.generateDrawLine=function(t,e){var n=this,r=n.config,i=n.d3.line(),a=n.generateGetLinePoints(t,e),o=e?n.getSubYScale:n.getYScale,s=function(t){return(e?n.subxx:n.xx).call(n,t)},u=function(t,e){return r.data_groups.length>0?a(t,e)[0][1]:o.call(n,t.id)(t.value)};return i=r.axis_rotated?i.x(u).y(s):i.x(s).y(u),r.line_connectNull||(i=i.defined(function(t){return null!=t.value})),function(t){var a,s=r.line_connectNull?n.filterRemoveNull(t.values):t.values,u=e?n.subX:n.x,c=o.call(n,t.id),l=0,f=0;return n.isLineType(t)?r.data_regions[t.id]?a=n.lineWithRegions(s,u,c,r.data_regions[t.id]):(n.isStepType(t)&&(s=n.convertValuesToStep(s)),a=i.curve(n.getInterpolate(t))(s)):(s[0]&&(l=u(s[0].x),f=c(s[0].value)),a=r.axis_rotated?"M "+f+" "+l:"M "+l+" "+f),a||"M 0 0"}},e.prototype.generateGetLinePoints=function(t,e){var n=this,r=n.config,i=t.__max__+1,a=n.getShapeX(0,i,t,!!e),o=n.getShapeY(!!e),s=n.getShapeOffset(n.isLineType,t,!!e),u=e?n.getSubYScale:n.getYScale;return function(t,e){var i=u.call(n,t.id)(0),c=s(t,e)||i,l=a(t),f=o(t);return r.axis_rotated&&(0<t.value&&f<i||t.value<0&&i<f)&&(f=i),[[l,f-(i-c)],[l,f-(i-c)],[l,f-(i-c)],[l,f-(i-c)]]}},e.prototype.lineWithRegions=function(t,e,n,r){var i,a,o,s,u,c,l,f,d,p,g,y=this,x=y.config,v="M",m=y.isCategorized()?.5:0,b=[];function w(t,e){var n;for(n=0;n<e.length;n++)if(e[n].start<t&&t<=e[n].end)return!0;return!1}if(h(r))for(i=0;i<r.length;i++)b[i]={},_(r[i].start)?b[i].start=t[0].x:b[i].start=y.isTimeSeries()?y.parseDate(r[i].start):r[i].start,_(r[i].end)?b[i].end=t[t.length-1].x:b[i].end=y.isTimeSeries()?y.parseDate(r[i].end):r[i].end;function S(t){return"M"+t[0][0]+" "+t[0][1]+" "+t[1][0]+" "+t[1][1]}for(p=x.axis_rotated?function(t){return n(t.value)}:function(t){return e(t.x)},g=x.axis_rotated?function(t){return e(t.x)}:function(t){return n(t.value)},o=y.isTimeSeries()?function(t,r,i,a){var o=t.x.getTime(),s=r.x-t.x,c=new Date(o+s*i),l=new Date(o+s*(i+a));return S(x.axis_rotated?[[n(u(i)),e(c)],[n(u(i+a)),e(l)]]:[[e(c),n(u(i))],[e(l),n(u(i+a))]])}:function(t,r,i,a){return S(x.axis_rotated?[[n(u(i),!0),e(s(i))],[n(u(i+a),!0),e(s(i+a))]]:[[e(s(i),!0),n(u(i))],[e(s(i+a),!0),n(u(i+a))]])},i=0;i<t.length;i++){if(_(b)||!w(t[i].x,b))v+=" "+p(t[i])+" "+g(t[i]);else for(s=y.getScale(t[i-1].x+m,t[i].x+m,y.isTimeSeries()),u=y.getScale(t[i-1].value,t[i].value),c=e(t[i].x)-e(t[i-1].x),l=n(t[i].value)-n(t[i-1].value),d=2*(f=2/Math.sqrt(Math.pow(c,2)+Math.pow(l,2))),a=f;a<=1;a+=d)v+=o(t[i-1],t[i],a,f);t[i].x}return v},e.prototype.updateArea=function(t){var e=this,n=e.d3,r=e.main.selectAll("."+a.areas).selectAll("."+a.area).data(e.lineData.bind(e)),i=r.enter().append("path").attr("class",e.classArea.bind(e)).style("fill",e.color).style("opacity",function(){return e.orgAreaOpacity=+n.select(this).style("opacity"),0});e.mainArea=i.merge(r).style("opacity",e.orgAreaOpacity),r.exit().transition().duration(t).style("opacity",0)},e.prototype.redrawArea=function(t,e,n){return[(e?this.mainArea.transition(n):this.mainArea).attr("d",t).style("fill",this.color).style("opacity",this.orgAreaOpacity)]},e.prototype.generateDrawArea=function(t,e){var n=this,r=n.config,i=n.d3.area(),a=n.generateGetAreaPoints(t,e),o=e?n.getSubYScale:n.getYScale,s=function(t){return(e?n.subxx:n.xx).call(n,t)},u=function(t,e){return r.data_groups.length>0?a(t,e)[0][1]:o.call(n,t.id)(n.getAreaBaseValue(t.id))},c=function(t,e){return r.data_groups.length>0?a(t,e)[1][1]:o.call(n,t.id)(t.value)};return i=r.axis_rotated?i.x0(u).x1(c).y(s):i.x(s).y0(r.area_above?0:u).y1(c),r.line_connectNull||(i=i.defined(function(t){return null!==t.value})),function(t){var e,a=r.line_connectNull?n.filterRemoveNull(t.values):t.values,o=0,s=0;return n.isAreaType(t)?(n.isStepType(t)&&(a=n.convertValuesToStep(a)),e=i.curve(n.getInterpolate(t))(a)):(a[0]&&(o=n.x(a[0].x),s=n.getYScale(t.id)(a[0].value)),e=r.axis_rotated?"M "+s+" "+o:"M "+o+" "+s),e||"M 0 0"}},e.prototype.getAreaBaseValue=function(){return 0},e.prototype.generateGetAreaPoints=function(t,e){var n=this,r=n.config,i=t.__max__+1,a=n.getShapeX(0,i,t,!!e),o=n.getShapeY(!!e),s=n.getShapeOffset(n.isAreaType,t,!!e),u=e?n.getSubYScale:n.getYScale;return function(t,e){var i=u.call(n,t.id)(0),c=s(t,e)||i,l=a(t),f=o(t);return r.axis_rotated&&(0<t.value&&f<i||t.value<0&&i<f)&&(f=i),[[l,c],[l,f-(i-c)],[l,f-(i-c)],[l,c]]}},e.prototype.updateCircle=function(t,e){var n=this,r=n.main.selectAll("."+a.circles).selectAll("."+a.circle).data(n.lineOrScatterData.bind(n)),i=r.enter().append("circle").attr("class",n.classCircle.bind(n)).attr("cx",t).attr("cy",e).attr("r",n.pointR.bind(n)).style("fill",n.color);n.mainCircle=i.merge(r).style("opacity",n.initialOpacityForCircle.bind(n)),r.exit().style("opacity",0)},e.prototype.redrawCircle=function(t,e,n,r){var i=this,o=i.main.selectAll("."+a.selectedCircle);return[(n?i.mainCircle.transition(r):i.mainCircle).style("opacity",this.opacityForCircle.bind(i)).style("fill",i.color).attr("cx",t).attr("cy",e),(n?o.transition(r):o).attr("cx",t).attr("cy",e)]},e.prototype.circleX=function(t){return t.x||0===t.x?this.x(t.x):null},e.prototype.updateCircleY=function(){var t,e,n=this;n.config.data_groups.length>0?(t=n.getShapeIndices(n.isLineType),e=n.generateGetLinePoints(t),n.circleY=function(t,n){return e(t,n)[0][1]}):n.circleY=function(t){return n.getYScale(t.id)(t.value)}},e.prototype.getCircles=function(t,e){return(e?this.main.selectAll("."+a.circles+this.getTargetSelectorSuffix(e)):this.main).selectAll("."+a.circle+(y(t)?"-"+t:""))},e.prototype.expandCircles=function(t,e,n){var r=this.pointExpandedR.bind(this);n&&this.unexpandCircles(),this.getCircles(t,e).classed(a.EXPANDED,!0).attr("r",r)},e.prototype.unexpandCircles=function(t){var e=this,n=e.pointR.bind(e);e.getCircles(t).filter(function(){return e.d3.select(this).classed(a.EXPANDED)}).classed(a.EXPANDED,!1).attr("r",n)},e.prototype.pointR=function(t){var e=this.config;return this.isStepType(t)?0:p(e.point_r)?e.point_r(t):e.point_r},e.prototype.pointExpandedR=function(t){var e=this.config;return e.point_focus_expand_enabled?p(e.point_focus_expand_r)?e.point_focus_expand_r(t):e.point_focus_expand_r?e.point_focus_expand_r:1.75*this.pointR(t):this.pointR(t)},e.prototype.pointSelectR=function(t){var e=this.config;return p(e.point_select_r)?e.point_select_r(t):e.point_select_r?e.point_select_r:4*this.pointR(t)},e.prototype.isWithinCircle=function(t,e){var n=this.d3,r=n.mouse(t),i=n.select(t),a=+i.attr("cx"),o=+i.attr("cy");return Math.sqrt(Math.pow(a-r[0],2)+Math.pow(o-r[1],2))<e},e.prototype.isWithinStep=function(t,e){return Math.abs(e-this.d3.mouse(t)[1])<30},e.prototype.getCurrentWidth=function(){var t=this.config;return t.size_width?t.size_width:this.getParentWidth()},e.prototype.getCurrentHeight=function(){var t=this.config,e=t.size_height?t.size_height:this.getParentHeight();return e>0?e:320/(this.hasType("gauge")&&!t.gauge_fullCircle?2:1)},e.prototype.getCurrentPaddingTop=function(){var t=this.config,e=y(t.padding_top)?t.padding_top:0;return this.title&&this.title.node()&&(e+=this.getTitlePadding()),e},e.prototype.getCurrentPaddingBottom=function(){var t=this.config;return y(t.padding_bottom)?t.padding_bottom:0},e.prototype.getCurrentPaddingLeft=function(t){var e=this.config;return y(e.padding_left)?e.padding_left:e.axis_rotated?!e.axis_x_show||e.axis_x_inner?1:Math.max(s(this.getAxisWidthByAxisId("x",t)),40):!e.axis_y_show||e.axis_y_inner?this.axis.getYAxisLabelPosition().isOuter?30:1:s(this.getAxisWidthByAxisId("y",t))},e.prototype.getCurrentPaddingRight=function(){var t=this,e=t.config,n=t.isLegendRight?t.getLegendWidth()+20:0;return y(e.padding_right)?e.padding_right+1:e.axis_rotated?10+n:!e.axis_y2_show||e.axis_y2_inner?2+n+(t.axis.getY2AxisLabelPosition().isOuter?20:0):s(t.getAxisWidthByAxisId("y2"))+n},e.prototype.getParentRectValue=function(t){for(var e,n=this.selectChart.node();n&&"BODY"!==n.tagName;){try{e=n.getBoundingClientRect()[t]}catch(r){"width"===t&&(e=n.offsetWidth)}if(e)break;n=n.parentNode}return e},e.prototype.getParentWidth=function(){return this.getParentRectValue("width")},e.prototype.getParentHeight=function(){return this.getParentRectValue("height")},e.prototype.getSvgLeft=function(t){var e=this,n=e.config,r=n.axis_rotated||!n.axis_rotated&&!n.axis_y_inner,i=n.axis_rotated?a.axisX:a.axisY,o=e.main.select("."+i).node(),s=o&&r?o.getBoundingClientRect():{right:0},u=e.selectChart.node().getBoundingClientRect(),c=e.hasArcType(),l=s.right-u.left-(c?0:e.getCurrentPaddingLeft(t));return l>0?l:0},e.prototype.getAxisWidthByAxisId=function(t,e){var n=this.axis.getLabelPositionById(t);return this.axis.getMaxTickWidth(t,e)+(n.isInner?20:40)},e.prototype.getHorizontalAxisHeight=function(t){var e=this,n=e.config,r=30;return"x"!==t||n.axis_x_show?"x"===t&&n.axis_x_height?n.axis_x_height:"y"!==t||n.axis_y_show?"y2"!==t||n.axis_y2_show?("x"===t&&!n.axis_rotated&&n.axis_x_tick_rotate&&(r=30+e.axis.getMaxTickWidth(t)*Math.cos(Math.PI*(90-Math.abs(n.axis_x_tick_rotate))/180)),"y"===t&&n.axis_rotated&&n.axis_y_tick_rotate&&(r=30+e.axis.getMaxTickWidth(t)*Math.cos(Math.PI*(90-Math.abs(n.axis_y_tick_rotate))/180)),r+(e.axis.getLabelPositionById(t).isInner?0:10)+("y2"===t?-10:0)):e.rotated_padding_top:!n.legend_show||e.isLegendRight||e.isLegendInset?1:10:8},e.prototype.initBrush=function(t){var e=this,n=e.d3;return e.brush=(e.config.axis_rotated?n.brushY():n.brushX()).on("brush",function(){var t=n.event.sourceEvent;t&&"zoom"===t.type||e.redrawForBrush()}).on("end",function(){var t=n.event.sourceEvent;t&&"zoom"===t.type||e.brush.empty()&&t&&"end"!==t.type&&e.brush.clear()}),e.brush.updateExtent=function(){var t,n=this.scale.range();return t=e.config.axis_rotated?[[0,n[0]],[e.width2,n[1]]]:[[n[0],0],[n[1],e.height2]],this.extent(t),this},e.brush.updateScale=function(t){return this.scale=t,this},e.brush.update=function(t){this.updateScale(t||e.subX).updateExtent(),e.context.select("."+a.brush).call(this)},e.brush.clear=function(){e.context.select("."+a.brush).call(e.brush.move,null)},e.brush.selection=function(){return n.brushSelection(e.context.select("."+a.brush).node())},e.brush.selectionAsValue=function(t,n){var r,i;return t?(e.context&&(r=[this.scale(t[0]),this.scale(t[1])],i=e.context.select("."+a.brush),n&&(i=i.transition()),e.brush.move(i,r)),[]):(r=e.brush.selection()||[0,0],[this.scale.invert(r[0]),this.scale.invert(r[1])])},e.brush.empty=function(){var t=e.brush.selection();return!t||t[0]===t[1]},e.brush.updateScale(t)},e.prototype.initSubchart=function(){var t=this,e=t.config,n=t.context=t.svg.append("g").attr("transform",t.getTranslate("context")),r=e.subchart_show?"visible":"hidden";n.style("visibility",r),n.append("g").attr("clip-path",t.clipPathForSubchart).attr("class",a.chart),n.select("."+a.chart).append("g").attr("class",a.chartBars),n.select("."+a.chart).append("g").attr("class",a.chartLines),n.append("g").attr("clip-path",t.clipPath).attr("class",a.brush),t.axes.subx=n.append("g").attr("class",a.axisX).attr("transform",t.getTranslate("subx")).attr("clip-path",e.axis_rotated?"":t.clipPathForXAxis)},e.prototype.initSubchartBrush=function(){this.initBrush(this.subX).updateExtent(),this.context.select("."+a.brush).call(this.brush)},e.prototype.updateTargetsForSubchart=function(t){var e,n,r,i,o=this,s=o.context,u=o.config,c=o.classChartBar.bind(o),l=o.classBars.bind(o),f=o.classChartLine.bind(o),h=o.classLines.bind(o),d=o.classAreas.bind(o);u.subchart_show&&((r=(i=s.select("."+a.chartBars).selectAll("."+a.chartBar).data(t)).enter().append("g").style("opacity",0)).merge(i).attr("class",c),r.append("g").attr("class",l),(e=(n=s.select("."+a.chartLines).selectAll("."+a.chartLine).data(t)).enter().append("g").style("opacity",0)).merge(n).attr("class",f),e.append("g").attr("class",h),e.append("g").attr("class",d),s.selectAll("."+a.brush+" rect").attr(u.axis_rotated?"width":"height",u.axis_rotated?o.width2:o.height2))},e.prototype.updateBarForSubchart=function(t){var e=this,n=e.context.selectAll("."+a.bars).selectAll("."+a.bar).data(e.barData.bind(e)),r=n.enter().append("path").attr("class",e.classBar.bind(e)).style("stroke","none").style("fill",e.color);n.exit().transition().duration(t).style("opacity",0).remove(),e.contextBar=r.merge(n).style("opacity",e.initialOpacity.bind(e))},e.prototype.redrawBarForSubchart=function(t,e,n){(e?this.contextBar.transition(Math.random().toString()).duration(n):this.contextBar).attr("d",t).style("opacity",1)},e.prototype.updateLineForSubchart=function(t){var e=this,n=e.context.selectAll("."+a.lines).selectAll("."+a.line).data(e.lineData.bind(e)),r=n.enter().append("path").attr("class",e.classLine.bind(e)).style("stroke",e.color);n.exit().transition().duration(t).style("opacity",0).remove(),e.contextLine=r.merge(n).style("opacity",e.initialOpacity.bind(e))},e.prototype.redrawLineForSubchart=function(t,e,n){(e?this.contextLine.transition(Math.random().toString()).duration(n):this.contextLine).attr("d",t).style("opacity",1)},e.prototype.updateAreaForSubchart=function(t){var e=this,n=e.d3,r=e.context.selectAll("."+a.areas).selectAll("."+a.area).data(e.lineData.bind(e)),i=r.enter().append("path").attr("class",e.classArea.bind(e)).style("fill",e.color).style("opacity",function(){return e.orgAreaOpacity=+n.select(this).style("opacity"),0});r.exit().transition().duration(t).style("opacity",0).remove(),e.contextArea=i.merge(r).style("opacity",0)},e.prototype.redrawAreaForSubchart=function(t,e,n){(e?this.contextArea.transition(Math.random().toString()).duration(n):this.contextArea).attr("d",t).style("fill",this.color).style("opacity",this.orgAreaOpacity)},e.prototype.redrawSubchart=function(t,e,n,r,i,a,o){var s,u,c,l=this,f=l.d3,h=l.config;l.context.style("visibility",h.subchart_show?"visible":"hidden"),h.subchart_show&&(f.event&&"zoom"===f.event.type&&l.brush.selectionAsValue(l.x.orgDomain()),t&&(l.brush.empty()||l.brush.selectionAsValue(l.x.orgDomain()),s=l.generateDrawArea(i,!0),u=l.generateDrawBar(a,!0),c=l.generateDrawLine(o,!0),l.updateBarForSubchart(n),l.updateLineForSubchart(n),l.updateAreaForSubchart(n),l.redrawBarForSubchart(u,n,n),l.redrawLineForSubchart(c,n,n),l.redrawAreaForSubchart(s,n,n)))},e.prototype.redrawForBrush=function(){var t,e=this,n=e.x,r=e.d3;e.redraw({withTransition:!1,withY:e.config.zoom_rescale,withSubchart:!1,withUpdateXDomain:!0,withEventRect:!1,withDimension:!1}),t=r.event.selection||e.brush.scale.range(),e.main.select("."+a.eventRect).call(e.zoom.transform,r.zoomIdentity.scale(e.width/(t[1]-t[0])).translate(-t[0],0)),e.config.subchart_onbrush.call(e.api,n.orgDomain())},e.prototype.transformContext=function(t,e){var n;e&&e.axisSubX?n=e.axisSubX:(n=this.context.select("."+a.axisX),t&&(n=n.transition())),this.context.attr("transform",this.getTranslate("context")),n.attr("transform",this.getTranslate("subx"))},e.prototype.getDefaultSelection=function(){var t=this,e=t.config,n=p(e.axis_x_selection)?e.axis_x_selection(t.getXDomain(t.data.targets)):e.axis_x_selection;return t.isTimeSeries()&&(n=[t.parseDate(n[0]),t.parseDate(n[1])]),n},e.prototype.initText=function(){this.main.select("."+a.chart).append("g").attr("class",a.chartTexts),this.mainText=this.d3.selectAll([])},e.prototype.updateTargetsForText=function(t){var e=this,n=e.classChartText.bind(e),r=e.classTexts.bind(e),i=e.classFocus.bind(e),o=e.main.select("."+a.chartTexts).selectAll("."+a.chartText).data(t),s=o.enter().append("g").attr("class",n).style("opacity",0).style("pointer-events","none");s.append("g").attr("class",r),s.merge(o).attr("class",function(t){return n(t)+i(t)})},e.prototype.updateText=function(t,e,n){var r=this,i=r.config,o=r.barOrLineData.bind(r),s=r.classText.bind(r),u=r.main.selectAll("."+a.texts).selectAll("."+a.text).data(o),c=u.enter().append("text").attr("class",s).attr("text-anchor",function(t){return i.axis_rotated?t.value<0?"end":"start":"middle"}).style("stroke","none").attr("x",t).attr("y",e).style("fill",function(t){return r.color(t)}).style("fill-opacity",0);r.mainText=c.merge(u).text(function(t,e,n){return r.dataLabelFormat(t.id)(t.value,t.id,e,n)}),u.exit().transition().duration(n).style("fill-opacity",0).remove()},e.prototype.redrawText=function(t,e,n,r,i){return[(r?this.mainText.transition(i):this.mainText).attr("x",t).attr("y",e).style("fill",this.color).style("fill-opacity",n?0:this.opacityForText.bind(this))]},e.prototype.getTextRect=function(t,e,n){var r,i=this.d3.select("body").append("div").classed("c3",!0),a=i.append("svg").style("visibility","hidden").style("position","fixed").style("top",0).style("left",0),o=this.d3.select(n).style("font");return a.selectAll(".dummy").data([t]).enter().append("text").classed(e||"",!0).style("font",o).text(t).each(function(){r=this.getBoundingClientRect()}),i.remove(),r},e.prototype.generateXYForText=function(t,e,n,r){var i=this,a=i.generateGetAreaPoints(t,!1),o=i.generateGetBarPoints(e,!1),s=i.generateGetLinePoints(n,!1),u=r?i.getXForText:i.getYForText;return function(t,e){var n=i.isAreaType(t)?a:i.isBarType(t)?o:s;return u.call(i,n(t,e),t,this)}},e.prototype.getXForText=function(t,e,n){var r,i,a=this,o=n.getBoundingClientRect();return a.config.axis_rotated?(i=a.isBarType(e)?4:6,r=t[2][1]+i*(e.value<0?-1:1)):r=a.hasType("bar")?(t[2][0]+t[0][0])/2:t[0][0],null===e.value&&(r>a.width?r=a.width-o.width:r<0&&(r=4)),r},e.prototype.getYForText=function(t,e,n){var r,i=this,a=n.getBoundingClientRect();return i.config.axis_rotated?r=(t[0][0]+t[2][0]+.6*a.height)/2:(r=t[2][1],e.value<0||0===e.value&&!i.hasPositiveValue?(r+=a.height,i.isBarType(e)&&i.isSafari()?r-=3:!i.isBarType(e)&&i.isChrome()&&(r+=3)):r+=i.isBarType(e)?-3:-6),null!==e.value||i.config.axis_rotated||(r<a.height?r=a.height:r>this.height&&(r=this.height-4)),r},e.prototype.initTitle=function(){this.title=this.svg.append("text").text(this.config.title_text).attr("class",this.CLASS.title)},e.prototype.redrawTitle=function(){var t=this;t.title.attr("x",t.xForTitle.bind(t)).attr("y",t.yForTitle.bind(t))},e.prototype.xForTitle=function(){var t=this,e=t.config,n=e.title_position||"left";return n.indexOf("right")>=0?t.currentWidth-t.getTextRect(t.title.node().textContent,t.CLASS.title,t.title.node()).width-e.title_padding.right:n.indexOf("center")>=0?(t.currentWidth-t.getTextRect(t.title.node().textContent,t.CLASS.title,t.title.node()).width)/2:e.title_padding.left},e.prototype.yForTitle=function(){var t=this;return t.config.title_padding.top+t.getTextRect(t.title.node().textContent,t.CLASS.title,t.title.node()).height},e.prototype.getTitlePadding=function(){return this.yForTitle()+this.config.title_padding.bottom},e.prototype.initTooltip=function(){var t,e=this,n=e.config;if(e.tooltip=e.selectChart.style("position","relative").append("div").attr("class",a.tooltipContainer).style("position","absolute").style("pointer-events","none").style("display","none"),n.tooltip_init_show){if(e.isTimeSeries()&&g(n.tooltip_init_x)){for(n.tooltip_init_x=e.parseDate(n.tooltip_init_x),t=0;t<e.data.targets[0].values.length&&e.data.targets[0].values[t].x-n.tooltip_init_x!=0;t++);n.tooltip_init_x=t}e.tooltip.html(n.tooltip_contents.call(e,e.data.targets.map(function(t){return e.addName(t.values[n.tooltip_init_x])}),e.axis.getXAxisTickFormat(),e.getYFormat(e.hasArcType()),e.color)),e.tooltip.style("top",n.tooltip_init_position.top).style("left",n.tooltip_init_position.left).style("display","block")}},e.prototype.getTooltipSortFunction=function(){var t=this,e=t.config;if(0!==e.data_groups.length&&void 0===e.tooltip_order){var n=t.orderTargets(t.data.targets).map(function(t){return t.id});return(t.isOrderAsc()||t.isOrderDesc())&&(n=n.reverse()),function(t,e){return n.indexOf(t.id)-n.indexOf(e.id)}}var r=e.tooltip_order;void 0===r&&(r=e.data_order);var i=function(t){return t?t.value:null};if(g(r)&&"asc"===r.toLowerCase())return function(t,e){return i(t)-i(e)};if(g(r)&&"desc"===r.toLowerCase())return function(t,e){return i(e)-i(t)};if(p(r)){var a=r;return void 0===e.tooltip_order&&(a=function(t,e){return r(t?{id:t.id,values:[t]}:null,e?{id:e.id,values:[e]}:null)}),a}return f(r)?function(t,e){return r.indexOf(t.id)-r.indexOf(e.id)}:void 0},e.prototype.getTooltipContent=function(t,e,n,r){var i,a,o,s,u,c,l=this,f=l.config,h=f.tooltip_format_title||e,d=f.tooltip_format_name||function(t){return t},p=f.tooltip_format_value||n,g=this.getTooltipSortFunction();for(g&&t.sort(g),a=0;a<t.length;a++)if(t[a]&&(t[a].value||0===t[a].value)&&(i||(o=v(h?h(t[a].x,t[a].index):t[a].x),i="<table class='"+l.CLASS.tooltip+"'>"+(o||0===o?"<tr><th colspan='2'>"+o+"</th></tr>":"")),void 0!==(s=v(p(t[a].value,t[a].ratio,t[a].id,t[a].index,t))))){if(null===t[a].name)continue;u=v(d(t[a].name,t[a].ratio,t[a].id,t[a].index)),c=l.levelColor?l.levelColor(t[a].value):r(t[a].id),i+="<tr class='"+l.CLASS.tooltipName+"-"+l.getTargetSelectorSuffix(t[a].id)+"'>",i+="<td class='name'><span style='background-color:"+c+"'></span>"+u+"</td>",i+="<td class='value'>"+s+"</td>",i+="</tr>"}return i+"</table>"},e.prototype.tooltipPosition=function(t,e,n,r){var i,a,o,s,u,c=this,l=c.config,f=c.d3,h=c.hasArcType(),d=f.mouse(r);return h?(a=(c.width-(c.isLegendRight?c.getLegendWidth():0))/2+d[0],s=(c.hasType("gauge")?c.height:c.height/2)+d[1]+20):(i=c.getSvgLeft(!0),l.axis_rotated?(o=(a=i+d[0]+100)+e,u=c.currentWidth-c.getCurrentPaddingRight(),s=c.x(t[0].x)+20):(o=(a=i+c.getCurrentPaddingLeft(!0)+c.x(t[0].x)+20)+e,u=i+c.currentWidth-c.getCurrentPaddingRight(),s=d[1]+15),o>u&&(a-=o-u+20),s+n>c.currentHeight&&(s-=n+30)),s<0&&(s=0),{top:s,left:a}},e.prototype.showTooltip=function(t,n){var r,i,a,o=this,s=o.config,u=o.hasArcType(),c=t.filter(function(t){return t&&y(t.value)}),l=s.tooltip_position||e.prototype.tooltipPosition;0!==c.length&&s.tooltip_show&&(o.tooltip.html(s.tooltip_contents.call(o,t,o.axis.getXAxisTickFormat(),o.getYFormat(u),o.color)).style("display","block"),r=o.tooltip.property("offsetWidth"),i=o.tooltip.property("offsetHeight"),a=l.call(this,c,r,i,n),o.tooltip.style("top",a.top+"px").style("left",a.left+"px"))},e.prototype.hideTooltip=function(){this.tooltip.style("display","none")},e.prototype.setTargetType=function(t,e){var n=this,r=n.config;n.mapToTargetIds(t).forEach(function(t){n.withoutFadeIn[t]=e===r.data_types[t],r.data_types[t]=e}),t||(r.data_type=e)},e.prototype.hasType=function(t,e){var n=this.config.data_types,r=!1;return(e=e||this.data.targets)&&e.length?e.forEach(function(e){var i=n[e.id];(i&&i.indexOf(t)>=0||!i&&"line"===t)&&(r=!0)}):Object.keys(n).length?Object.keys(n).forEach(function(e){n[e]===t&&(r=!0)}):r=this.config.data_type===t,r},e.prototype.hasArcType=function(t){return this.hasType("pie",t)||this.hasType("donut",t)||this.hasType("gauge",t)},e.prototype.isLineType=function(t){var e=this.config,n=g(t)?t:t.id;return!e.data_types[n]||["line","spline","area","area-spline","step","area-step"].indexOf(e.data_types[n])>=0},e.prototype.isStepType=function(t){var e=g(t)?t:t.id;return["step","area-step"].indexOf(this.config.data_types[e])>=0},e.prototype.isSplineType=function(t){var e=g(t)?t:t.id;return["spline","area-spline"].indexOf(this.config.data_types[e])>=0},e.prototype.isAreaType=function(t){var e=g(t)?t:t.id;return["area","area-spline","area-step"].indexOf(this.config.data_types[e])>=0},e.prototype.isBarType=function(t){var e=g(t)?t:t.id;return"bar"===this.config.data_types[e]},e.prototype.isScatterType=function(t){var e=g(t)?t:t.id;return"scatter"===this.config.data_types[e]},e.prototype.isPieType=function(t){var e=g(t)?t:t.id;return"pie"===this.config.data_types[e]},e.prototype.isGaugeType=function(t){var e=g(t)?t:t.id;return"gauge"===this.config.data_types[e]},e.prototype.isDonutType=function(t){var e=g(t)?t:t.id;return"donut"===this.config.data_types[e]},e.prototype.isArcType=function(t){return this.isPieType(t)||this.isDonutType(t)||this.isGaugeType(t)},e.prototype.lineData=function(t){return this.isLineType(t)?[t]:[]},e.prototype.arcData=function(t){return this.isArcType(t.data)?[t]:[]},e.prototype.barData=function(t){return this.isBarType(t)?t.values:[]},e.prototype.lineOrScatterData=function(t){return this.isLineType(t)||this.isScatterType(t)?t.values:[]},e.prototype.barOrLineData=function(t){return this.isBarType(t)||this.isLineType(t)?t.values:[]},e.prototype.isSafari=function(){var t=window.navigator.userAgent;return t.indexOf("Safari")>=0&&t.indexOf("Chrome")<0},e.prototype.isChrome=function(){return window.navigator.userAgent.indexOf("Chrome")>=0},e.prototype.initZoom=function(){var t,e=this,n=e.d3,r=e.config;return e.zoom=n.zoom().on("start",function(){if("scroll"===r.zoom_type){var i=n.event.sourceEvent;i&&"brush"===i.type||(t=i,r.zoom_onzoomstart.call(e.api,i))}}).on("zoom",function(){if("scroll"===r.zoom_type){var t=n.event.sourceEvent;t&&"brush"===t.type||(e.redrawForZoom(),r.zoom_onzoom.call(e.api,e.x.orgDomain()))}}).on("end",function(){if("scroll"===r.zoom_type){var i=n.event.sourceEvent;i&&"brush"===i.type||i&&t.clientX===i.clientX&&t.clientY===i.clientY||r.zoom_onzoomend.call(e.api,e.x.orgDomain())}}),e.zoom.updateDomain=function(){return n.event&&n.event.transform&&e.x.domain(n.event.transform.rescaleX(e.subX).domain()),this},e.zoom.updateExtent=function(){return this.scaleExtent([1,1/0]).translateExtent([[0,0],[e.width,e.height]]).extent([[0,0],[e.width,e.height]]),this},e.zoom.update=function(){return this.updateExtent().updateDomain()},e.zoom.updateExtent()},e.prototype.zoomTransform=function(t){var e=[this.x(t[0]),this.x(t[1])];return this.d3.zoomIdentity.scale(this.width/(e[1]-e[0])).translate(-e[0],0)},e.prototype.initDragZoom=function(){var t=this,e=t.d3,n=t.config,r=t.context=t.svg,i=t.margin.left+20.5,o=t.margin.top+.5;if("drag"===n.zoom_type&&n.zoom_enabled){var s=function(e){return e&&e.map(function(e){return t.x.invert(e)})},u=t.dragZoomBrush=e.brushX().on("start",function(){t.api.unzoom(),t.svg.select("."+a.dragZoom).classed("disabled",!1),n.zoom_onzoomstart.call(t.api,e.event.sourceEvent)}).on("brush",function(){n.zoom_onzoom.call(t.api,s(e.event.selection))}).on("end",function(){if(null!=e.event.selection){var r=s(e.event.selection);n.zoom_disableDefaultBehavior||t.api.zoom(r),t.svg.select("."+a.dragZoom).classed("disabled",!0),n.zoom_onzoomend.call(t.api,r)}});r.append("g").classed(a.dragZoom,!0).attr("clip-path",t.clipPath).attr("transform","translate("+i+","+o+")").call(u)}},e.prototype.getZoomDomain=function(){var t=this.config,e=this.d3;return[e.min([this.orgXDomain[0],t.zoom_x_min]),e.max([this.orgXDomain[1],t.zoom_x_max])]},e.prototype.redrawForZoom=function(){var t=this,e=t.d3,n=t.config,r=t.zoom,i=t.x;n.zoom_enabled&&0!==t.filterTargetsToShow(t.data.targets).length&&(r.update(),n.zoom_disableDefaultBehavior||(t.isCategorized()&&i.orgDomain()[0]===t.orgXDomain[0]&&i.domain([t.orgXDomain[0]-1e-10,i.orgDomain()[1]]),t.redraw({withTransition:!1,withY:n.zoom_rescale,withSubchart:!1,withEventRect:!1,withDimension:!1}),e.event.sourceEvent&&"mousemove"===e.event.sourceEvent.type&&(t.cancelClick=!0)))},b}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,